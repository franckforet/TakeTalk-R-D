[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/mrt_filesaver/packages/mrt_filesaver.js                                                          //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n(function () {                                                                                               // 1\n                                                                                                             // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                    //     // 4\n// packages/mrt:filesaver/lib/FileSaver.js                                                            //     // 5\n//                                                                                                    //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                      //     // 8\n/*! FileSaver.js                                                                                      // 1   // 9\n *  A saveAs() FileSaver implementation.                                                              // 2   // 10\n *  2014-01-24                                                                                        // 3   // 11\n *                                                                                                    // 4   // 12\n *  By Eli Grey, http://eligrey.com                                                                   // 5   // 13\n *  License: X11/MIT                                                                                  // 6   // 14\n *    See LICENSE.md                                                                                  // 7   // 15\n */                                                                                                   // 8   // 16\n                                                                                                      // 9   // 17\n/*global self */                                                                                      // 10  // 18\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */ // 11  // 19\n                                                                                                      // 12  // 20\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */                   // 13  // 21\n                                                                                                      // 14  // 22\nvar saveAs = saveAs                                                                                   // 15  // 23\n  // IE 10+ (native saveAs)                                                                           // 16  // 24\n  || (typeof navigator !== \"undefined\" &&                                                             // 17  // 25\n      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))                       // 18  // 26\n  // Everyone else                                                                                    // 19  // 27\n  || (function(view) {                                                                                // 20  // 28\n\t\"use strict\";                                                                                        // 21  // 29\n\t// IE <10 is explicitly unsupported                                                                  // 22  // 30\n\tif (typeof navigator !== \"undefined\" &&                                                              // 23  // 31\n\t    /MSIE [1-9]\\./.test(navigator.userAgent)) {                                                      // 24  // 32\n\t\treturn;                                                                                             // 25  // 33\n\t}                                                                                                    // 26  // 34\n\tvar                                                                                                  // 27  // 35\n\t\t  doc = view.document                                                                               // 28  // 36\n\t\t  // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet                    // 29  // 37\n\t\t, get_URL = function() {                                                                            // 30  // 38\n\t\t\treturn view.URL || view.webkitURL || view;                                                         // 31  // 39\n\t\t}                                                                                                   // 32  // 40\n\t\t, URL = view.URL || view.webkitURL || view                                                          // 33  // 41\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")                              // 34  // 42\n\t\t, can_use_save_link = !view.externalHost && \"download\" in save_link                                 // 35  // 43\n\t\t, click = function(node) {                                                                          // 36  // 44\n\t\t\tvar event = doc.createEvent(\"MouseEvents\");                                                        // 37  // 45\n\t\t\tevent.initMouseEvent(                                                                              // 38  // 46\n\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0                                                         // 39  // 47\n\t\t\t\t, false, false, false, false, 0, null                                                             // 40  // 48\n\t\t\t);                                                                                                 // 41  // 49\n\t\t\tnode.dispatchEvent(event);                                                                         // 42  // 50\n\t\t}                                                                                                   // 43  // 51\n\t\t, webkit_req_fs = view.webkitRequestFileSystem                                                      // 44  // 52\n\t\t, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem                     // 45  // 53\n\t\t, throw_outside = function(ex) {                                                                    // 46  // 54\n\t\t\t(view.setImmediate || view.setTimeout)(function() {                                                // 47  // 55\n\t\t\t\tthrow ex;                                                                                         // 48  // 56\n\t\t\t}, 0);                                                                                             // 49  // 57\n\t\t}                                                                                                   // 50  // 58\n\t\t, force_saveable_type = \"application/octet-stream\"                                                  // 51  // 59\n\t\t, fs_min_size = 0                                                                                   // 52  // 60\n\t\t, deletion_queue = []                                                                               // 53  // 61\n\t\t, process_deletion_queue = function() {                                                             // 54  // 62\n\t\t\tvar i = deletion_queue.length;                                                                     // 55  // 63\n\t\t\twhile (i--) {                                                                                      // 56  // 64\n\t\t\t\tvar file = deletion_queue[i];                                                                     // 57  // 65\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL                                          // 58  // 66\n\t\t\t\t\tURL.revokeObjectURL(file);                                                                       // 59  // 67\n\t\t\t\t} else { // file is a File                                                                        // 60  // 68\n\t\t\t\t\tfile.remove();                                                                                   // 61  // 69\n\t\t\t\t}                                                                                                 // 62  // 70\n\t\t\t}                                                                                                  // 63  // 71\n\t\t\tdeletion_queue.length = 0; // clear queue                                                          // 64  // 72\n\t\t}                                                                                                   // 65  // 73\n\t\t, dispatch = function(filesaver, event_types, event) {                                              // 66  // 74\n\t\t\tevent_types = [].concat(event_types);                                                              // 67  // 75\n\t\t\tvar i = event_types.length;                                                                        // 68  // 76\n\t\t\twhile (i--) {                                                                                      // 69  // 77\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];                                                  // 70  // 78\n\t\t\t\tif (typeof listener === \"function\") {                                                             // 71  // 79\n\t\t\t\t\ttry {                                                                                            // 72  // 80\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);                                                   // 73  // 81\n\t\t\t\t\t} catch (ex) {                                                                                   // 74  // 82\n\t\t\t\t\t\tthrow_outside(ex);                                                                              // 75  // 83\n\t\t\t\t\t}                                                                                                // 76  // 84\n\t\t\t\t}                                                                                                 // 77  // 85\n\t\t\t}                                                                                                  // 78  // 86\n\t\t}                                                                                                   // 79  // 87\n\t\t, FileSaver = function(blob, name) {                                                                // 80  // 88\n\t\t\t// First try a.download, then web filesystem, then object URLs                                     // 81  // 89\n\t\t\tvar                                                                                                // 82  // 90\n\t\t\t\t  filesaver = this                                                                                // 83  // 91\n\t\t\t\t, type = blob.type                                                                                // 84  // 92\n\t\t\t\t, blob_changed = false                                                                            // 85  // 93\n\t\t\t\t, object_url                                                                                      // 86  // 94\n\t\t\t\t, target_view                                                                                     // 87  // 95\n\t\t\t\t, get_object_url = function() {                                                                   // 88  // 96\n\t\t\t\t\tvar object_url = get_URL().createObjectURL(blob);                                                // 89  // 97\n\t\t\t\t\tdeletion_queue.push(object_url);                                                                 // 90  // 98\n\t\t\t\t\treturn object_url;                                                                               // 91  // 99\n\t\t\t\t}                                                                                                 // 92  // 100\n\t\t\t\t, dispatch_all = function() {                                                                     // 93  // 101\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));                            // 94  // 102\n\t\t\t\t}                                                                                                 // 95  // 103\n\t\t\t\t// on any filesys errors revert to saving with object URLs                                        // 96  // 104\n\t\t\t\t, fs_error = function() {                                                                         // 97  // 105\n\t\t\t\t\t// don't create more object URLs than needed                                                     // 98  // 106\n\t\t\t\t\tif (blob_changed || !object_url) {                                                               // 99  // 107\n\t\t\t\t\t\tobject_url = get_object_url(blob);                                                              // 100\n\t\t\t\t\t}                                                                                                // 101\n\t\t\t\t\tif (target_view) {                                                                               // 102\n\t\t\t\t\t\ttarget_view.location.href = object_url;                                                         // 103\n\t\t\t\t\t} else {                                                                                         // 104\n\t\t\t\t\t\twindow.open(object_url, \"_blank\");                                                              // 105\n\t\t\t\t\t}                                                                                                // 106\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                           // 107\n\t\t\t\t\tdispatch_all();                                                                                  // 108\n\t\t\t\t}                                                                                                 // 109\n\t\t\t\t, abortable = function(func) {                                                                    // 110\n\t\t\t\t\treturn function() {                                                                              // 111\n\t\t\t\t\t\tif (filesaver.readyState !== filesaver.DONE) {                                                  // 112\n\t\t\t\t\t\t\treturn func.apply(this, arguments);                                                            // 113\n\t\t\t\t\t\t}                                                                                               // 114\n\t\t\t\t\t};                                                                                               // 115\n\t\t\t\t}                                                                                                 // 116\n\t\t\t\t, create_if_not_found = {create: true, exclusive: false}                                          // 117\n\t\t\t\t, slice                                                                                           // 118\n\t\t\t;                                                                                                  // 119\n\t\t\tfilesaver.readyState = filesaver.INIT;                                                             // 120\n\t\t\tif (!name) {                                                                                       // 121\n\t\t\t\tname = \"download\";                                                                                // 122\n\t\t\t}                                                                                                  // 123\n\t\t\tif (can_use_save_link) {                                                                           // 124\n\t\t\t\tobject_url = get_object_url(blob);                                                                // 125\n\t\t\t\t// FF for Android has a nasty garbage collection mechanism                                        // 126\n\t\t\t\t// that turns all objects that are not pure javascript into 'deadObject'                          // 127\n\t\t\t\t// this means `doc` and `save_link` are unusable and need to be recreated                         // 128\n\t\t\t\t// `view` is usable though:                                                                       // 129\n\t\t\t\tdoc = view.document;                                                                              // 130\n\t\t\t\tsave_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\");                             // 131\n\t\t\t\tsave_link.href = object_url;                                                                      // 132\n\t\t\t\tsave_link.download = name;                                                                        // 133\n\t\t\t\tvar event = doc.createEvent(\"MouseEvents\");                                                       // 134\n\t\t\t\tevent.initMouseEvent(                                                                             // 135\n\t\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0                                                        // 136\n\t\t\t\t\t, false, false, false, false, 0, null                                                            // 137\n\t\t\t\t);                                                                                                // 138\n\t\t\t\tsave_link.dispatchEvent(event);                                                                   // 139\n\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                            // 140\n\t\t\t\tdispatch_all();                                                                                   // 141\n\t\t\t\treturn;                                                                                           // 142\n\t\t\t}                                                                                                  // 143\n\t\t\t// Object and web filesystem URLs have a problem saving in Google Chrome when                      // 144\n\t\t\t// viewed in a tab, so I force save with application/octet-stream                                  // 145\n\t\t\t// http://code.google.com/p/chromium/issues/detail?id=91158                                        // 146\n\t\t\tif (view.chrome && type && type !== force_saveable_type) {                                         // 147\n\t\t\t\tslice = blob.slice || blob.webkitSlice;                                                           // 148\n\t\t\t\tblob = slice.call(blob, 0, blob.size, force_saveable_type);                                       // 149\n\t\t\t\tblob_changed = true;                                                                              // 150\n\t\t\t}                                                                                                  // 151\n\t\t\t// Since I can't be sure that the guessed media type will trigger a download                       // 152\n\t\t\t// in WebKit, I append .download to the filename.                                                  // 153\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=65440                                                   // 154\n\t\t\tif (webkit_req_fs && name !== \"download\") {                                                        // 155\n\t\t\t\tname += \".download\";                                                                              // 156\n\t\t\t}                                                                                                  // 157\n\t\t\tif (type === force_saveable_type || webkit_req_fs) {                                               // 158\n\t\t\t\ttarget_view = view;                                                                               // 159\n\t\t\t}                                                                                                  // 160\n\t\t\tif (!req_fs) {                                                                                     // 161\n\t\t\t\tfs_error();                                                                                       // 162\n\t\t\t\treturn;                                                                                           // 163\n\t\t\t}                                                                                                  // 164\n\t\t\tfs_min_size += blob.size;                                                                          // 165\n\t\t\treq_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {                                       // 166\n\t\t\t\tfs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {                      // 167\n\t\t\t\t\tvar save = function() {                                                                          // 168\n\t\t\t\t\t\tdir.getFile(name, create_if_not_found, abortable(function(file) {                               // 169\n\t\t\t\t\t\t\tfile.createWriter(abortable(function(writer) {                                                 // 170\n\t\t\t\t\t\t\t\twriter.onwriteend = function(event) {                                                         // 171\n\t\t\t\t\t\t\t\t\ttarget_view.location.href = file.toURL();                                                    // 172\n\t\t\t\t\t\t\t\t\tdeletion_queue.push(file);                                                                   // 173\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                       // 174\n\t\t\t\t\t\t\t\t\tdispatch(filesaver, \"writeend\", event);                                                      // 175\n\t\t\t\t\t\t\t\t};                                                                                            // 176\n\t\t\t\t\t\t\t\twriter.onerror = function() {                                                                 // 177\n\t\t\t\t\t\t\t\t\tvar error = writer.error;                                                                    // 178\n\t\t\t\t\t\t\t\t\tif (error.code !== error.ABORT_ERR) {                                                        // 179\n\t\t\t\t\t\t\t\t\t\tfs_error();                                                                                 // 180\n\t\t\t\t\t\t\t\t\t}                                                                                            // 181\n\t\t\t\t\t\t\t\t};                                                                                            // 182\n\t\t\t\t\t\t\t\t\"writestart progress write abort\".split(\" \").forEach(function(event) {                        // 183\n\t\t\t\t\t\t\t\t\twriter[\"on\" + event] = filesaver[\"on\" + event];                                              // 184\n\t\t\t\t\t\t\t\t});                                                                                           // 185\n\t\t\t\t\t\t\t\twriter.write(blob);                                                                           // 186\n\t\t\t\t\t\t\t\tfilesaver.abort = function() {                                                                // 187\n\t\t\t\t\t\t\t\t\twriter.abort();                                                                              // 188\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                       // 189\n\t\t\t\t\t\t\t\t};                                                                                            // 190\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.WRITING;                                                     // 191\n\t\t\t\t\t\t\t}), fs_error);                                                                                 // 192\n\t\t\t\t\t\t}), fs_error);                                                                                  // 193\n\t\t\t\t\t};                                                                                               // 194\n\t\t\t\t\tdir.getFile(name, {create: false}, abortable(function(file) {                                    // 195\n\t\t\t\t\t\t// delete file if it already exists                                                             // 196\n\t\t\t\t\t\tfile.remove();                                                                                  // 197\n\t\t\t\t\t\tsave();                                                                                         // 198\n\t\t\t\t\t}), abortable(function(ex) {                                                                     // 199\n\t\t\t\t\t\tif (ex.code === ex.NOT_FOUND_ERR) {                                                             // 200\n\t\t\t\t\t\t\tsave();                                                                                        // 201\n\t\t\t\t\t\t} else {                                                                                        // 202\n\t\t\t\t\t\t\tfs_error();                                                                                    // 203\n\t\t\t\t\t\t}                                                                                               // 204\n\t\t\t\t\t}));                                                                                             // 205\n\t\t\t\t}), fs_error);                                                                                    // 206\n\t\t\t}), fs_error);                                                                                     // 207\n\t\t}                                                                                                   // 208\n\t\t, FS_proto = FileSaver.prototype                                                                    // 209\n\t\t, saveAs = function(blob, name) {                                                                   // 210\n\t\t\treturn new FileSaver(blob, name);                                                                  // 211\n\t\t}                                                                                                   // 212\n\t;                                                                                                    // 213\n\tFS_proto.abort = function() {                                                                        // 214\n\t\tvar filesaver = this;                                                                               // 215\n\t\tfilesaver.readyState = filesaver.DONE;                                                              // 216\n\t\tdispatch(filesaver, \"abort\");                                                                       // 217\n\t};                                                                                                   // 218\n\tFS_proto.readyState = FS_proto.INIT = 0;                                                             // 219\n\tFS_proto.WRITING = 1;                                                                                // 220\n\tFS_proto.DONE = 2;                                                                                   // 221\n                                                                                                      // 222\n\tFS_proto.error =                                                                                     // 223\n\tFS_proto.onwritestart =                                                                              // 224\n\tFS_proto.onprogress =                                                                                // 225\n\tFS_proto.onwrite =                                                                                   // 226\n\tFS_proto.onabort =                                                                                   // 227\n\tFS_proto.onerror =                                                                                   // 228\n\tFS_proto.onwriteend =                                                                                // 229\n\t\tnull;                                                                                               // 230\n                                                                                                      // 231\n\tview.addEventListener(\"unload\", process_deletion_queue, false);                                      // 232\n\tsaveAs.unload = function() {                                                                         // 233\n\t\tprocess_deletion_queue();                                                                           // 234\n\t\tview.removeEventListener(\"unload\", process_deletion_queue, false);                                  // 235\n\t};                                                                                                   // 236\n\treturn saveAs;                                                                                       // 237\n}(                                                                                                    // 238\n\t   typeof self !== \"undefined\" && self                                                               // 239\n\t|| typeof window !== \"undefined\" && window                                                           // 240\n\t|| this.content                                                                                      // 241\n));                                                                                                   // 242\n// `self` is undefined in Firefox for Android content script context                                  // 243\n// while `this` is nsIContentFrameMessageManager                                                      // 244\n// with an attribute `content` that corresponds to the window                                         // 245\n                                                                                                      // 246\nif (typeof module !== \"undefined\" && module !== null) {                                               // 247\n  module.exports = saveAs;                                                                            // 248\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd != null)) {              // 249\n  define([], function() {                                                                             // 250\n    return saveAs;                                                                                    // 251\n  });                                                                                                 // 252\n}                                                                                                     // 253\n                                                                                                      // 254\nwindow.saveAs = saveAs;                                                                               // 255\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 264\n                                                                                                             // 265\n}).call(this);                                                                                               // 266\n                                                                                                             // 267\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mrt:filesaver'] = {};\n\n})();\n","servePath":"/packages/mrt_filesaver.js"}]