[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar wantedIndent, TextAlignMap;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/chipcastledotcom_jspdf/packages/chipcastledotcom_jspdf.j //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/chipcastledotcom:jspdf/jsPDF/dist/jspdf.debug.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/** @preserve                                                                                                          // 1\n * jsPDF - PDF Document creation from JavaScript                                                                       // 2\n * Version 1.0.272-git Built on 2014-09-29T15:09                                                                       // 3\n *                           CommitID d4770725ca                                                                       // 4\n *                                                                                                                     // 5\n * Copyright (c) 2010-2014 James Hall, https://github.com/MrRio/jsPDF                                                  // 6\n *               2010 Aaron Spike, https://github.com/acspike                                                          // 7\n *               2012 Willow Systems Corporation, willow-systems.com                                                   // 8\n *               2012 Pablo Hess, https://github.com/pablohess                                                         // 9\n *               2012 Florian Jenett, https://github.com/fjenett                                                       // 10\n *               2013 Warren Weckesser, https://github.com/warrenweckesser                                             // 11\n *               2013 Youssef Beddad, https://github.com/lifof                                                         // 12\n *               2013 Lee Driscoll, https://github.com/lsdriscoll                                                      // 13\n *               2013 Stefan Slonevskiy, https://github.com/stefslon                                                   // 14\n *               2013 Jeremy Morel, https://github.com/jmorel                                                          // 15\n *               2013 Christoph Hartmann, https://github.com/chris-rock                                                // 16\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria                                              // 17\n *               2014 James Makes, https://github.com/dollaruw                                                         // 18\n *               2014 Diego Casorran, https://github.com/diegocr                                                       // 19\n *                                                                                                                     // 20\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 21\n * a copy of this software and associated documentation files (the                                                     // 22\n * \"Software\"), to deal in the Software without restriction, including                                                 // 23\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 24\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 25\n * permit persons to whom the Software is furnished to do so, subject to                                               // 26\n * the following conditions:                                                                                           // 27\n *                                                                                                                     // 28\n * The above copyright notice and this permission notice shall be                                                      // 29\n * included in all copies or substantial portions of the Software.                                                     // 30\n *                                                                                                                     // 31\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 32\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 33\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 34\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 35\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 36\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 37\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 38\n *                                                                                                                     // 39\n * Contributor(s):                                                                                                     // 40\n *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,                                                       // 41\n *    kim3er, mfo, alnorth,                                                                                            // 42\n */                                                                                                                    // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Creates new jsPDF document object instance.                                                                         // 46\n *                                                                                                                     // 47\n * @class                                                                                                              // 48\n * @param orientation One of \"portrait\" or \"landscape\" (or shortcuts \"p\" (Default), \"l\")                               // 49\n * @param unit        Measurement unit to be used when coordinates are specified.                                      // 50\n *                    One of \"pt\" (points), \"mm\" (Default), \"cm\", \"in\"                                                 // 51\n * @param format      One of 'pageFormats' as shown below, default: a4                                                 // 52\n * @returns {jsPDF}                                                                                                    // 53\n * @name jsPDF                                                                                                         // 54\n */                                                                                                                    // 55\nvar jsPDF = (function(global) {                                                                                        // 56\n\t'use strict';                                                                                                         // 57\n\tvar pdfVersion = '1.3',                                                                                               // 58\n\t\tpageFormats = { // Size in pt of various paper formats                                                               // 59\n\t\t\t'a0'  : [2383.94, 3370.39], 'a1'  : [1683.78, 2383.94],                                                             // 60\n\t\t\t'a2'  : [1190.55, 1683.78], 'a3'  : [ 841.89, 1190.55],                                                             // 61\n\t\t\t'a4'  : [ 595.28,  841.89], 'a5'  : [ 419.53,  595.28],                                                             // 62\n\t\t\t'a6'  : [ 297.64,  419.53], 'a7'  : [ 209.76,  297.64],                                                             // 63\n\t\t\t'a8'  : [ 147.40,  209.76], 'a9'  : [ 104.88,  147.40],                                                             // 64\n\t\t\t'a10' : [  73.70,  104.88], 'b0'  : [2834.65, 4008.19],                                                             // 65\n\t\t\t'b1'  : [2004.09, 2834.65], 'b2'  : [1417.32, 2004.09],                                                             // 66\n\t\t\t'b3'  : [1000.63, 1417.32], 'b4'  : [ 708.66, 1000.63],                                                             // 67\n\t\t\t'b5'  : [ 498.90,  708.66], 'b6'  : [ 354.33,  498.90],                                                             // 68\n\t\t\t'b7'  : [ 249.45,  354.33], 'b8'  : [ 175.75,  249.45],                                                             // 69\n\t\t\t'b9'  : [ 124.72,  175.75], 'b10' : [  87.87,  124.72],                                                             // 70\n\t\t\t'c0'  : [2599.37, 3676.54], 'c1'  : [1836.85, 2599.37],                                                             // 71\n\t\t\t'c2'  : [1298.27, 1836.85], 'c3'  : [ 918.43, 1298.27],                                                             // 72\n\t\t\t'c4'  : [ 649.13,  918.43], 'c5'  : [ 459.21,  649.13],                                                             // 73\n\t\t\t'c6'  : [ 323.15,  459.21], 'c7'  : [ 229.61,  323.15],                                                             // 74\n\t\t\t'c8'  : [ 161.57,  229.61], 'c9'  : [ 113.39,  161.57],                                                             // 75\n\t\t\t'c10' : [  79.37,  113.39], 'dl'  : [ 311.81,  623.62],                                                             // 76\n\t\t\t'letter'            : [612,   792],                                                                                 // 77\n\t\t\t'government-letter' : [576,   756],                                                                                 // 78\n\t\t\t'legal'             : [612,  1008],                                                                                 // 79\n\t\t\t'junior-legal'      : [576,   360],                                                                                 // 80\n\t\t\t'ledger'            : [1224,  792],                                                                                 // 81\n\t\t\t'tabloid'           : [792,  1224],                                                                                 // 82\n\t\t\t'credit-card'       : [153,   243]                                                                                  // 83\n\t\t};                                                                                                                   // 84\n                                                                                                                       // 85\n\t/**                                                                                                                   // 86\n\t * jsPDF's Internal PubSub Implementation.                                                                            // 87\n\t * See mrrio.github.io/jsPDF/doc/symbols/PubSub.html                                                                  // 88\n\t * Backward compatible rewritten on 2014 by                                                                           // 89\n\t * Diego Casorran, https://github.com/diegocr                                                                         // 90\n\t *                                                                                                                    // 91\n\t * @class                                                                                                             // 92\n\t * @name PubSub                                                                                                       // 93\n\t */                                                                                                                   // 94\n\tfunction PubSub(context) {                                                                                            // 95\n\t\tvar topics = {};                                                                                                     // 96\n                                                                                                                       // 97\n\t\tthis.subscribe = function(topic, callback, once) {                                                                   // 98\n\t\t\tif(typeof callback !== 'function') {                                                                                // 99\n\t\t\t\treturn false;                                                                                                      // 100\n\t\t\t}                                                                                                                   // 101\n                                                                                                                       // 102\n\t\t\tif(!topics.hasOwnProperty(topic)) {                                                                                 // 103\n\t\t\t\ttopics[topic] = {};                                                                                                // 104\n\t\t\t}                                                                                                                   // 105\n                                                                                                                       // 106\n\t\t\tvar id = Math.random().toString(35);                                                                                // 107\n\t\t\ttopics[topic][id] = [callback,!!once];                                                                              // 108\n                                                                                                                       // 109\n\t\t\treturn id;                                                                                                          // 110\n\t\t};                                                                                                                   // 111\n                                                                                                                       // 112\n\t\tthis.unsubscribe = function(token) {                                                                                 // 113\n\t\t\tfor(var topic in topics) {                                                                                          // 114\n\t\t\t\tif(topics[topic][token]) {                                                                                         // 115\n\t\t\t\t\tdelete topics[topic][token];                                                                                      // 116\n\t\t\t\t\treturn true;                                                                                                      // 117\n\t\t\t\t}                                                                                                                  // 118\n\t\t\t}                                                                                                                   // 119\n\t\t\treturn false;                                                                                                       // 120\n\t\t};                                                                                                                   // 121\n                                                                                                                       // 122\n\t\tthis.publish = function(topic) {                                                                                     // 123\n\t\t\tif(topics.hasOwnProperty(topic)) {                                                                                  // 124\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1), idr = [];                                                     // 125\n                                                                                                                       // 126\n\t\t\t\tfor(var id in topics[topic]) {                                                                                     // 127\n\t\t\t\t\tvar sub = topics[topic][id];                                                                                      // 128\n\t\t\t\t\ttry {                                                                                                             // 129\n\t\t\t\t\t\tsub[0].apply(context, args);                                                                                     // 130\n\t\t\t\t\t} catch(ex) {                                                                                                     // 131\n\t\t\t\t\t\tif(global.console) {                                                                                             // 132\n\t\t\t\t\t\t\tconsole.error('jsPDF PubSub Error', ex.message, ex);                                                            // 133\n\t\t\t\t\t\t}                                                                                                                // 134\n\t\t\t\t\t}                                                                                                                 // 135\n\t\t\t\t\tif(sub[1]) idr.push(id);                                                                                          // 136\n\t\t\t\t}                                                                                                                  // 137\n\t\t\t\tif(idr.length) idr.forEach(this.unsubscribe);                                                                      // 138\n\t\t\t}                                                                                                                   // 139\n\t\t};                                                                                                                   // 140\n\t}                                                                                                                     // 141\n                                                                                                                       // 142\n\t/**                                                                                                                   // 143\n\t * @constructor                                                                                                       // 144\n\t * @private                                                                                                           // 145\n\t */                                                                                                                   // 146\n\tfunction jsPDF(orientation, unit, format, compressPdf) {                                                              // 147\n\t\tvar options = {};                                                                                                    // 148\n                                                                                                                       // 149\n\t\tif (typeof orientation === 'object') {                                                                               // 150\n\t\t\toptions = orientation;                                                                                              // 151\n                                                                                                                       // 152\n\t\t\torientation = options.orientation;                                                                                  // 153\n\t\t\tunit = options.unit || unit;                                                                                        // 154\n\t\t\tformat = options.format || format;                                                                                  // 155\n\t\t\tcompressPdf = options.compress || options.compressPdf || compressPdf;                                               // 156\n\t\t}                                                                                                                    // 157\n                                                                                                                       // 158\n\t\t// Default options                                                                                                   // 159\n\t\tunit        = unit || 'mm';                                                                                          // 160\n\t\tformat      = format || 'a4';                                                                                        // 161\n\t\torientation = ('' + (orientation || 'P')).toLowerCase();                                                             // 162\n                                                                                                                       // 163\n\t\tvar format_as_string = ('' + format).toLowerCase(),                                                                  // 164\n\t\t\tcompress = !!compressPdf && typeof Uint8Array === 'function',                                                       // 165\n\t\t\ttextColor            = options.textColor  || '0 g',                                                                 // 166\n\t\t\tdrawColor            = options.drawColor  || '0 G',                                                                 // 167\n\t\t\tactiveFontSize       = options.fontSize   || 16,                                                                    // 168\n\t\t\tlineHeightProportion = options.lineHeight || 1.15,                                                                  // 169\n\t\t\tlineWidth            = options.lineWidth  || 0.200025, // 2mm                                                       // 170\n\t\t\tobjectNumber =  2,  // 'n' Current object number                                                                    // 171\n\t\t\toutToPages   = !1,  // switches where out() prints. outToPages true = push to pages obj. outToPages false = doc builder content\n\t\t\toffsets      = [],  // List of offsets. Activated and reset by buildDocument(). Pupulated by various calls buildDocument makes.\n\t\t\tfonts        = {},  // collection of font objects, where key is fontKey - a dynamically created label for a given font.\n\t\t\tfontmap      = {},  // mapping structure fontName > fontStyle > font key - performance layer. See addFont()         // 175\n\t\t\tactiveFontKey,      // will be string representing the KEY of the font as combination of fontName + fontStyle       // 176\n\t\t\tk,                  // Scale factor                                                                                 // 177\n\t\t\ttmp,                                                                                                                // 178\n\t\t\tpage = 0,                                                                                                           // 179\n\t\t\tcurrentPage,                                                                                                        // 180\n\t\t\tpages = [],                                                                                                         // 181\n\t\t\tpagedim = {},                                                                                                       // 182\n\t\t\tcontent = [],                                                                                                       // 183\n\t\t\tlineCapID = 0,                                                                                                      // 184\n\t\t\tlineJoinID = 0,                                                                                                     // 185\n\t\t\tcontent_length = 0,                                                                                                 // 186\n\t\t\tpageWidth,                                                                                                          // 187\n\t\t\tpageHeight,                                                                                                         // 188\n\t\t\tpageMode,                                                                                                           // 189\n\t\t\tzoomMode,                                                                                                           // 190\n\t\t\tlayoutMode,                                                                                                         // 191\n\t\t\tdocumentProperties = {                                                                                              // 192\n\t\t\t\t'title'    : '',                                                                                                   // 193\n\t\t\t\t'subject'  : '',                                                                                                   // 194\n\t\t\t\t'author'   : '',                                                                                                   // 195\n\t\t\t\t'keywords' : '',                                                                                                   // 196\n\t\t\t\t'creator'  : ''                                                                                                    // 197\n\t\t\t},                                                                                                                  // 198\n\t\t\tAPI = {},                                                                                                           // 199\n\t\t\tevents = new PubSub(API),                                                                                           // 200\n                                                                                                                       // 201\n\t\t/////////////////////                                                                                                // 202\n\t\t// Private functions                                                                                                 // 203\n\t\t/////////////////////                                                                                                // 204\n\t\tf2 = function(number) {                                                                                              // 205\n\t\t\treturn number.toFixed(2); // Ie, %.2f                                                                               // 206\n\t\t},                                                                                                                   // 207\n\t\tf3 = function(number) {                                                                                              // 208\n\t\t\treturn number.toFixed(3); // Ie, %.3f                                                                               // 209\n\t\t},                                                                                                                   // 210\n\t\tpadd2 = function(number) {                                                                                           // 211\n\t\t\treturn ('0' + parseInt(number)).slice(-2);                                                                          // 212\n\t\t},                                                                                                                   // 213\n\t\tout = function(string) {                                                                                             // 214\n\t\t\tif (outToPages) {                                                                                                   // 215\n\t\t\t\t/* set by beginPage */                                                                                             // 216\n\t\t\t\tpages[currentPage].push(string);                                                                                   // 217\n\t\t\t} else {                                                                                                            // 218\n\t\t\t\t// +1 for '\\n' that will be used to join 'content'                                                                 // 219\n\t\t\t\tcontent_length += string.length + 1;                                                                               // 220\n\t\t\t\tcontent.push(string);                                                                                              // 221\n\t\t\t}                                                                                                                   // 222\n\t\t},                                                                                                                   // 223\n\t\tnewObject = function() {                                                                                             // 224\n\t\t\t// Begin a new object                                                                                               // 225\n\t\t\tobjectNumber++;                                                                                                     // 226\n\t\t\toffsets[objectNumber] = content_length;                                                                             // 227\n\t\t\tout(objectNumber + ' 0 obj');                                                                                       // 228\n\t\t\treturn objectNumber;                                                                                                // 229\n\t\t},                                                                                                                   // 230\n\t\tputStream = function(str) {                                                                                          // 231\n\t\t\tout('stream');                                                                                                      // 232\n\t\t\tout(str);                                                                                                           // 233\n\t\t\tout('endstream');                                                                                                   // 234\n\t\t},                                                                                                                   // 235\n\t\tputPages = function() {                                                                                              // 236\n\t\t\tvar n,p,arr,i,deflater,adler32,adler32cs,wPt,hPt;                                                                   // 237\n                                                                                                                       // 238\n\t\t\tadler32cs = global.adler32cs || jsPDF.adler32cs;                                                                    // 239\n\t\t\tif (compress && typeof adler32cs === 'undefined') {                                                                 // 240\n\t\t\t\tcompress = false;                                                                                                  // 241\n\t\t\t}                                                                                                                   // 242\n                                                                                                                       // 243\n\t\t\t// outToPages = false as set in endDocument(). out() writes to content.                                             // 244\n                                                                                                                       // 245\n\t\t\tfor (n = 1; n <= page; n++) {                                                                                       // 246\n\t\t\t\tnewObject();                                                                                                       // 247\n\t\t\t\twPt = (pageWidth = pagedim[n].width) * k;                                                                          // 248\n\t\t\t\thPt = (pageHeight = pagedim[n].height) * k;                                                                        // 249\n\t\t\t\tout('<</Type /Page');                                                                                              // 250\n\t\t\t\tout('/Parent 1 0 R');                                                                                              // 251\n\t\t\t\tout('/Resources 2 0 R');                                                                                           // 252\n\t\t\t\tout('/MediaBox [0 0 ' + f2(wPt) + ' ' + f2(hPt) + ']');                                                            // 253\n\t\t\t\tout('/Contents ' + (objectNumber + 1) + ' 0 R>>');                                                                 // 254\n\t\t\t\tout('endobj');                                                                                                     // 255\n                                                                                                                       // 256\n\t\t\t\t// Page content                                                                                                    // 257\n\t\t\t\tp = pages[n].join('\\n');                                                                                           // 258\n\t\t\t\tnewObject();                                                                                                       // 259\n\t\t\t\tif (compress) {                                                                                                    // 260\n\t\t\t\t\tarr = [];                                                                                                         // 261\n\t\t\t\t\ti = p.length;                                                                                                     // 262\n\t\t\t\t\twhile(i--) {                                                                                                      // 263\n\t\t\t\t\t\tarr[i] = p.charCodeAt(i);                                                                                        // 264\n\t\t\t\t\t}                                                                                                                 // 265\n\t\t\t\t\tadler32 = adler32cs.from(p);                                                                                      // 266\n\t\t\t\t\tdeflater = new Deflater(6);                                                                                       // 267\n\t\t\t\t\tdeflater.append(new Uint8Array(arr));                                                                             // 268\n\t\t\t\t\tp = deflater.flush();                                                                                             // 269\n\t\t\t\t\tarr = new Uint8Array(p.length + 6);                                                                               // 270\n\t\t\t\t\tarr.set(new Uint8Array([120, 156])),                                                                              // 271\n\t\t\t\t\tarr.set(p, 2);                                                                                                    // 272\n\t\t\t\t\tarr.set(new Uint8Array([adler32 & 0xFF, (adler32 >> 8) & 0xFF, (adler32 >> 16) & 0xFF, (adler32 >> 24) & 0xFF]), p.length+2);\n\t\t\t\t\tp = String.fromCharCode.apply(null, arr);                                                                         // 274\n\t\t\t\t\tout('<</Length ' + p.length + ' /Filter [/FlateDecode]>>');                                                       // 275\n\t\t\t\t} else {                                                                                                           // 276\n\t\t\t\t\tout('<</Length ' + p.length + '>>');                                                                              // 277\n\t\t\t\t}                                                                                                                  // 278\n\t\t\t\tputStream(p);                                                                                                      // 279\n\t\t\t\tout('endobj');                                                                                                     // 280\n\t\t\t}                                                                                                                   // 281\n\t\t\toffsets[1] = content_length;                                                                                        // 282\n\t\t\tout('1 0 obj');                                                                                                     // 283\n\t\t\tout('<</Type /Pages');                                                                                              // 284\n\t\t\tvar kids = '/Kids [';                                                                                               // 285\n\t\t\tfor (i = 0; i < page; i++) {                                                                                        // 286\n\t\t\t\tkids += (3 + 2 * i) + ' 0 R ';                                                                                     // 287\n\t\t\t}                                                                                                                   // 288\n\t\t\tout(kids + ']');                                                                                                    // 289\n\t\t\tout('/Count ' + page);                                                                                              // 290\n\t\t\tout('>>');                                                                                                          // 291\n\t\t\tout('endobj');                                                                                                      // 292\n\t\t},                                                                                                                   // 293\n\t\tputFont = function(font) {                                                                                           // 294\n\t\t\tfont.objectNumber = newObject();                                                                                    // 295\n\t\t\tout('<</BaseFont/' + font.PostScriptName + '/Type/Font');                                                           // 296\n\t\t\tif (typeof font.encoding === 'string') {                                                                            // 297\n\t\t\t\tout('/Encoding/' + font.encoding);                                                                                 // 298\n\t\t\t}                                                                                                                   // 299\n\t\t\tout('/Subtype/Type1>>');                                                                                            // 300\n\t\t\tout('endobj');                                                                                                      // 301\n\t\t},                                                                                                                   // 302\n\t\tputFonts = function() {                                                                                              // 303\n\t\t\tfor (var fontKey in fonts) {                                                                                        // 304\n\t\t\t\tif (fonts.hasOwnProperty(fontKey)) {                                                                               // 305\n\t\t\t\t\tputFont(fonts[fontKey]);                                                                                          // 306\n\t\t\t\t}                                                                                                                  // 307\n\t\t\t}                                                                                                                   // 308\n\t\t},                                                                                                                   // 309\n\t\tputXobjectDict = function() {                                                                                        // 310\n\t\t\t// Loop through images, or other data objects                                                                       // 311\n\t\t\tevents.publish('putXobjectDict');                                                                                   // 312\n\t\t},                                                                                                                   // 313\n\t\tputResourceDictionary = function() {                                                                                 // 314\n\t\t\tout('/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]');                                                               // 315\n\t\t\tout('/Font <<');                                                                                                    // 316\n                                                                                                                       // 317\n\t\t\t// Do this for each font, the '1' bit is the index of the font                                                      // 318\n\t\t\tfor (var fontKey in fonts) {                                                                                        // 319\n\t\t\t\tif (fonts.hasOwnProperty(fontKey)) {                                                                               // 320\n\t\t\t\t\tout('/' + fontKey + ' ' + fonts[fontKey].objectNumber + ' 0 R');                                                  // 321\n\t\t\t\t}                                                                                                                  // 322\n\t\t\t}                                                                                                                   // 323\n\t\t\tout('>>');                                                                                                          // 324\n\t\t\tout('/XObject <<');                                                                                                 // 325\n\t\t\tputXobjectDict();                                                                                                   // 326\n\t\t\tout('>>');                                                                                                          // 327\n\t\t},                                                                                                                   // 328\n\t\tputResources = function() {                                                                                          // 329\n\t\t\tputFonts();                                                                                                         // 330\n\t\t\tevents.publish('putResources');                                                                                     // 331\n\t\t\t// Resource dictionary                                                                                              // 332\n\t\t\toffsets[2] = content_length;                                                                                        // 333\n\t\t\tout('2 0 obj');                                                                                                     // 334\n\t\t\tout('<<');                                                                                                          // 335\n\t\t\tputResourceDictionary();                                                                                            // 336\n\t\t\tout('>>');                                                                                                          // 337\n\t\t\tout('endobj');                                                                                                      // 338\n\t\t\tevents.publish('postPutResources');                                                                                 // 339\n\t\t},                                                                                                                   // 340\n\t\taddToFontDictionary = function(fontKey, fontName, fontStyle) {                                                       // 341\n\t\t\t// this is mapping structure for quick font key lookup.                                                             // 342\n\t\t\t// returns the KEY of the font (ex: \"F1\") for a given                                                               // 343\n\t\t\t// pair of font name and type (ex: \"Arial\". \"Italic\")                                                               // 344\n\t\t\tif (!fontmap.hasOwnProperty(fontName)) {                                                                            // 345\n\t\t\t\tfontmap[fontName] = {};                                                                                            // 346\n\t\t\t}                                                                                                                   // 347\n\t\t\tfontmap[fontName][fontStyle] = fontKey;                                                                             // 348\n\t\t},                                                                                                                   // 349\n\t\t/**                                                                                                                  // 350\n\t\t * FontObject describes a particular font as member of an instnace of jsPDF                                          // 351\n\t\t *                                                                                                                   // 352\n\t\t * It's a collection of properties like 'id' (to be used in PDF stream),                                             // 353\n\t\t * 'fontName' (font's family name), 'fontStyle' (font's style variant label)                                         // 354\n\t\t *                                                                                                                   // 355\n\t\t * @class                                                                                                            // 356\n\t\t * @public                                                                                                           // 357\n\t\t * @property id {String} PDF-document-instance-specific label assinged to the font.                                  // 358\n\t\t * @property PostScriptName {String} PDF specification full name for the font                                        // 359\n\t\t * @property encoding {Object} Encoding_name-to-Font_metrics_object mapping.                                         // 360\n\t\t * @name FontObject                                                                                                  // 361\n\t\t */                                                                                                                  // 362\n\t\taddFont = function(PostScriptName, fontName, fontStyle, encoding) {                                                  // 363\n\t\t\tvar fontKey = 'F' + (Object.keys(fonts).length + 1).toString(10),                                                   // 364\n\t\t\t// This is FontObject                                                                                               // 365\n\t\t\tfont = fonts[fontKey] = {                                                                                           // 366\n\t\t\t\t'id'             : fontKey,                                                                                        // 367\n\t\t\t\t'PostScriptName' : PostScriptName,                                                                                 // 368\n\t\t\t\t'fontName'       : fontName,                                                                                       // 369\n\t\t\t\t'fontStyle'      : fontStyle,                                                                                      // 370\n\t\t\t\t'encoding'       : encoding,                                                                                       // 371\n\t\t\t\t'metadata'       : {}                                                                                              // 372\n\t\t\t};                                                                                                                  // 373\n\t\t\taddToFontDictionary(fontKey, fontName, fontStyle);                                                                  // 374\n\t\t\tevents.publish('addFont', font);                                                                                    // 375\n                                                                                                                       // 376\n\t\t\treturn fontKey;                                                                                                     // 377\n\t\t},                                                                                                                   // 378\n\t\taddFonts = function() {                                                                                              // 379\n                                                                                                                       // 380\n\t\t\tvar HELVETICA     = \"helvetica\",                                                                                    // 381\n\t\t\t\tTIMES         = \"times\",                                                                                           // 382\n\t\t\t\tCOURIER       = \"courier\",                                                                                         // 383\n\t\t\t\tNORMAL        = \"normal\",                                                                                          // 384\n\t\t\t\tBOLD          = \"bold\",                                                                                            // 385\n\t\t\t\tITALIC        = \"italic\",                                                                                          // 386\n\t\t\t\tBOLD_ITALIC   = \"bolditalic\",                                                                                      // 387\n\t\t\t\tencoding      = 'StandardEncoding',                                                                                // 388\n\t\t\t\tstandardFonts = [                                                                                                  // 389\n\t\t\t\t\t['Helvetica', HELVETICA, NORMAL],                                                                                 // 390\n\t\t\t\t\t['Helvetica-Bold', HELVETICA, BOLD],                                                                              // 391\n\t\t\t\t\t['Helvetica-Oblique', HELVETICA, ITALIC],                                                                         // 392\n\t\t\t\t\t['Helvetica-BoldOblique', HELVETICA, BOLD_ITALIC],                                                                // 393\n\t\t\t\t\t['Courier', COURIER, NORMAL],                                                                                     // 394\n\t\t\t\t\t['Courier-Bold', COURIER, BOLD],                                                                                  // 395\n\t\t\t\t\t['Courier-Oblique', COURIER, ITALIC],                                                                             // 396\n\t\t\t\t\t['Courier-BoldOblique', COURIER, BOLD_ITALIC],                                                                    // 397\n\t\t\t\t\t['Times-Roman', TIMES, NORMAL],                                                                                   // 398\n\t\t\t\t\t['Times-Bold', TIMES, BOLD],                                                                                      // 399\n\t\t\t\t\t['Times-Italic', TIMES, ITALIC],                                                                                  // 400\n\t\t\t\t\t['Times-BoldItalic', TIMES, BOLD_ITALIC]                                                                          // 401\n\t\t\t\t];                                                                                                                 // 402\n                                                                                                                       // 403\n\t\t\tfor (var i = 0, l = standardFonts.length; i < l; i++) {                                                             // 404\n\t\t\t\tvar fontKey = addFont(                                                                                             // 405\n\t\t\t\t\t\tstandardFonts[i][0],                                                                                             // 406\n\t\t\t\t\t\tstandardFonts[i][1],                                                                                             // 407\n\t\t\t\t\t\tstandardFonts[i][2],                                                                                             // 408\n\t\t\t\t\t\tencoding);                                                                                                       // 409\n                                                                                                                       // 410\n\t\t\t\t// adding aliases for standard fonts, this time matching the capitalization                                        // 411\n\t\t\t\tvar parts = standardFonts[i][0].split('-');                                                                        // 412\n\t\t\t\taddToFontDictionary(fontKey, parts[0], parts[1] || '');                                                            // 413\n\t\t\t}                                                                                                                   // 414\n\t\t\tevents.publish('addFonts', { fonts : fonts, dictionary : fontmap });                                                // 415\n\t\t},                                                                                                                   // 416\n\t\tSAFE = function __safeCall(fn) {                                                                                     // 417\n\t\t\tfn.foo = function __safeCallWrapper() {                                                                             // 418\n\t\t\t\ttry {                                                                                                              // 419\n\t\t\t\t\treturn fn.apply(this, arguments);                                                                                 // 420\n\t\t\t\t} catch (e) {                                                                                                      // 421\n\t\t\t\t\tvar stack = e.stack || '';                                                                                        // 422\n\t\t\t\t\tif(~stack.indexOf(' at ')) stack = stack.split(\" at \")[1];                                                        // 423\n\t\t\t\t\tvar m = \"Error in function \" + stack.split(\"\\n\")[0].split('<')[0] + \": \" + e.message;                             // 424\n\t\t\t\t\tif(global.console) {                                                                                              // 425\n\t\t\t\t\t\tglobal.console.error(m, e);                                                                                      // 426\n\t\t\t\t\t\tif(global.alert) alert(m);                                                                                       // 427\n\t\t\t\t\t} else {                                                                                                          // 428\n\t\t\t\t\t\tthrow new Error(m);                                                                                              // 429\n\t\t\t\t\t}                                                                                                                 // 430\n\t\t\t\t}                                                                                                                  // 431\n\t\t\t};                                                                                                                  // 432\n\t\t\tfn.foo.bar = fn;                                                                                                    // 433\n\t\t\treturn fn.foo;                                                                                                      // 434\n\t\t},                                                                                                                   // 435\n\t\tto8bitStream = function(text, flags) {                                                                               // 436\n\t\t/**                                                                                                                  // 437\n\t\t * PDF 1.3 spec:                                                                                                     // 438\n\t\t * \"For text strings encoded in Unicode, the first two bytes must be 254 followed by                                 // 439\n\t\t * 255, representing the Unicode byte order marker, U+FEFF. (This sequence conflicts                                 // 440\n\t\t * with the PDFDocEncoding character sequence thorn ydieresis, which is unlikely                                     // 441\n\t\t * to be a meaningful beginning of a word or phrase.) The remainder of the                                           // 442\n\t\t * string consists of Unicode character codes, according to the UTF-16 encoding                                      // 443\n\t\t * specified in the Unicode standard, version 2.0. Commonly used Unicode values                                      // 444\n\t\t * are represented as 2 bytes per character, with the high-order byte appearing first                                // 445\n\t\t * in the string.\"                                                                                                   // 446\n\t\t *                                                                                                                   // 447\n\t\t * In other words, if there are chars in a string with char code above 255, we                                       // 448\n\t\t * recode the string to UCS2 BE - string doubles in length and BOM is prepended.                                     // 449\n\t\t *                                                                                                                   // 450\n\t\t * HOWEVER!                                                                                                          // 451\n\t\t * Actual *content* (body) text (as opposed to strings used in document properties etc)                              // 452\n\t\t * does NOT expect BOM. There, it is treated as a literal GID (Glyph ID)                                             // 453\n\t\t *                                                                                                                   // 454\n\t\t * Because of Adobe's focus on \"you subset your fonts!\" you are not supposed to have                                 // 455\n\t\t * a font that maps directly Unicode (UCS2 / UTF16BE) code to font GID, but you could                                // 456\n\t\t * fudge it with \"Identity-H\" encoding and custom CIDtoGID map that mimics Unicode                                   // 457\n\t\t * code page. There, however, all characters in the stream are treated as GIDs,                                      // 458\n\t\t * including BOM, which is the reason we need to skip BOM in content text (i.e. that                                 // 459\n\t\t * that is tied to a font).                                                                                          // 460\n\t\t *                                                                                                                   // 461\n\t\t * To signal this \"special\" PDFEscape / to8bitStream handling mode,                                                  // 462\n\t\t * API.text() function sets (unless you overwrite it with manual values                                              // 463\n\t\t * given to API.text(.., flags) )                                                                                    // 464\n\t\t * flags.autoencode = true                                                                                           // 465\n\t\t * flags.noBOM = true                                                                                                // 466\n\t\t *                                                                                                                   // 467\n\t\t * ===================================================================================                               // 468\n\t\t * `flags` properties relied upon:                                                                                   // 469\n\t\t *   .sourceEncoding = string with encoding label.                                                                   // 470\n\t\t *                     \"Unicode\" by default. = encoding of the incoming text.                                        // 471\n\t\t *                     pass some non-existing encoding name                                                          // 472\n\t\t *                     (ex: 'Do not touch my strings! I know what I am doing.')                                      // 473\n\t\t *                     to make encoding code skip the encoding step.                                                 // 474\n\t\t *   .outputEncoding = Either valid PDF encoding name                                                                // 475\n\t\t *                     (must be supported by jsPDF font metrics, otherwise no encoding)                              // 476\n\t\t *                     or a JS object, where key = sourceCharCode, value = outputCharCode                            // 477\n\t\t *                     missing keys will be treated as: sourceCharCode === outputCharCode                            // 478\n\t\t *   .noBOM                                                                                                          // 479\n\t\t *       See comment higher above for explanation for why this is important                                          // 480\n\t\t *   .autoencode                                                                                                     // 481\n\t\t *       See comment higher above for explanation for why this is important                                          // 482\n\t\t */                                                                                                                  // 483\n                                                                                                                       // 484\n\t\t\tvar i,l,sourceEncoding,encodingBlock,outputEncoding,newtext,isUnicode,ch,bch;                                       // 485\n                                                                                                                       // 486\n\t\t\tflags = flags || {};                                                                                                // 487\n\t\t\tsourceEncoding = flags.sourceEncoding || 'Unicode';                                                                 // 488\n\t\t\toutputEncoding = flags.outputEncoding;                                                                              // 489\n                                                                                                                       // 490\n\t\t\t// This 'encoding' section relies on font metrics format                                                            // 491\n\t\t\t// attached to font objects by, among others,                                                                       // 492\n\t\t\t// \"Willow Systems' standard_font_metrics plugin\"                                                                   // 493\n\t\t\t// see jspdf.plugin.standard_font_metrics.js for format                                                             // 494\n\t\t\t// of the font.metadata.encoding Object.                                                                            // 495\n\t\t\t// It should be something like                                                                                      // 496\n\t\t\t//   .encoding = {'codePages':['WinANSI....'], 'WinANSI...':{code:code, ...}}                                       // 497\n\t\t\t//   .widths = {0:width, code:width, ..., 'fof':divisor}                                                            // 498\n\t\t\t//   .kerning = {code:{previous_char_code:shift, ..., 'fof':-divisor},...}                                          // 499\n\t\t\tif ((flags.autoencode || outputEncoding) &&                                                                         // 500\n\t\t\t\tfonts[activeFontKey].metadata &&                                                                                   // 501\n\t\t\t\tfonts[activeFontKey].metadata[sourceEncoding] &&                                                                   // 502\n\t\t\t\tfonts[activeFontKey].metadata[sourceEncoding].encoding) {                                                          // 503\n\t\t\t\tencodingBlock = fonts[activeFontKey].metadata[sourceEncoding].encoding;                                            // 504\n                                                                                                                       // 505\n\t\t\t\t// each font has default encoding. Some have it clearly defined.                                                   // 506\n\t\t\t\tif (!outputEncoding && fonts[activeFontKey].encoding) {                                                            // 507\n\t\t\t\t\toutputEncoding = fonts[activeFontKey].encoding;                                                                   // 508\n\t\t\t\t}                                                                                                                  // 509\n                                                                                                                       // 510\n\t\t\t\t// Hmmm, the above did not work? Let's try again, in different place.                                              // 511\n\t\t\t\tif (!outputEncoding && encodingBlock.codePages) {                                                                  // 512\n\t\t\t\t\toutputEncoding = encodingBlock.codePages[0]; // let's say, first one is the default                               // 513\n\t\t\t\t}                                                                                                                  // 514\n                                                                                                                       // 515\n\t\t\t\tif (typeof outputEncoding === 'string') {                                                                          // 516\n\t\t\t\t\toutputEncoding = encodingBlock[outputEncoding];                                                                   // 517\n\t\t\t\t}                                                                                                                  // 518\n\t\t\t\t// we want output encoding to be a JS Object, where                                                                // 519\n\t\t\t\t// key = sourceEncoding's character code and                                                                       // 520\n\t\t\t\t// value = outputEncoding's character code.                                                                        // 521\n\t\t\t\tif (outputEncoding) {                                                                                              // 522\n\t\t\t\t\tisUnicode = false;                                                                                                // 523\n\t\t\t\t\tnewtext = [];                                                                                                     // 524\n\t\t\t\t\tfor (i = 0, l = text.length; i < l; i++) {                                                                        // 525\n\t\t\t\t\t\tch = outputEncoding[text.charCodeAt(i)];                                                                         // 526\n\t\t\t\t\t\tif (ch) {                                                                                                        // 527\n\t\t\t\t\t\t\tnewtext.push(                                                                                                   // 528\n\t\t\t\t\t\t\t\tString.fromCharCode(ch));                                                                                      // 529\n\t\t\t\t\t\t} else {                                                                                                         // 530\n\t\t\t\t\t\t\tnewtext.push(                                                                                                   // 531\n\t\t\t\t\t\t\t\ttext[i]);                                                                                                      // 532\n\t\t\t\t\t\t}                                                                                                                // 533\n                                                                                                                       // 534\n\t\t\t\t\t\t// since we are looping over chars anyway, might as well                                                         // 535\n\t\t\t\t\t\t// check for residual unicodeness                                                                                // 536\n\t\t\t\t\t\tif (newtext[i].charCodeAt(0) >> 8) {                                                                             // 537\n\t\t\t\t\t\t\t/* more than 255 */                                                                                             // 538\n\t\t\t\t\t\t\tisUnicode = true;                                                                                               // 539\n\t\t\t\t\t\t}                                                                                                                // 540\n\t\t\t\t\t}                                                                                                                 // 541\n\t\t\t\t\ttext = newtext.join('');                                                                                          // 542\n\t\t\t\t}                                                                                                                  // 543\n\t\t\t}                                                                                                                   // 544\n                                                                                                                       // 545\n\t\t\ti = text.length;                                                                                                    // 546\n\t\t\t// isUnicode may be set to false above. Hence the triple-equal to undefined                                         // 547\n\t\t\twhile (isUnicode === undefined && i !== 0) {                                                                        // 548\n\t\t\t\tif (text.charCodeAt(i - 1) >> 8) {                                                                                 // 549\n\t\t\t\t\t/* more than 255 */                                                                                               // 550\n\t\t\t\t\tisUnicode = true;                                                                                                 // 551\n\t\t\t\t}                                                                                                                  // 552\n\t\t\t\ti--;                                                                                                               // 553\n\t\t\t}                                                                                                                   // 554\n\t\t\tif (!isUnicode) {                                                                                                   // 555\n\t\t\t\treturn text;                                                                                                       // 556\n\t\t\t}                                                                                                                   // 557\n                                                                                                                       // 558\n\t\t\tnewtext = flags.noBOM ? [] : [254, 255];                                                                            // 559\n\t\t\tfor (i = 0, l = text.length; i < l; i++) {                                                                          // 560\n\t\t\t\tch = text.charCodeAt(i);                                                                                           // 561\n\t\t\t\tbch = ch >> 8; // divide by 256                                                                                    // 562\n\t\t\t\tif (bch >> 8) {                                                                                                    // 563\n\t\t\t\t\t/* something left after dividing by 256 second time */                                                            // 564\n\t\t\t\t\tthrow new Error(\"Character at position \" + i + \" of string '\"                                                     // 565\n\t\t\t\t\t\t+ text + \"' exceeds 16bits. Cannot be encoded into UCS-2 BE\");                                                   // 566\n\t\t\t\t}                                                                                                                  // 567\n\t\t\t\tnewtext.push(bch);                                                                                                 // 568\n\t\t\t\tnewtext.push(ch - (bch << 8));                                                                                     // 569\n\t\t\t}                                                                                                                   // 570\n\t\t\treturn String.fromCharCode.apply(undefined, newtext);                                                               // 571\n\t\t},                                                                                                                   // 572\n\t\tpdfEscape = function(text, flags) {                                                                                  // 573\n\t\t\t/**                                                                                                                 // 574\n\t\t\t * Replace '/', '(', and ')' with pdf-safe versions                                                                 // 575\n\t\t\t *                                                                                                                  // 576\n\t\t\t * Doing to8bitStream does NOT make this PDF display unicode text. For that                                         // 577\n\t\t\t * we also need to reference a unicode font and embed it - royal pain in the rear.                                  // 578\n\t\t\t *                                                                                                                  // 579\n\t\t\t * There is still a benefit to to8bitStream - PDF simply cannot handle 16bit chars,                                 // 580\n\t\t\t * which JavaScript Strings are happy to provide. So, while we still cannot display                                 // 581\n\t\t\t * 2-byte characters property, at least CONDITIONALLY converting (entire string containing)                         // 582\n\t\t\t * 16bit chars to (USC-2-BE) 2-bytes per char + BOM streams we ensure that entire PDF                               // 583\n\t\t\t * is still parseable.                                                                                              // 584\n\t\t\t * This will allow immediate support for unicode in document properties strings.                                    // 585\n\t\t\t */                                                                                                                 // 586\n\t\t\treturn to8bitStream(text, flags).replace(/\\\\/g, '\\\\\\\\').replace(/\\(/g, '\\\\(').replace(/\\)/g, '\\\\)');                // 587\n\t\t},                                                                                                                   // 588\n\t\tputInfo = function() {                                                                                               // 589\n\t\t\tout('/Producer (jsPDF ' + jsPDF.version + ')');                                                                     // 590\n\t\t\tfor(var key in documentProperties) {                                                                                // 591\n\t\t\t\tif(documentProperties.hasOwnProperty(key) && documentProperties[key]) {                                            // 592\n\t\t\t\t\tout('/'+key.substr(0,1).toUpperCase() + key.substr(1)                                                             // 593\n\t\t\t\t\t\t+' (' + pdfEscape(documentProperties[key]) + ')');                                                               // 594\n\t\t\t\t}                                                                                                                  // 595\n\t\t\t}                                                                                                                   // 596\n\t\t\tvar created  = new Date(),                                                                                          // 597\n\t\t\t\ttzoffset = created.getTimezoneOffset(),                                                                            // 598\n\t\t\t\ttzsign   = tzoffset < 0 ? '+' : '-',                                                                               // 599\n\t\t\t\ttzhour   = Math.floor(Math.abs(tzoffset / 60)),                                                                    // 600\n\t\t\t\ttzmin    = Math.abs(tzoffset % 60),                                                                                // 601\n\t\t\t\ttzstr    = [tzsign, padd2(tzhour), \"'\", padd2(tzmin), \"'\"].join('');                                               // 602\n\t\t\tout(['/CreationDate (D:',                                                                                           // 603\n\t\t\t\t\tcreated.getFullYear(),                                                                                            // 604\n\t\t\t\t\tpadd2(created.getMonth() + 1),                                                                                    // 605\n\t\t\t\t\tpadd2(created.getDate()),                                                                                         // 606\n\t\t\t\t\tpadd2(created.getHours()),                                                                                        // 607\n\t\t\t\t\tpadd2(created.getMinutes()),                                                                                      // 608\n\t\t\t\t\tpadd2(created.getSeconds()), tzstr, ')'].join(''));                                                               // 609\n\t\t},                                                                                                                   // 610\n\t\tputCatalog = function() {                                                                                            // 611\n\t\t\tout('/Type /Catalog');                                                                                              // 612\n\t\t\tout('/Pages 1 0 R');                                                                                                // 613\n\t\t\t// PDF13ref Section 7.2.1                                                                                           // 614\n\t\t\tif (!zoomMode) zoomMode = 'fullwidth';                                                                              // 615\n\t\t\tswitch(zoomMode) {                                                                                                  // 616\n\t\t\t\tcase 'fullwidth'  : out('/OpenAction [3 0 R /FitH null]');       break;                                            // 617\n\t\t\t\tcase 'fullheight' : out('/OpenAction [3 0 R /FitV null]');       break;                                            // 618\n\t\t\t\tcase 'fullpage'   : out('/OpenAction [3 0 R /Fit]');             break;                                            // 619\n\t\t\t\tcase 'original'   : out('/OpenAction [3 0 R /XYZ null null 1]'); break;                                            // 620\n\t\t\t\tdefault:                                                                                                           // 621\n\t\t\t\t\tvar pcn = '' + zoomMode;                                                                                          // 622\n\t\t\t\t\tif (pcn.substr(pcn.length-1) === '%')                                                                             // 623\n\t\t\t\t\t\tzoomMode = parseInt(zoomMode) / 100;                                                                             // 624\n\t\t\t\t\tif (typeof zoomMode === 'number') {                                                                               // 625\n\t\t\t\t\t\tout('/OpenAction [3 0 R /XYZ null null '+f2(zoomMode)+']');                                                      // 626\n\t\t\t\t\t}                                                                                                                 // 627\n\t\t\t}                                                                                                                   // 628\n\t\t\tif (!layoutMode) layoutMode = 'continuous';                                                                         // 629\n\t\t\tswitch(layoutMode) {                                                                                                // 630\n\t\t\t\tcase 'continuous' : out('/PageLayout /OneColumn');      break;                                                     // 631\n\t\t\t\tcase 'single'     : out('/PageLayout /SinglePage');     break;                                                     // 632\n\t\t\t\tcase 'two':                                                                                                        // 633\n\t\t\t\tcase 'twoleft'    : out('/PageLayout /TwoColumnLeft');  break;                                                     // 634\n\t\t\t\tcase 'tworight'   : out('/PageLayout /TwoColumnRight'); break;                                                     // 635\n\t\t\t}                                                                                                                   // 636\n\t\t\tif (pageMode) {                                                                                                     // 637\n\t\t\t\t/**                                                                                                                // 638\n\t\t\t\t * A name object specifying how the document should be displayed when opened:                                      // 639\n\t\t\t\t * UseNone      : Neither document outline nor thumbnail images visible -- DEFAULT                                 // 640\n\t\t\t\t * UseOutlines  : Document outline visible                                                                         // 641\n\t\t\t\t * UseThumbs    : Thumbnail images visible                                                                         // 642\n\t\t\t\t * FullScreen   : Full-screen mode, with no menu bar, window controls, or any other window visible                 // 643\n\t\t\t\t */                                                                                                                // 644\n\t\t\t\tout('/PageMode /' + pageMode);                                                                                     // 645\n\t\t\t}                                                                                                                   // 646\n\t\t\tevents.publish('putCatalog');                                                                                       // 647\n\t\t},                                                                                                                   // 648\n\t\tputTrailer = function() {                                                                                            // 649\n\t\t\tout('/Size ' + (objectNumber + 1));                                                                                 // 650\n\t\t\tout('/Root ' + objectNumber + ' 0 R');                                                                              // 651\n\t\t\tout('/Info ' + (objectNumber - 1) + ' 0 R');                                                                        // 652\n\t\t},                                                                                                                   // 653\n\t\tbeginPage = function(width,height) {                                                                                 // 654\n\t\t\t// Dimensions are stored as user units and converted to points on output                                            // 655\n\t\t\tvar orientation = typeof height === 'string' && height.toLowerCase();                                               // 656\n\t\t\tif (typeof width === 'string') {                                                                                    // 657\n\t\t\t\tvar format = width.toLowerCase();                                                                                  // 658\n\t\t\t\tif (pageFormats.hasOwnProperty(format)) {                                                                          // 659\n\t\t\t\t\twidth  = pageFormats[format][0] / k;                                                                              // 660\n\t\t\t\t\theight = pageFormats[format][1] / k;                                                                              // 661\n\t\t\t\t}                                                                                                                  // 662\n\t\t\t}                                                                                                                   // 663\n\t\t\tif (Array.isArray(width)) {                                                                                         // 664\n\t\t\t\theight = width[1];                                                                                                 // 665\n\t\t\t\twidth = width[0];                                                                                                  // 666\n\t\t\t}                                                                                                                   // 667\n\t\t\tif (orientation) {                                                                                                  // 668\n\t\t\t\tswitch(orientation.substr(0,1)) {                                                                                  // 669\n\t\t\t\t\tcase 'l': if (height > width ) orientation = 's'; break;                                                          // 670\n\t\t\t\t\tcase 'p': if (width > height ) orientation = 's'; break;                                                          // 671\n\t\t\t\t}                                                                                                                  // 672\n\t\t\t\tif (orientation === 's') { tmp = width; width = height; height = tmp; }                                            // 673\n\t\t\t}                                                                                                                   // 674\n\t\t\toutToPages = true;                                                                                                  // 675\n\t\t\tpages[++page] = [];                                                                                                 // 676\n\t\t\tpagedim[page] = {                                                                                                   // 677\n\t\t\t\twidth  : Number(width)  || pageWidth,                                                                              // 678\n\t\t\t\theight : Number(height) || pageHeight                                                                              // 679\n\t\t\t};                                                                                                                  // 680\n\t\t\t_setPage(page);                                                                                                     // 681\n\t\t},                                                                                                                   // 682\n\t\t_addPage = function() {                                                                                              // 683\n\t\t\tbeginPage.apply(this, arguments);                                                                                   // 684\n\t\t\t// Set line width                                                                                                   // 685\n\t\t\tout(f2(lineWidth * k) + ' w');                                                                                      // 686\n\t\t\t// Set draw color                                                                                                   // 687\n\t\t\tout(drawColor);                                                                                                     // 688\n\t\t\t// resurrecting non-default line caps, joins                                                                        // 689\n\t\t\tif (lineCapID !== 0) {                                                                                              // 690\n\t\t\t\tout(lineCapID + ' J');                                                                                             // 691\n\t\t\t}                                                                                                                   // 692\n\t\t\tif (lineJoinID !== 0) {                                                                                             // 693\n\t\t\t\tout(lineJoinID + ' j');                                                                                            // 694\n\t\t\t}                                                                                                                   // 695\n\t\t\tevents.publish('addPage', { pageNumber : page });                                                                   // 696\n\t\t},                                                                                                                   // 697\n\t\t_setPage = function(n) {                                                                                             // 698\n\t\t\tif (n > 0 && n <= page) {                                                                                           // 699\n\t\t\t\tcurrentPage = n;                                                                                                   // 700\n\t\t\t\tpageWidth = pagedim[n].width;                                                                                      // 701\n\t\t\t\tpageHeight = pagedim[n].height;                                                                                    // 702\n\t\t\t}                                                                                                                   // 703\n\t\t},                                                                                                                   // 704\n\t\t/**                                                                                                                  // 705\n\t\t * Returns a document-specific font key - a label assigned to a                                                      // 706\n\t\t * font name + font type combination at the time the font was added                                                  // 707\n\t\t * to the font inventory.                                                                                            // 708\n\t\t *                                                                                                                   // 709\n\t\t * Font key is used as label for the desired font for a block of text                                                // 710\n\t\t * to be added to the PDF document stream.                                                                           // 711\n\t\t * @private                                                                                                          // 712\n\t\t * @function                                                                                                         // 713\n\t\t * @param fontName {String} can be undefined on \"falthy\" to indicate \"use current\"                                   // 714\n\t\t * @param fontStyle {String} can be undefined on \"falthy\" to indicate \"use current\"                                  // 715\n\t\t * @returns {String} Font key.                                                                                       // 716\n\t\t */                                                                                                                  // 717\n\t\tgetFont = function(fontName, fontStyle) {                                                                            // 718\n\t\t\tvar key;                                                                                                            // 719\n                                                                                                                       // 720\n\t\t\tfontName  = fontName  !== undefined ? fontName  : fonts[activeFontKey].fontName;                                    // 721\n\t\t\tfontStyle = fontStyle !== undefined ? fontStyle : fonts[activeFontKey].fontStyle;                                   // 722\n                                                                                                                       // 723\n\t\t\ttry {                                                                                                               // 724\n\t\t\t // get a string like 'F3' - the KEY corresponding tot he font + type combination.                                  // 725\n\t\t\t\tkey = fontmap[fontName][fontStyle];                                                                                // 726\n\t\t\t} catch (e) {}                                                                                                      // 727\n                                                                                                                       // 728\n\t\t\tif (!key) {                                                                                                         // 729\n\t\t\t\tthrow new Error(\"Unable to look up font label for font '\" + fontName + \"', '\"                                      // 730\n\t\t\t\t\t+ fontStyle + \"'. Refer to getFontList() for available fonts.\");                                                  // 731\n\t\t\t}                                                                                                                   // 732\n\t\t\treturn key;                                                                                                         // 733\n\t\t},                                                                                                                   // 734\n\t\tbuildDocument = function() {                                                                                         // 735\n                                                                                                                       // 736\n\t\t\toutToPages = false; // switches out() to content                                                                    // 737\n\t\t\tobjectNumber = 2;                                                                                                   // 738\n\t\t\tcontent = [];                                                                                                       // 739\n\t\t\toffsets = [];                                                                                                       // 740\n                                                                                                                       // 741\n\t\t\t// putHeader()                                                                                                      // 742\n\t\t\tout('%PDF-' + pdfVersion);                                                                                          // 743\n                                                                                                                       // 744\n\t\t\tputPages();                                                                                                         // 745\n                                                                                                                       // 746\n\t\t\tputResources();                                                                                                     // 747\n                                                                                                                       // 748\n\t\t\t// Info                                                                                                             // 749\n\t\t\tnewObject();                                                                                                        // 750\n\t\t\tout('<<');                                                                                                          // 751\n\t\t\tputInfo();                                                                                                          // 752\n\t\t\tout('>>');                                                                                                          // 753\n\t\t\tout('endobj');                                                                                                      // 754\n                                                                                                                       // 755\n\t\t\t// Catalog                                                                                                          // 756\n\t\t\tnewObject();                                                                                                        // 757\n\t\t\tout('<<');                                                                                                          // 758\n\t\t\tputCatalog();                                                                                                       // 759\n\t\t\tout('>>');                                                                                                          // 760\n\t\t\tout('endobj');                                                                                                      // 761\n                                                                                                                       // 762\n\t\t\t// Cross-ref                                                                                                        // 763\n\t\t\tvar o = content_length, i, p = \"0000000000\";                                                                        // 764\n\t\t\tout('xref');                                                                                                        // 765\n\t\t\tout('0 ' + (objectNumber + 1));                                                                                     // 766\n\t\t\tout(p+' 65535 f ');                                                                                                 // 767\n\t\t\tfor (i = 1; i <= objectNumber; i++) {                                                                               // 768\n\t\t\t\tout((p + offsets[i]).slice(-10) + ' 00000 n ');                                                                    // 769\n\t\t\t}                                                                                                                   // 770\n\t\t\t// Trailer                                                                                                          // 771\n\t\t\tout('trailer');                                                                                                     // 772\n\t\t\tout('<<');                                                                                                          // 773\n\t\t\tputTrailer();                                                                                                       // 774\n\t\t\tout('>>');                                                                                                          // 775\n\t\t\tout('startxref');                                                                                                   // 776\n\t\t\tout(o);                                                                                                             // 777\n\t\t\tout('%%EOF');                                                                                                       // 778\n                                                                                                                       // 779\n\t\t\toutToPages = true;                                                                                                  // 780\n                                                                                                                       // 781\n\t\t\treturn content.join('\\n');                                                                                          // 782\n\t\t},                                                                                                                   // 783\n\t\tgetStyle = function(style) {                                                                                         // 784\n\t\t\t// see path-painting operators in PDF spec                                                                          // 785\n\t\t\tvar op = 'S'; // stroke                                                                                             // 786\n\t\t\tif (style === 'F') {                                                                                                // 787\n\t\t\t\top = 'f'; // fill                                                                                                  // 788\n\t\t\t} else if (style === 'FD' || style === 'DF') {                                                                      // 789\n\t\t\t\top = 'B'; // both                                                                                                  // 790\n\t\t\t} else if (style === 'f' || style === 'f*' || style === 'B' || style === 'B*') {                                    // 791\n\t\t\t\t/*                                                                                                                 // 792\n\t\t\t\tAllow direct use of these PDF path-painting operators:                                                             // 793\n\t\t\t\t- f\tfill using nonzero winding number rule                                                                         // 794\n\t\t\t\t- f*\tfill using even-odd rule                                                                                      // 795\n\t\t\t\t- B\tfill then stroke with fill using non-zero winding number rule                                                  // 796\n\t\t\t\t- B*\tfill then stroke with fill using even-odd rule                                                                // 797\n\t\t\t\t*/                                                                                                                 // 798\n\t\t\t\top = style;                                                                                                        // 799\n\t\t\t}                                                                                                                   // 800\n\t\t\treturn op;                                                                                                          // 801\n\t\t},                                                                                                                   // 802\n\t\tgetArrayBuffer = function() {                                                                                        // 803\n\t\t\tvar data = buildDocument(), len = data.length,                                                                      // 804\n\t\t\t\tab = new ArrayBuffer(len), u8 = new Uint8Array(ab);                                                                // 805\n                                                                                                                       // 806\n\t\t\twhile(len--) u8[len] = data.charCodeAt(len);                                                                        // 807\n\t\t\treturn ab;                                                                                                          // 808\n\t\t},                                                                                                                   // 809\n\t\tgetBlob = function() {                                                                                               // 810\n\t\t\treturn new Blob([getArrayBuffer()], { type : \"application/pdf\" });                                                  // 811\n\t\t},                                                                                                                   // 812\n\t\t/**                                                                                                                  // 813\n\t\t * Generates the PDF document.                                                                                       // 814\n\t\t *                                                                                                                   // 815\n\t\t * If `type` argument is undefined, output is raw body of resulting PDF returned as a string.                        // 816\n\t\t *                                                                                                                   // 817\n\t\t * @param {String} type A string identifying one of the possible output types.                                       // 818\n\t\t * @param {Object} options An object providing some additional signalling to PDF generator.                          // 819\n\t\t * @function                                                                                                         // 820\n\t\t * @returns {jsPDF}                                                                                                  // 821\n\t\t * @methodOf jsPDF#                                                                                                  // 822\n\t\t * @name output                                                                                                      // 823\n\t\t */                                                                                                                  // 824\n\t\toutput = SAFE(function(type, options) {                                                                              // 825\n\t\t\tvar datauri = ('' + type).substr(0,6) === 'dataur'                                                                  // 826\n\t\t\t\t? 'data:application/pdf;base64,'+btoa(buildDocument()):0;                                                          // 827\n                                                                                                                       // 828\n\t\t\tswitch (type) {                                                                                                     // 829\n\t\t\t\tcase undefined:                                                                                                    // 830\n\t\t\t\t\treturn buildDocument();                                                                                           // 831\n\t\t\t\tcase 'save':                                                                                                       // 832\n\t\t\t\t\tif (navigator.getUserMedia) {                                                                                     // 833\n\t\t\t\t\t\tif (global.URL === undefined                                                                                     // 834\n\t\t\t\t\t\t|| global.URL.createObjectURL === undefined) {                                                                   // 835\n\t\t\t\t\t\t\treturn API.output('dataurlnewwindow');                                                                          // 836\n\t\t\t\t\t\t}                                                                                                                // 837\n\t\t\t\t\t}                                                                                                                 // 838\n\t\t\t\t\tsaveAs(getBlob(), options);                                                                                       // 839\n\t\t\t\t\tif(typeof saveAs.unload === 'function') {                                                                         // 840\n\t\t\t\t\t\tif(global.setTimeout) {                                                                                          // 841\n\t\t\t\t\t\t\tsetTimeout(saveAs.unload,911);                                                                                  // 842\n\t\t\t\t\t\t}                                                                                                                // 843\n\t\t\t\t\t}                                                                                                                 // 844\n\t\t\t\t\tbreak;                                                                                                            // 845\n\t\t\t\tcase 'arraybuffer':                                                                                                // 846\n\t\t\t\t\treturn getArrayBuffer();                                                                                          // 847\n\t\t\t\tcase 'blob':                                                                                                       // 848\n\t\t\t\t\treturn getBlob();                                                                                                 // 849\n\t\t\t\tcase 'bloburi':                                                                                                    // 850\n\t\t\t\tcase 'bloburl':                                                                                                    // 851\n\t\t\t\t\t// User is responsible of calling revokeObjectURL                                                                 // 852\n\t\t\t\t\treturn global.URL && global.URL.createObjectURL(getBlob()) || void 0;                                             // 853\n\t\t\t\tcase 'datauristring':                                                                                              // 854\n\t\t\t\tcase 'dataurlstring':                                                                                              // 855\n\t\t\t\t\treturn datauri;                                                                                                   // 856\n\t\t\t\tcase 'dataurlnewwindow':                                                                                           // 857\n\t\t\t\t\tvar nW = global.open(datauri);                                                                                    // 858\n\t\t\t\t\tif (nW || typeof safari === \"undefined\") return nW;                                                               // 859\n\t\t\t\t\t/* pass through */                                                                                                // 860\n\t\t\t\tcase 'datauri':                                                                                                    // 861\n\t\t\t\tcase 'dataurl':                                                                                                    // 862\n\t\t\t\t\treturn global.document.location.href = datauri;                                                                   // 863\n\t\t\t\tdefault:                                                                                                           // 864\n\t\t\t\t\tthrow new Error('Output type \"' + type + '\" is not supported.');                                                  // 865\n\t\t\t}                                                                                                                   // 866\n\t\t\t// @TODO: Add different output options                                                                              // 867\n\t\t});                                                                                                                  // 868\n                                                                                                                       // 869\n\t\tswitch (unit) {                                                                                                      // 870\n\t\t\tcase 'pt':  k = 1;          break;                                                                                  // 871\n\t\t\tcase 'mm':  k = 72 / 25.4;  break;                                                                                  // 872\n\t\t\tcase 'cm':  k = 72 / 2.54;  break;                                                                                  // 873\n\t\t\tcase 'in':  k = 72;         break;                                                                                  // 874\n\t\t\tcase 'px':  k = 96 / 72;    break;                                                                                  // 875\n\t\t\tcase 'pc':  k = 12;         break;                                                                                  // 876\n\t\t\tcase 'em':  k = 12;         break;                                                                                  // 877\n\t\t\tcase 'ex':  k = 6;          break;                                                                                  // 878\n\t\t\tdefault:                                                                                                            // 879\n\t\t\t\tthrow ('Invalid unit: ' + unit);                                                                                   // 880\n\t\t}                                                                                                                    // 881\n                                                                                                                       // 882\n\t\t//---------------------------------------                                                                            // 883\n\t\t// Public API                                                                                                        // 884\n                                                                                                                       // 885\n\t\t/**                                                                                                                  // 886\n\t\t * Object exposing internal API to plugins                                                                           // 887\n\t\t * @public                                                                                                           // 888\n\t\t */                                                                                                                  // 889\n\t\tAPI.internal = {                                                                                                     // 890\n\t\t\t'pdfEscape' : pdfEscape,                                                                                            // 891\n\t\t\t'getStyle' : getStyle,                                                                                              // 892\n\t\t\t/**                                                                                                                 // 893\n\t\t\t * Returns {FontObject} describing a particular font.                                                               // 894\n\t\t\t * @public                                                                                                          // 895\n\t\t\t * @function                                                                                                        // 896\n\t\t\t * @param fontName {String} (Optional) Font's family name                                                           // 897\n\t\t\t * @param fontStyle {String} (Optional) Font's style variation name (Example:\"Italic\")                              // 898\n\t\t\t * @returns {FontObject}                                                                                            // 899\n\t\t\t */                                                                                                                 // 900\n\t\t\t'getFont' : function() {                                                                                            // 901\n\t\t\t\treturn fonts[getFont.apply(API, arguments)];                                                                       // 902\n\t\t\t},                                                                                                                  // 903\n\t\t\t'getFontSize' : function() {                                                                                        // 904\n\t\t\t\treturn activeFontSize;                                                                                             // 905\n\t\t\t},                                                                                                                  // 906\n\t\t\t'getLineHeight' : function() {                                                                                      // 907\n\t\t\t\treturn activeFontSize * lineHeightProportion;                                                                      // 908\n\t\t\t},                                                                                                                  // 909\n\t\t\t'write' : function(string1 /*, string2, string3, etc */) {                                                          // 910\n\t\t\t\tout(arguments.length === 1 ? string1 : Array.prototype.join.call(arguments, ' '));                                 // 911\n\t\t\t},                                                                                                                  // 912\n\t\t\t'getCoordinateString' : function(value) {                                                                           // 913\n\t\t\t\treturn f2(value * k);                                                                                              // 914\n\t\t\t},                                                                                                                  // 915\n\t\t\t'getVerticalCoordinateString' : function(value) {                                                                   // 916\n\t\t\t\treturn f2((pageHeight - value) * k);                                                                               // 917\n\t\t\t},                                                                                                                  // 918\n\t\t\t'collections' : {},                                                                                                 // 919\n\t\t\t'newObject' : newObject,                                                                                            // 920\n\t\t\t'putStream' : putStream,                                                                                            // 921\n\t\t\t'events' : events,                                                                                                  // 922\n\t\t\t// ratio that you use in multiplication of a given \"size\" number to arrive to 'point'                               // 923\n\t\t\t// units of measurement.                                                                                            // 924\n\t\t\t// scaleFactor is set at initialization of the document and calculated against the stated                           // 925\n\t\t\t// default measurement units for the document.                                                                      // 926\n\t\t\t// If default is \"mm\", k is the number that will turn number in 'mm' into 'points' number.                          // 927\n\t\t\t// through multiplication.                                                                                          // 928\n\t\t\t'scaleFactor' : k,                                                                                                  // 929\n\t\t\t'pageSize' : {                                                                                                      // 930\n\t\t\t\tget width() {                                                                                                      // 931\n\t\t\t\t\treturn pageWidth                                                                                                  // 932\n\t\t\t\t},                                                                                                                 // 933\n\t\t\t\tget height() {                                                                                                     // 934\n\t\t\t\t\treturn pageHeight                                                                                                 // 935\n\t\t\t\t}                                                                                                                  // 936\n\t\t\t},                                                                                                                  // 937\n\t\t\t'output' : function(type, options) {                                                                                // 938\n\t\t\t\treturn output(type, options);                                                                                      // 939\n\t\t\t},                                                                                                                  // 940\n\t\t\t'getNumberOfPages' : function() {                                                                                   // 941\n\t\t\t\treturn pages.length - 1;                                                                                           // 942\n\t\t\t},                                                                                                                  // 943\n\t\t\t'pages' : pages                                                                                                     // 944\n\t\t};                                                                                                                   // 945\n                                                                                                                       // 946\n\t\t/**                                                                                                                  // 947\n\t\t * Adds (and transfers the focus to) new page to the PDF document.                                                   // 948\n\t\t * @function                                                                                                         // 949\n\t\t * @returns {jsPDF}                                                                                                  // 950\n\t\t *                                                                                                                   // 951\n\t\t * @methodOf jsPDF#                                                                                                  // 952\n\t\t * @name addPage                                                                                                     // 953\n\t\t */                                                                                                                  // 954\n\t\tAPI.addPage = function() {                                                                                           // 955\n\t\t\t_addPage.apply(this, arguments);                                                                                    // 956\n\t\t\treturn this;                                                                                                        // 957\n\t\t};                                                                                                                   // 958\n\t\tAPI.setPage = function() {                                                                                           // 959\n\t\t\t_setPage.apply(this, arguments);                                                                                    // 960\n\t\t\treturn this;                                                                                                        // 961\n\t\t};                                                                                                                   // 962\n\t\tAPI.setDisplayMode = function(zoom, layout, pmode) {                                                                 // 963\n\t\t\tzoomMode   = zoom;                                                                                                  // 964\n\t\t\tlayoutMode = layout;                                                                                                // 965\n\t\t\tpageMode   = pmode;                                                                                                 // 966\n\t\t\treturn this;                                                                                                        // 967\n\t\t},                                                                                                                   // 968\n                                                                                                                       // 969\n\t\t/**                                                                                                                  // 970\n\t\t * Adds text to page. Supports adding multiline text when 'text' argument is an Array of Strings.                    // 971\n\t\t *                                                                                                                   // 972\n\t\t * @function                                                                                                         // 973\n\t\t * @param {String|Array} text String or array of strings to be added to the page. Each line is shifted one line down per font, spacing settings declared before this call.\n\t\t * @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page       // 975\n\t\t * @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page      // 976\n\t\t * @param {Object} flags Collection of settings signalling how the text must be encoded. Defaults are sane. If you think you want to pass some flags, you likely can read the source.\n\t\t * @returns {jsPDF}                                                                                                  // 978\n\t\t * @methodOf jsPDF#                                                                                                  // 979\n\t\t * @name text                                                                                                        // 980\n\t\t */                                                                                                                  // 981\n\t\tAPI.text = function(text, x, y, flags, angle) {                                                                      // 982\n\t\t\t/**                                                                                                                 // 983\n\t\t\t * Inserts something like this into PDF                                                                             // 984\n\t\t\t *   BT                                                                                                             // 985\n\t\t\t *    /F1 16 Tf  % Font name + size                                                                                 // 986\n\t\t\t *    16 TL % How many units down for next line in multiline text                                                   // 987\n\t\t\t *    0 g % color                                                                                                   // 988\n\t\t\t *    28.35 813.54 Td % position                                                                                    // 989\n\t\t\t *    (line one) Tj                                                                                                 // 990\n\t\t\t *    T* (line two) Tj                                                                                              // 991\n\t\t\t *    T* (line three) Tj                                                                                            // 992\n\t\t\t *   ET                                                                                                             // 993\n\t\t\t */                                                                                                                 // 994\n\t\t\tfunction ESC(s) {                                                                                                   // 995\n\t\t\t\ts = s.split(\"\\t\").join(Array(options.TabLen||9).join(\" \"));                                                        // 996\n\t\t\t\treturn pdfEscape(s, flags);                                                                                        // 997\n\t\t\t}                                                                                                                   // 998\n                                                                                                                       // 999\n\t\t\t// Pre-August-2012 the order of arguments was function(x, y, text, flags)                                           // 1000\n\t\t\t// in effort to make all calls have similar signature like                                                          // 1001\n\t\t\t//   function(data, coordinates... , miscellaneous)                                                                 // 1002\n\t\t\t// this method had its args flipped.                                                                                // 1003\n\t\t\t// code below allows backward compatibility with old arg order.                                                     // 1004\n\t\t\tif (typeof text === 'number') {                                                                                     // 1005\n\t\t\t\ttmp = y;                                                                                                           // 1006\n\t\t\t\ty = x;                                                                                                             // 1007\n\t\t\t\tx = text;                                                                                                          // 1008\n\t\t\t\ttext = tmp;                                                                                                        // 1009\n\t\t\t}                                                                                                                   // 1010\n                                                                                                                       // 1011\n\t\t\t// If there are any newlines in text, we assume                                                                     // 1012\n\t\t\t// the user wanted to print multiple lines, so break the                                                            // 1013\n\t\t\t// text up into an array.  If the text is already an array,                                                         // 1014\n\t\t\t// we assume the user knows what they are doing.                                                                    // 1015\n\t\t\tif (typeof text === 'string' && text.match(/[\\n\\r]/)) {                                                             // 1016\n\t\t\t\ttext = text.split(/\\r\\n|\\r|\\n/g);                                                                                  // 1017\n\t\t\t}                                                                                                                   // 1018\n\t\t\tif (typeof flags === 'number') {                                                                                    // 1019\n\t\t\t\tangle = flags;                                                                                                     // 1020\n\t\t\t\tflags = null;                                                                                                      // 1021\n\t\t\t}                                                                                                                   // 1022\n\t\t\tvar xtra = '',mode = 'Td', todo;                                                                                    // 1023\n\t\t\tif (angle) {                                                                                                        // 1024\n\t\t\t\tangle *= (Math.PI / 180);                                                                                          // 1025\n\t\t\t\tvar c = Math.cos(angle),                                                                                           // 1026\n\t\t\t\ts = Math.sin(angle);                                                                                               // 1027\n\t\t\t\txtra = [f2(c), f2(s), f2(s * -1), f2(c), ''].join(\" \");                                                            // 1028\n\t\t\t\tmode = 'Tm';                                                                                                       // 1029\n\t\t\t}                                                                                                                   // 1030\n\t\t\tflags = flags || {};                                                                                                // 1031\n\t\t\tif (!('noBOM' in flags))                                                                                            // 1032\n\t\t\t\tflags.noBOM = true;                                                                                                // 1033\n\t\t\tif (!('autoencode' in flags))                                                                                       // 1034\n\t\t\t\tflags.autoencode = true;                                                                                           // 1035\n                                                                                                                       // 1036\n\t\t\tif (typeof text === 'string') {                                                                                     // 1037\n\t\t\t\ttext = ESC(text);                                                                                                  // 1038\n\t\t\t} else if (text instanceof Array) {                                                                                 // 1039\n\t\t\t\t// we don't want to destroy  original text array, so cloning it                                                    // 1040\n\t\t\t\tvar sa = text.concat(), da = [], len = sa.length;                                                                  // 1041\n\t\t\t\t// we do array.join('text that must not be PDFescaped\")                                                            // 1042\n\t\t\t\t// thus, pdfEscape each component separately                                                                       // 1043\n\t\t\t\twhile (len--) {                                                                                                    // 1044\n\t\t\t\t\tda.push(ESC(sa.shift()));                                                                                         // 1045\n\t\t\t\t}                                                                                                                  // 1046\n\t\t\t\tvar linesLeft = Math.ceil((pageHeight - y) * k / (activeFontSize * lineHeightProportion));                         // 1047\n\t\t\t\tif (0 <= linesLeft && linesLeft < da.length + 1) {                                                                 // 1048\n\t\t\t\t\ttodo = da.splice(linesLeft-1);                                                                                    // 1049\n\t\t\t\t}                                                                                                                  // 1050\n\t\t\t\ttext = da.join(\") Tj\\nT* (\");                                                                                      // 1051\n\t\t\t} else {                                                                                                            // 1052\n\t\t\t\tthrow new Error('Type of text must be string or Array. \"' + text + '\" is not recognized.');                        // 1053\n\t\t\t}                                                                                                                   // 1054\n\t\t\t// Using \"'\" (\"go next line and render text\" mark) would save space but would complicate our rendering code, templates\n                                                                                                                       // 1056\n\t\t\t// BT .. ET does NOT have default settings for Tf. You must state that explicitely every time for BT .. ET          // 1057\n\t\t\t// if you want text transformation matrix (+ multiline) to work reliably (which reads sizes of things from font declarations)\n\t\t\t// Thus, there is NO useful, *reliable* concept of \"default\" font for a page.                                       // 1059\n\t\t\t// The fact that \"default\" (reuse font used before) font worked before in basic cases is an accident                // 1060\n\t\t\t// - readers dealing smartly with brokenness of jsPDF's markup.                                                     // 1061\n\t\t\tout(                                                                                                                // 1062\n\t\t\t\t'BT\\n/' +                                                                                                          // 1063\n\t\t\t\tactiveFontKey + ' ' + activeFontSize + ' Tf\\n' +     // font face, style, size                                     // 1064\n\t\t\t\t(activeFontSize * lineHeightProportion) + ' TL\\n' +  // line spacing                                               // 1065\n\t\t\t\ttextColor +                                                                                                        // 1066\n\t\t\t\t'\\n' + xtra + f2(x * k) + ' ' + f2((pageHeight - y) * k) + ' ' + mode + '\\n(' +                                    // 1067\n\t\t\t\ttext +                                                                                                             // 1068\n\t\t\t\t') Tj\\nET');                                                                                                       // 1069\n                                                                                                                       // 1070\n\t\t\tif (todo) {                                                                                                         // 1071\n\t\t\t\tthis.addPage();                                                                                                    // 1072\n\t\t\t\tthis.text( todo, x, activeFontSize * 1.7 / k);                                                                     // 1073\n\t\t\t}                                                                                                                   // 1074\n                                                                                                                       // 1075\n\t\t\treturn this;                                                                                                        // 1076\n\t\t};                                                                                                                   // 1077\n                                                                                                                       // 1078\n\t\tAPI.lstext = function(text, x, y, spacing) {                                                                         // 1079\n\t\t\tfor (var i = 0, len = text.length ; i < len; i++, x += spacing) this.text(text[i], x, y);                           // 1080\n\t\t};                                                                                                                   // 1081\n                                                                                                                       // 1082\n\t\tAPI.line = function(x1, y1, x2, y2) {                                                                                // 1083\n\t\t\treturn this.lines([[x2 - x1, y2 - y1]], x1, y1);                                                                    // 1084\n\t\t};                                                                                                                   // 1085\n                                                                                                                       // 1086\n\t\tAPI.clip = function() {                                                                                              // 1087\n\t\t\t// By patrick-roberts, github.com/MrRio/jsPDF/issues/328                                                            // 1088\n\t\t\t// Call .clip() after calling .rect() with a style argument of null                                                 // 1089\n\t\t\tout('W') // clip                                                                                                    // 1090\n\t\t\tout('S') // stroke path; necessary for clip to work                                                                 // 1091\n\t\t};                                                                                                                   // 1092\n                                                                                                                       // 1093\n\t\t/**                                                                                                                  // 1094\n\t\t * Adds series of curves (straight lines or cubic bezier curves) to canvas, starting at `x`, `y` coordinates.        // 1095\n\t\t * All data points in `lines` are relative to last line origin.                                                      // 1096\n\t\t * `x`, `y` become x1,y1 for first line / curve in the set.                                                          // 1097\n\t\t * For lines you only need to specify [x2, y2] - (ending point) vector against x1, y1 starting point.                // 1098\n\t\t * For bezier curves you need to specify [x2,y2,x3,y3,x4,y4] - vectors to control points 1, 2, ending point. All vectors are against the start of the curve - x1,y1.\n\t\t *                                                                                                                   // 1100\n\t\t * @example .lines([[2,2],[-2,2],[1,1,2,2,3,3],[2,1]], 212,110, 10) // line, line, bezier curve, line                // 1101\n\t\t * @param {Array} lines Array of *vector* shifts as pairs (lines) or sextets (cubic bezier curves).                  // 1102\n\t\t * @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page       // 1103\n\t\t * @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page      // 1104\n\t\t * @param {Number} scale (Defaults to [1.0,1.0]) x,y Scaling factor for all vectors. Elements can be any floating number Sub-one makes drawing smaller. Over-one grows the drawing. Negative flips the direction.\n\t\t * @param {String} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n\t\t * @param {Boolean} closed If true, the path is closed with a straight line from the end of the last curve to the starting point.\n\t\t * @function                                                                                                         // 1108\n\t\t * @returns {jsPDF}                                                                                                  // 1109\n\t\t * @methodOf jsPDF#                                                                                                  // 1110\n\t\t * @name lines                                                                                                       // 1111\n\t\t */                                                                                                                  // 1112\n\t\tAPI.lines = function(lines, x, y, scale, style, closed) {                                                            // 1113\n\t\t\tvar scalex,scaley,i,l,leg,x2,y2,x3,y3,x4,y4;                                                                        // 1114\n                                                                                                                       // 1115\n\t\t\t// Pre-August-2012 the order of arguments was function(x, y, lines, scale, style)                                   // 1116\n\t\t\t// in effort to make all calls have similar signature like                                                          // 1117\n\t\t\t//   function(content, coordinateX, coordinateY , miscellaneous)                                                    // 1118\n\t\t\t// this method had its args flipped.                                                                                // 1119\n\t\t\t// code below allows backward compatibility with old arg order.                                                     // 1120\n\t\t\tif (typeof lines === 'number') {                                                                                    // 1121\n\t\t\t\ttmp = y;                                                                                                           // 1122\n\t\t\t\ty = x;                                                                                                             // 1123\n\t\t\t\tx = lines;                                                                                                         // 1124\n\t\t\t\tlines = tmp;                                                                                                       // 1125\n\t\t\t}                                                                                                                   // 1126\n                                                                                                                       // 1127\n\t\t\tscale = scale || [1, 1];                                                                                            // 1128\n                                                                                                                       // 1129\n\t\t\t// starting point                                                                                                   // 1130\n\t\t\tout(f3(x * k) + ' ' + f3((pageHeight - y) * k) + ' m ');                                                            // 1131\n                                                                                                                       // 1132\n\t\t\tscalex = scale[0];                                                                                                  // 1133\n\t\t\tscaley = scale[1];                                                                                                  // 1134\n\t\t\tl = lines.length;                                                                                                   // 1135\n\t\t\t//, x2, y2 // bezier only. In page default measurement \"units\", *after* scaling                                     // 1136\n\t\t\t//, x3, y3 // bezier only. In page default measurement \"units\", *after* scaling                                     // 1137\n\t\t\t// ending point for all, lines and bezier. . In page default measurement \"units\", *after* scaling                   // 1138\n\t\t\tx4 = x; // last / ending point = starting point for first item.                                                     // 1139\n\t\t\ty4 = y; // last / ending point = starting point for first item.                                                     // 1140\n                                                                                                                       // 1141\n\t\t\tfor (i = 0; i < l; i++) {                                                                                           // 1142\n\t\t\t\tleg = lines[i];                                                                                                    // 1143\n\t\t\t\tif (leg.length === 2) {                                                                                            // 1144\n\t\t\t\t\t// simple line                                                                                                    // 1145\n\t\t\t\t\tx4 = leg[0] * scalex + x4; // here last x4 was prior ending point                                                 // 1146\n\t\t\t\t\ty4 = leg[1] * scaley + y4; // here last y4 was prior ending point                                                 // 1147\n\t\t\t\t\tout(f3(x4 * k) + ' ' + f3((pageHeight - y4) * k) + ' l');                                                         // 1148\n\t\t\t\t} else {                                                                                                           // 1149\n\t\t\t\t\t// bezier curve                                                                                                   // 1150\n\t\t\t\t\tx2 = leg[0] * scalex + x4; // here last x4 is prior ending point                                                  // 1151\n\t\t\t\t\ty2 = leg[1] * scaley + y4; // here last y4 is prior ending point                                                  // 1152\n\t\t\t\t\tx3 = leg[2] * scalex + x4; // here last x4 is prior ending point                                                  // 1153\n\t\t\t\t\ty3 = leg[3] * scaley + y4; // here last y4 is prior ending point                                                  // 1154\n\t\t\t\t\tx4 = leg[4] * scalex + x4; // here last x4 was prior ending point                                                 // 1155\n\t\t\t\t\ty4 = leg[5] * scaley + y4; // here last y4 was prior ending point                                                 // 1156\n\t\t\t\t\tout(                                                                                                              // 1157\n\t\t\t\t\t\tf3(x2 * k) + ' ' +                                                                                               // 1158\n\t\t\t\t\t\tf3((pageHeight - y2) * k) + ' ' +                                                                                // 1159\n\t\t\t\t\t\tf3(x3 * k) + ' ' +                                                                                               // 1160\n\t\t\t\t\t\tf3((pageHeight - y3) * k) + ' ' +                                                                                // 1161\n\t\t\t\t\t\tf3(x4 * k) + ' ' +                                                                                               // 1162\n\t\t\t\t\t\tf3((pageHeight - y4) * k) + ' c');                                                                               // 1163\n\t\t\t\t}                                                                                                                  // 1164\n\t\t\t}                                                                                                                   // 1165\n                                                                                                                       // 1166\n\t\t\tif (closed) {                                                                                                       // 1167\n\t\t\t\tout(' h');                                                                                                         // 1168\n\t\t\t}                                                                                                                   // 1169\n                                                                                                                       // 1170\n\t\t\t// stroking / filling / both the path                                                                               // 1171\n\t\t\tif (style !== null) {                                                                                               // 1172\n\t\t\t\tout(getStyle(style));                                                                                              // 1173\n\t\t\t}                                                                                                                   // 1174\n\t\t\treturn this;                                                                                                        // 1175\n\t\t};                                                                                                                   // 1176\n                                                                                                                       // 1177\n\t\t/**                                                                                                                  // 1178\n\t\t * Adds a rectangle to PDF                                                                                           // 1179\n\t\t *                                                                                                                   // 1180\n\t\t * @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page       // 1181\n\t\t * @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page      // 1182\n\t\t * @param {Number} w Width (in units declared at inception of PDF document)                                          // 1183\n\t\t * @param {Number} h Height (in units declared at inception of PDF document)                                         // 1184\n\t\t * @param {String} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n\t\t * @function                                                                                                         // 1186\n\t\t * @returns {jsPDF}                                                                                                  // 1187\n\t\t * @methodOf jsPDF#                                                                                                  // 1188\n\t\t * @name rect                                                                                                        // 1189\n\t\t */                                                                                                                  // 1190\n\t\tAPI.rect = function(x, y, w, h, style) {                                                                             // 1191\n\t\t\tvar op = getStyle(style);                                                                                           // 1192\n\t\t\tout([                                                                                                               // 1193\n\t\t\t\t\tf2(x * k),                                                                                                        // 1194\n\t\t\t\t\tf2((pageHeight - y) * k),                                                                                         // 1195\n\t\t\t\t\tf2(w * k),                                                                                                        // 1196\n\t\t\t\t\tf2(-h * k),                                                                                                       // 1197\n\t\t\t\t\t're'                                                                                                              // 1198\n\t\t\t\t].join(' '));                                                                                                      // 1199\n                                                                                                                       // 1200\n\t\t\tif (style !== null) {                                                                                               // 1201\n\t\t\t\tout(getStyle(style));                                                                                              // 1202\n\t\t\t}                                                                                                                   // 1203\n                                                                                                                       // 1204\n\t\t\treturn this;                                                                                                        // 1205\n\t\t};                                                                                                                   // 1206\n                                                                                                                       // 1207\n\t\t/**                                                                                                                  // 1208\n\t\t * Adds a triangle to PDF                                                                                            // 1209\n\t\t *                                                                                                                   // 1210\n\t\t * @param {Number} x1 Coordinate (in units declared at inception of PDF document) against left edge of the page      // 1211\n\t\t * @param {Number} y1 Coordinate (in units declared at inception of PDF document) against upper edge of the page     // 1212\n\t\t * @param {Number} x2 Coordinate (in units declared at inception of PDF document) against left edge of the page      // 1213\n\t\t * @param {Number} y2 Coordinate (in units declared at inception of PDF document) against upper edge of the page     // 1214\n\t\t * @param {Number} x3 Coordinate (in units declared at inception of PDF document) against left edge of the page      // 1215\n\t\t * @param {Number} y3 Coordinate (in units declared at inception of PDF document) against upper edge of the page     // 1216\n\t\t * @param {String} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n\t\t * @function                                                                                                         // 1218\n\t\t * @returns {jsPDF}                                                                                                  // 1219\n\t\t * @methodOf jsPDF#                                                                                                  // 1220\n\t\t * @name triangle                                                                                                    // 1221\n\t\t */                                                                                                                  // 1222\n\t\tAPI.triangle = function(x1, y1, x2, y2, x3, y3, style) {                                                             // 1223\n\t\t\tthis.lines(                                                                                                         // 1224\n\t\t\t\t[                                                                                                                  // 1225\n\t\t\t\t\t[x2 - x1, y2 - y1], // vector to point 2                                                                          // 1226\n\t\t\t\t\t[x3 - x2, y3 - y2], // vector to point 3                                                                          // 1227\n\t\t\t\t\t[x1 - x3, y1 - y3]// closing vector back to point 1                                                               // 1228\n\t\t\t\t],                                                                                                                 // 1229\n\t\t\t\tx1,                                                                                                                // 1230\n\t\t\t\ty1, // start of path                                                                                               // 1231\n\t\t\t\t[1, 1],                                                                                                            // 1232\n\t\t\t\tstyle,                                                                                                             // 1233\n\t\t\t\ttrue);                                                                                                             // 1234\n\t\t\treturn this;                                                                                                        // 1235\n\t\t};                                                                                                                   // 1236\n                                                                                                                       // 1237\n\t\t/**                                                                                                                  // 1238\n\t\t * Adds a rectangle with rounded corners to PDF                                                                      // 1239\n\t\t *                                                                                                                   // 1240\n\t\t * @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page       // 1241\n\t\t * @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page      // 1242\n\t\t * @param {Number} w Width (in units declared at inception of PDF document)                                          // 1243\n\t\t * @param {Number} h Height (in units declared at inception of PDF document)                                         // 1244\n\t\t * @param {Number} rx Radius along x axis (in units declared at inception of PDF document)                           // 1245\n\t\t * @param {Number} rx Radius along y axis (in units declared at inception of PDF document)                           // 1246\n\t\t * @param {String} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n\t\t * @function                                                                                                         // 1248\n\t\t * @returns {jsPDF}                                                                                                  // 1249\n\t\t * @methodOf jsPDF#                                                                                                  // 1250\n\t\t * @name roundedRect                                                                                                 // 1251\n\t\t */                                                                                                                  // 1252\n\t\tAPI.roundedRect = function(x, y, w, h, rx, ry, style) {                                                              // 1253\n\t\t\tvar MyArc = 4 / 3 * (Math.SQRT2 - 1);                                                                               // 1254\n\t\t\tthis.lines(                                                                                                         // 1255\n\t\t\t\t[                                                                                                                  // 1256\n\t\t\t\t\t[(w - 2 * rx), 0],                                                                                                // 1257\n\t\t\t\t\t[(rx * MyArc), 0, rx, ry - (ry * MyArc), rx, ry],                                                                 // 1258\n\t\t\t\t\t[0, (h - 2 * ry)],                                                                                                // 1259\n\t\t\t\t\t[0, (ry * MyArc),  - (rx * MyArc), ry, -rx, ry],                                                                  // 1260\n\t\t\t\t\t[(-w + 2 * rx), 0],                                                                                               // 1261\n\t\t\t\t\t[ - (rx * MyArc), 0, -rx,  - (ry * MyArc), -rx, -ry],                                                             // 1262\n\t\t\t\t\t[0, (-h + 2 * ry)],                                                                                               // 1263\n\t\t\t\t\t[0,  - (ry * MyArc), (rx * MyArc), -ry, rx, -ry]                                                                  // 1264\n\t\t\t\t],                                                                                                                 // 1265\n\t\t\t\tx + rx,                                                                                                            // 1266\n\t\t\t\ty, // start of path                                                                                                // 1267\n\t\t\t\t[1, 1],                                                                                                            // 1268\n\t\t\t\tstyle);                                                                                                            // 1269\n\t\t\treturn this;                                                                                                        // 1270\n\t\t};                                                                                                                   // 1271\n                                                                                                                       // 1272\n\t\t/**                                                                                                                  // 1273\n\t\t * Adds an ellipse to PDF                                                                                            // 1274\n\t\t *                                                                                                                   // 1275\n\t\t * @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page       // 1276\n\t\t * @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page      // 1277\n\t\t * @param {Number} rx Radius along x axis (in units declared at inception of PDF document)                           // 1278\n\t\t * @param {Number} rx Radius along y axis (in units declared at inception of PDF document)                           // 1279\n\t\t * @param {String} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n\t\t * @function                                                                                                         // 1281\n\t\t * @returns {jsPDF}                                                                                                  // 1282\n\t\t * @methodOf jsPDF#                                                                                                  // 1283\n\t\t * @name ellipse                                                                                                     // 1284\n\t\t */                                                                                                                  // 1285\n\t\tAPI.ellipse = function(x, y, rx, ry, style) {                                                                        // 1286\n\t\t\tvar lx = 4 / 3 * (Math.SQRT2 - 1) * rx,                                                                             // 1287\n\t\t\t\tly = 4 / 3 * (Math.SQRT2 - 1) * ry;                                                                                // 1288\n                                                                                                                       // 1289\n\t\t\tout([                                                                                                               // 1290\n\t\t\t\t\tf2((x + rx) * k),                                                                                                 // 1291\n\t\t\t\t\tf2((pageHeight - y) * k),                                                                                         // 1292\n\t\t\t\t\t'm',                                                                                                              // 1293\n\t\t\t\t\tf2((x + rx) * k),                                                                                                 // 1294\n\t\t\t\t\tf2((pageHeight - (y - ly)) * k),                                                                                  // 1295\n\t\t\t\t\tf2((x + lx) * k),                                                                                                 // 1296\n\t\t\t\t\tf2((pageHeight - (y - ry)) * k),                                                                                  // 1297\n\t\t\t\t\tf2(x * k),                                                                                                        // 1298\n\t\t\t\t\tf2((pageHeight - (y - ry)) * k),                                                                                  // 1299\n\t\t\t\t\t'c'                                                                                                               // 1300\n\t\t\t\t].join(' '));                                                                                                      // 1301\n\t\t\tout([                                                                                                               // 1302\n\t\t\t\t\tf2((x - lx) * k),                                                                                                 // 1303\n\t\t\t\t\tf2((pageHeight - (y - ry)) * k),                                                                                  // 1304\n\t\t\t\t\tf2((x - rx) * k),                                                                                                 // 1305\n\t\t\t\t\tf2((pageHeight - (y - ly)) * k),                                                                                  // 1306\n\t\t\t\t\tf2((x - rx) * k),                                                                                                 // 1307\n\t\t\t\t\tf2((pageHeight - y) * k),                                                                                         // 1308\n\t\t\t\t\t'c'                                                                                                               // 1309\n\t\t\t\t].join(' '));                                                                                                      // 1310\n\t\t\tout([                                                                                                               // 1311\n\t\t\t\t\tf2((x - rx) * k),                                                                                                 // 1312\n\t\t\t\t\tf2((pageHeight - (y + ly)) * k),                                                                                  // 1313\n\t\t\t\t\tf2((x - lx) * k),                                                                                                 // 1314\n\t\t\t\t\tf2((pageHeight - (y + ry)) * k),                                                                                  // 1315\n\t\t\t\t\tf2(x * k),                                                                                                        // 1316\n\t\t\t\t\tf2((pageHeight - (y + ry)) * k),                                                                                  // 1317\n\t\t\t\t\t'c'                                                                                                               // 1318\n\t\t\t\t].join(' '));                                                                                                      // 1319\n\t\t\tout([                                                                                                               // 1320\n\t\t\t\t\tf2((x + lx) * k),                                                                                                 // 1321\n\t\t\t\t\tf2((pageHeight - (y + ry)) * k),                                                                                  // 1322\n\t\t\t\t\tf2((x + rx) * k),                                                                                                 // 1323\n\t\t\t\t\tf2((pageHeight - (y + ly)) * k),                                                                                  // 1324\n\t\t\t\t\tf2((x + rx) * k),                                                                                                 // 1325\n\t\t\t\t\tf2((pageHeight - y) * k),                                                                                         // 1326\n\t\t\t\t\t'c'                                                                                                               // 1327\n\t\t\t\t].join(' '));                                                                                                      // 1328\n                                                                                                                       // 1329\n\t\t\tif (style !== null) {                                                                                               // 1330\n\t\t\t\tout(getStyle(style));                                                                                              // 1331\n\t\t\t}                                                                                                                   // 1332\n                                                                                                                       // 1333\n\t\t\treturn this;                                                                                                        // 1334\n\t\t};                                                                                                                   // 1335\n                                                                                                                       // 1336\n\t\t/**                                                                                                                  // 1337\n\t\t * Adds an circle to PDF                                                                                             // 1338\n\t\t *                                                                                                                   // 1339\n\t\t * @param {Number} x Coordinate (in units declared at inception of PDF document) against left edge of the page       // 1340\n\t\t * @param {Number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page      // 1341\n\t\t * @param {Number} r Radius (in units declared at inception of PDF document)                                         // 1342\n\t\t * @param {String} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n\t\t * @function                                                                                                         // 1344\n\t\t * @returns {jsPDF}                                                                                                  // 1345\n\t\t * @methodOf jsPDF#                                                                                                  // 1346\n\t\t * @name circle                                                                                                      // 1347\n\t\t */                                                                                                                  // 1348\n\t\tAPI.circle = function(x, y, r, style) {                                                                              // 1349\n\t\t\treturn this.ellipse(x, y, r, r, style);                                                                             // 1350\n\t\t};                                                                                                                   // 1351\n                                                                                                                       // 1352\n\t\t/**                                                                                                                  // 1353\n\t\t * Adds a properties to the PDF document                                                                             // 1354\n\t\t *                                                                                                                   // 1355\n\t\t * @param {Object} A property_name-to-property_value object structure.                                               // 1356\n\t\t * @function                                                                                                         // 1357\n\t\t * @returns {jsPDF}                                                                                                  // 1358\n\t\t * @methodOf jsPDF#                                                                                                  // 1359\n\t\t * @name setProperties                                                                                               // 1360\n\t\t */                                                                                                                  // 1361\n\t\tAPI.setProperties = function(properties) {                                                                           // 1362\n\t\t\t// copying only those properties we can render.                                                                     // 1363\n\t\t\tfor (var property in documentProperties) {                                                                          // 1364\n\t\t\t\tif (documentProperties.hasOwnProperty(property) && properties[property]) {                                         // 1365\n\t\t\t\t\tdocumentProperties[property] = properties[property];                                                              // 1366\n\t\t\t\t}                                                                                                                  // 1367\n\t\t\t}                                                                                                                   // 1368\n\t\t\treturn this;                                                                                                        // 1369\n\t\t};                                                                                                                   // 1370\n                                                                                                                       // 1371\n\t\t/**                                                                                                                  // 1372\n\t\t * Sets font size for upcoming text elements.                                                                        // 1373\n\t\t *                                                                                                                   // 1374\n\t\t * @param {Number} size Font size in points.                                                                         // 1375\n\t\t * @function                                                                                                         // 1376\n\t\t * @returns {jsPDF}                                                                                                  // 1377\n\t\t * @methodOf jsPDF#                                                                                                  // 1378\n\t\t * @name setFontSize                                                                                                 // 1379\n\t\t */                                                                                                                  // 1380\n\t\tAPI.setFontSize = function(size) {                                                                                   // 1381\n\t\t\tactiveFontSize = size;                                                                                              // 1382\n\t\t\treturn this;                                                                                                        // 1383\n\t\t};                                                                                                                   // 1384\n                                                                                                                       // 1385\n\t\t/**                                                                                                                  // 1386\n\t\t * Sets text font face, variant for upcoming text elements.                                                          // 1387\n\t\t * See output of jsPDF.getFontList() for possible font names, styles.                                                // 1388\n\t\t *                                                                                                                   // 1389\n\t\t * @param {String} fontName Font name or family. Example: \"times\"                                                    // 1390\n\t\t * @param {String} fontStyle Font style or variant. Example: \"italic\"                                                // 1391\n\t\t * @function                                                                                                         // 1392\n\t\t * @returns {jsPDF}                                                                                                  // 1393\n\t\t * @methodOf jsPDF#                                                                                                  // 1394\n\t\t * @name setFont                                                                                                     // 1395\n\t\t */                                                                                                                  // 1396\n\t\tAPI.setFont = function(fontName, fontStyle) {                                                                        // 1397\n\t\t\tactiveFontKey = getFont(fontName, fontStyle);                                                                       // 1398\n\t\t\t// if font is not found, the above line blows up and we never go further                                            // 1399\n\t\t\treturn this;                                                                                                        // 1400\n\t\t};                                                                                                                   // 1401\n                                                                                                                       // 1402\n\t\t/**                                                                                                                  // 1403\n\t\t * Switches font style or variant for upcoming text elements,                                                        // 1404\n\t\t * while keeping the font face or family same.                                                                       // 1405\n\t\t * See output of jsPDF.getFontList() for possible font names, styles.                                                // 1406\n\t\t *                                                                                                                   // 1407\n\t\t * @param {String} style Font style or variant. Example: \"italic\"                                                    // 1408\n\t\t * @function                                                                                                         // 1409\n\t\t * @returns {jsPDF}                                                                                                  // 1410\n\t\t * @methodOf jsPDF#                                                                                                  // 1411\n\t\t * @name setFontStyle                                                                                                // 1412\n\t\t */                                                                                                                  // 1413\n\t\tAPI.setFontStyle = API.setFontType = function(style) {                                                               // 1414\n\t\t\tactiveFontKey = getFont(undefined, style);                                                                          // 1415\n\t\t\t// if font is not found, the above line blows up and we never go further                                            // 1416\n\t\t\treturn this;                                                                                                        // 1417\n\t\t};                                                                                                                   // 1418\n                                                                                                                       // 1419\n\t\t/**                                                                                                                  // 1420\n\t\t * Returns an object - a tree of fontName to fontStyle relationships available to                                    // 1421\n\t\t * active PDF document.                                                                                              // 1422\n\t\t *                                                                                                                   // 1423\n\t\t * @public                                                                                                           // 1424\n\t\t * @function                                                                                                         // 1425\n\t\t * @returns {Object} Like {'times':['normal', 'italic', ... ], 'arial':['normal', 'bold', ... ], ... }               // 1426\n\t\t * @methodOf jsPDF#                                                                                                  // 1427\n\t\t * @name getFontList                                                                                                 // 1428\n\t\t */                                                                                                                  // 1429\n\t\tAPI.getFontList = function() {                                                                                       // 1430\n\t\t\t// TODO: iterate over fonts array or return copy of fontmap instead in case more are ever added.                    // 1431\n\t\t\tvar list = {},fontName,fontStyle,tmp;                                                                               // 1432\n                                                                                                                       // 1433\n\t\t\tfor (fontName in fontmap) {                                                                                         // 1434\n\t\t\t\tif (fontmap.hasOwnProperty(fontName)) {                                                                            // 1435\n\t\t\t\t\tlist[fontName] = tmp = [];                                                                                        // 1436\n\t\t\t\t\tfor (fontStyle in fontmap[fontName]) {                                                                            // 1437\n\t\t\t\t\t\tif (fontmap[fontName].hasOwnProperty(fontStyle)) {                                                               // 1438\n\t\t\t\t\t\t\ttmp.push(fontStyle);                                                                                            // 1439\n\t\t\t\t\t\t}                                                                                                                // 1440\n\t\t\t\t\t}                                                                                                                 // 1441\n\t\t\t\t}                                                                                                                  // 1442\n\t\t\t}                                                                                                                   // 1443\n                                                                                                                       // 1444\n\t\t\treturn list;                                                                                                        // 1445\n\t\t};                                                                                                                   // 1446\n                                                                                                                       // 1447\n\t\t/**                                                                                                                  // 1448\n\t\t * Sets line width for upcoming lines.                                                                               // 1449\n\t\t *                                                                                                                   // 1450\n\t\t * @param {Number} width Line width (in units declared at inception of PDF document)                                 // 1451\n\t\t * @function                                                                                                         // 1452\n\t\t * @returns {jsPDF}                                                                                                  // 1453\n\t\t * @methodOf jsPDF#                                                                                                  // 1454\n\t\t * @name setLineWidth                                                                                                // 1455\n\t\t */                                                                                                                  // 1456\n\t\tAPI.setLineWidth = function(width) {                                                                                 // 1457\n\t\t\tout((width * k).toFixed(2) + ' w');                                                                                 // 1458\n\t\t\treturn this;                                                                                                        // 1459\n\t\t};                                                                                                                   // 1460\n                                                                                                                       // 1461\n\t\t/**                                                                                                                  // 1462\n\t\t * Sets the stroke color for upcoming elements.                                                                      // 1463\n\t\t *                                                                                                                   // 1464\n\t\t * Depending on the number of arguments given, Gray, RGB, or CMYK                                                    // 1465\n\t\t * color space is implied.                                                                                           // 1466\n\t\t *                                                                                                                   // 1467\n\t\t * When only ch1 is given, \"Gray\" color space is implied and it                                                      // 1468\n\t\t * must be a value in the range from 0.00 (solid black) to to 1.00 (white)                                           // 1469\n\t\t * if values are communicated as String types, or in range from 0 (black)                                            // 1470\n\t\t * to 255 (white) if communicated as Number type.                                                                    // 1471\n\t\t * The RGB-like 0-255 range is provided for backward compatibility.                                                  // 1472\n\t\t *                                                                                                                   // 1473\n\t\t * When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each                                            // 1474\n\t\t * value must be in the range from 0.00 (minimum intensity) to to 1.00                                               // 1475\n\t\t * (max intensity) if values are communicated as String types, or                                                    // 1476\n\t\t * from 0 (min intensity) to to 255 (max intensity) if values are communicated                                       // 1477\n\t\t * as Number types.                                                                                                  // 1478\n\t\t * The RGB-like 0-255 range is provided for backward compatibility.                                                  // 1479\n\t\t *                                                                                                                   // 1480\n\t\t * When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each                                            // 1481\n\t\t * value must be a in the range from 0.00 (0% concentration) to to                                                   // 1482\n\t\t * 1.00 (100% concentration)                                                                                         // 1483\n\t\t *                                                                                                                   // 1484\n\t\t * Because JavaScript treats fixed point numbers badly (rounds to                                                    // 1485\n\t\t * floating point nearest to binary representation) it is highly advised to                                          // 1486\n\t\t * communicate the fractional numbers as String types, not JavaScript Number type.                                   // 1487\n\t\t *                                                                                                                   // 1488\n\t\t * @param {Number|String} ch1 Color channel value                                                                    // 1489\n\t\t * @param {Number|String} ch2 Color channel value                                                                    // 1490\n\t\t * @param {Number|String} ch3 Color channel value                                                                    // 1491\n\t\t * @param {Number|String} ch4 Color channel value                                                                    // 1492\n\t\t *                                                                                                                   // 1493\n\t\t * @function                                                                                                         // 1494\n\t\t * @returns {jsPDF}                                                                                                  // 1495\n\t\t * @methodOf jsPDF#                                                                                                  // 1496\n\t\t * @name setDrawColor                                                                                                // 1497\n\t\t */                                                                                                                  // 1498\n\t\tAPI.setDrawColor = function(ch1, ch2, ch3, ch4) {                                                                    // 1499\n\t\t\tvar color;                                                                                                          // 1500\n\t\t\tif (ch2 === undefined || (ch4 === undefined && ch1 === ch2 === ch3)) {                                              // 1501\n\t\t\t\t// Gray color space.                                                                                               // 1502\n\t\t\t\tif (typeof ch1 === 'string') {                                                                                     // 1503\n\t\t\t\t\tcolor = ch1 + ' G';                                                                                               // 1504\n\t\t\t\t} else {                                                                                                           // 1505\n\t\t\t\t\tcolor = f2(ch1 / 255) + ' G';                                                                                     // 1506\n\t\t\t\t}                                                                                                                  // 1507\n\t\t\t} else if (ch4 === undefined) {                                                                                     // 1508\n\t\t\t\t// RGB                                                                                                             // 1509\n\t\t\t\tif (typeof ch1 === 'string') {                                                                                     // 1510\n\t\t\t\t\tcolor = [ch1, ch2, ch3, 'RG'].join(' ');                                                                          // 1511\n\t\t\t\t} else {                                                                                                           // 1512\n\t\t\t\t\tcolor = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), 'RG'].join(' ');                                            // 1513\n\t\t\t\t}                                                                                                                  // 1514\n\t\t\t} else {                                                                                                            // 1515\n\t\t\t\t// CMYK                                                                                                            // 1516\n\t\t\t\tif (typeof ch1 === 'string') {                                                                                     // 1517\n\t\t\t\t\tcolor = [ch1, ch2, ch3, ch4, 'K'].join(' ');                                                                      // 1518\n\t\t\t\t} else {                                                                                                           // 1519\n\t\t\t\t\tcolor = [f2(ch1), f2(ch2), f2(ch3), f2(ch4), 'K'].join(' ');                                                      // 1520\n\t\t\t\t}                                                                                                                  // 1521\n\t\t\t}                                                                                                                   // 1522\n                                                                                                                       // 1523\n\t\t\tout(color);                                                                                                         // 1524\n\t\t\treturn this;                                                                                                        // 1525\n\t\t};                                                                                                                   // 1526\n                                                                                                                       // 1527\n\t\t/**                                                                                                                  // 1528\n\t\t * Sets the fill color for upcoming elements.                                                                        // 1529\n\t\t *                                                                                                                   // 1530\n\t\t * Depending on the number of arguments given, Gray, RGB, or CMYK                                                    // 1531\n\t\t * color space is implied.                                                                                           // 1532\n\t\t *                                                                                                                   // 1533\n\t\t * When only ch1 is given, \"Gray\" color space is implied and it                                                      // 1534\n\t\t * must be a value in the range from 0.00 (solid black) to to 1.00 (white)                                           // 1535\n\t\t * if values are communicated as String types, or in range from 0 (black)                                            // 1536\n\t\t * to 255 (white) if communicated as Number type.                                                                    // 1537\n\t\t * The RGB-like 0-255 range is provided for backward compatibility.                                                  // 1538\n\t\t *                                                                                                                   // 1539\n\t\t * When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each                                            // 1540\n\t\t * value must be in the range from 0.00 (minimum intensity) to to 1.00                                               // 1541\n\t\t * (max intensity) if values are communicated as String types, or                                                    // 1542\n\t\t * from 0 (min intensity) to to 255 (max intensity) if values are communicated                                       // 1543\n\t\t * as Number types.                                                                                                  // 1544\n\t\t * The RGB-like 0-255 range is provided for backward compatibility.                                                  // 1545\n\t\t *                                                                                                                   // 1546\n\t\t * When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each                                            // 1547\n\t\t * value must be a in the range from 0.00 (0% concentration) to to                                                   // 1548\n\t\t * 1.00 (100% concentration)                                                                                         // 1549\n\t\t *                                                                                                                   // 1550\n\t\t * Because JavaScript treats fixed point numbers badly (rounds to                                                    // 1551\n\t\t * floating point nearest to binary representation) it is highly advised to                                          // 1552\n\t\t * communicate the fractional numbers as String types, not JavaScript Number type.                                   // 1553\n\t\t *                                                                                                                   // 1554\n\t\t * @param {Number|String} ch1 Color channel value                                                                    // 1555\n\t\t * @param {Number|String} ch2 Color channel value                                                                    // 1556\n\t\t * @param {Number|String} ch3 Color channel value                                                                    // 1557\n\t\t * @param {Number|String} ch4 Color channel value                                                                    // 1558\n\t\t *                                                                                                                   // 1559\n\t\t * @function                                                                                                         // 1560\n\t\t * @returns {jsPDF}                                                                                                  // 1561\n\t\t * @methodOf jsPDF#                                                                                                  // 1562\n\t\t * @name setFillColor                                                                                                // 1563\n\t\t */                                                                                                                  // 1564\n\t\tAPI.setFillColor = function(ch1, ch2, ch3, ch4) {                                                                    // 1565\n\t\t\tvar color;                                                                                                          // 1566\n                                                                                                                       // 1567\n\t\t\tif (ch2 === undefined || (ch4 === undefined && ch1 === ch2 === ch3)) {                                              // 1568\n\t\t\t\t// Gray color space.                                                                                               // 1569\n\t\t\t\tif (typeof ch1 === 'string') {                                                                                     // 1570\n\t\t\t\t\tcolor = ch1 + ' g';                                                                                               // 1571\n\t\t\t\t} else {                                                                                                           // 1572\n\t\t\t\t\tcolor = f2(ch1 / 255) + ' g';                                                                                     // 1573\n\t\t\t\t}                                                                                                                  // 1574\n\t\t\t} else if (ch4 === undefined) {                                                                                     // 1575\n\t\t\t\t// RGB                                                                                                             // 1576\n\t\t\t\tif (typeof ch1 === 'string') {                                                                                     // 1577\n\t\t\t\t\tcolor = [ch1, ch2, ch3, 'rg'].join(' ');                                                                          // 1578\n\t\t\t\t} else {                                                                                                           // 1579\n\t\t\t\t\tcolor = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), 'rg'].join(' ');                                            // 1580\n\t\t\t\t}                                                                                                                  // 1581\n\t\t\t} else {                                                                                                            // 1582\n\t\t\t\t// CMYK                                                                                                            // 1583\n\t\t\t\tif (typeof ch1 === 'string') {                                                                                     // 1584\n\t\t\t\t\tcolor = [ch1, ch2, ch3, ch4, 'k'].join(' ');                                                                      // 1585\n\t\t\t\t} else {                                                                                                           // 1586\n\t\t\t\t\tcolor = [f2(ch1), f2(ch2), f2(ch3), f2(ch4), 'k'].join(' ');                                                      // 1587\n\t\t\t\t}                                                                                                                  // 1588\n\t\t\t}                                                                                                                   // 1589\n                                                                                                                       // 1590\n\t\t\tout(color);                                                                                                         // 1591\n\t\t\treturn this;                                                                                                        // 1592\n\t\t};                                                                                                                   // 1593\n                                                                                                                       // 1594\n\t\t/**                                                                                                                  // 1595\n\t\t * Sets the text color for upcoming elements.                                                                        // 1596\n\t\t * If only one, first argument is given,                                                                             // 1597\n\t\t * treats the value as gray-scale color value.                                                                       // 1598\n\t\t *                                                                                                                   // 1599\n\t\t * @param {Number} r Red channel color value in range 0-255 or {String} r color value in hexadecimal, example: '#FFFFFF'\n\t\t * @param {Number} g Green channel color value in range 0-255                                                        // 1601\n\t\t * @param {Number} b Blue channel color value in range 0-255                                                         // 1602\n\t\t * @function                                                                                                         // 1603\n\t\t * @returns {jsPDF}                                                                                                  // 1604\n\t\t * @methodOf jsPDF#                                                                                                  // 1605\n\t\t * @name setTextColor                                                                                                // 1606\n\t\t */                                                                                                                  // 1607\n\t\tAPI.setTextColor = function(r, g, b) {                                                                               // 1608\n\t\t\tif ((typeof r === 'string') && /^#[0-9A-Fa-f]{6}$/.test(r)) {                                                       // 1609\n\t\t\t\tvar hex = parseInt(r.substr(1), 16);                                                                               // 1610\n\t\t\t\tr = (hex >> 16) & 255;                                                                                             // 1611\n\t\t\t\tg = (hex >> 8) & 255;                                                                                              // 1612\n\t\t\t\tb = (hex & 255);                                                                                                   // 1613\n\t\t\t}                                                                                                                   // 1614\n                                                                                                                       // 1615\n\t\t\tif ((r === 0 && g === 0 && b === 0) || (typeof g === 'undefined')) {                                                // 1616\n\t\t\t\ttextColor = f3(r / 255) + ' g';                                                                                    // 1617\n\t\t\t} else {                                                                                                            // 1618\n\t\t\t\ttextColor = [f3(r / 255), f3(g / 255), f3(b / 255), 'rg'].join(' ');                                               // 1619\n\t\t\t}                                                                                                                   // 1620\n\t\t\treturn this;                                                                                                        // 1621\n\t\t};                                                                                                                   // 1622\n                                                                                                                       // 1623\n\t\t/**                                                                                                                  // 1624\n\t\t * Is an Object providing a mapping from human-readable to                                                           // 1625\n\t\t * integer flag values designating the varieties of line cap                                                         // 1626\n\t\t * and join styles.                                                                                                  // 1627\n\t\t *                                                                                                                   // 1628\n\t\t * @returns {Object}                                                                                                 // 1629\n\t\t * @fieldOf jsPDF#                                                                                                   // 1630\n\t\t * @name CapJoinStyles                                                                                               // 1631\n\t\t */                                                                                                                  // 1632\n\t\tAPI.CapJoinStyles = {                                                                                                // 1633\n\t\t\t0 : 0,                                                                                                              // 1634\n\t\t\t'butt' : 0,                                                                                                         // 1635\n\t\t\t'but' : 0,                                                                                                          // 1636\n\t\t\t'miter' : 0,                                                                                                        // 1637\n\t\t\t1 : 1,                                                                                                              // 1638\n\t\t\t'round' : 1,                                                                                                        // 1639\n\t\t\t'rounded' : 1,                                                                                                      // 1640\n\t\t\t'circle' : 1,                                                                                                       // 1641\n\t\t\t2 : 2,                                                                                                              // 1642\n\t\t\t'projecting' : 2,                                                                                                   // 1643\n\t\t\t'project' : 2,                                                                                                      // 1644\n\t\t\t'square' : 2,                                                                                                       // 1645\n\t\t\t'bevel' : 2                                                                                                         // 1646\n\t\t};                                                                                                                   // 1647\n                                                                                                                       // 1648\n\t\t/**                                                                                                                  // 1649\n\t\t * Sets the line cap styles                                                                                          // 1650\n\t\t * See {jsPDF.CapJoinStyles} for variants                                                                            // 1651\n\t\t *                                                                                                                   // 1652\n\t\t * @param {String|Number} style A string or number identifying the type of line cap                                  // 1653\n\t\t * @function                                                                                                         // 1654\n\t\t * @returns {jsPDF}                                                                                                  // 1655\n\t\t * @methodOf jsPDF#                                                                                                  // 1656\n\t\t * @name setLineCap                                                                                                  // 1657\n\t\t */                                                                                                                  // 1658\n\t\tAPI.setLineCap = function(style) {                                                                                   // 1659\n\t\t\tvar id = this.CapJoinStyles[style];                                                                                 // 1660\n\t\t\tif (id === undefined) {                                                                                             // 1661\n\t\t\t\tthrow new Error(\"Line cap style of '\" + style + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n\t\t\t}                                                                                                                   // 1663\n\t\t\tlineCapID = id;                                                                                                     // 1664\n\t\t\tout(id + ' J');                                                                                                     // 1665\n                                                                                                                       // 1666\n\t\t\treturn this;                                                                                                        // 1667\n\t\t};                                                                                                                   // 1668\n                                                                                                                       // 1669\n\t\t/**                                                                                                                  // 1670\n\t\t * Sets the line join styles                                                                                         // 1671\n\t\t * See {jsPDF.CapJoinStyles} for variants                                                                            // 1672\n\t\t *                                                                                                                   // 1673\n\t\t * @param {String|Number} style A string or number identifying the type of line join                                 // 1674\n\t\t * @function                                                                                                         // 1675\n\t\t * @returns {jsPDF}                                                                                                  // 1676\n\t\t * @methodOf jsPDF#                                                                                                  // 1677\n\t\t * @name setLineJoin                                                                                                 // 1678\n\t\t */                                                                                                                  // 1679\n\t\tAPI.setLineJoin = function(style) {                                                                                  // 1680\n\t\t\tvar id = this.CapJoinStyles[style];                                                                                 // 1681\n\t\t\tif (id === undefined) {                                                                                             // 1682\n\t\t\t\tthrow new Error(\"Line join style of '\" + style + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n\t\t\t}                                                                                                                   // 1684\n\t\t\tlineJoinID = id;                                                                                                    // 1685\n\t\t\tout(id + ' j');                                                                                                     // 1686\n                                                                                                                       // 1687\n\t\t\treturn this;                                                                                                        // 1688\n\t\t};                                                                                                                   // 1689\n                                                                                                                       // 1690\n\t\t// Output is both an internal (for plugins) and external function                                                    // 1691\n\t\tAPI.output = output;                                                                                                 // 1692\n                                                                                                                       // 1693\n\t\t/**                                                                                                                  // 1694\n\t\t * Saves as PDF document. An alias of jsPDF.output('save', 'filename.pdf')                                           // 1695\n\t\t * @param  {String} filename The filename including extension.                                                       // 1696\n\t\t *                                                                                                                   // 1697\n\t\t * @function                                                                                                         // 1698\n\t\t * @returns {jsPDF}                                                                                                  // 1699\n\t\t * @methodOf jsPDF#                                                                                                  // 1700\n\t\t * @name save                                                                                                        // 1701\n\t\t */                                                                                                                  // 1702\n\t\tAPI.save = function(filename) {                                                                                      // 1703\n\t\t\tAPI.output('save', filename);                                                                                       // 1704\n\t\t};                                                                                                                   // 1705\n                                                                                                                       // 1706\n\t\t// applying plugins (more methods) ON TOP of built-in API.                                                           // 1707\n\t\t// this is intentional as we allow plugins to override                                                               // 1708\n\t\t// built-ins                                                                                                         // 1709\n\t\tfor (var plugin in jsPDF.API) {                                                                                      // 1710\n\t\t\tif (jsPDF.API.hasOwnProperty(plugin)) {                                                                             // 1711\n\t\t\t\tif (plugin === 'events' && jsPDF.API.events.length) {                                                              // 1712\n\t\t\t\t\t(function(events, newEvents) {                                                                                    // 1713\n                                                                                                                       // 1714\n\t\t\t\t\t\t// jsPDF.API.events is a JS Array of Arrays                                                                      // 1715\n\t\t\t\t\t\t// where each Array is a pair of event name, handler                                                             // 1716\n\t\t\t\t\t\t// Events were added by plugins to the jsPDF instantiator.                                                       // 1717\n\t\t\t\t\t\t// These are always added to the new instance and some ran                                                       // 1718\n\t\t\t\t\t\t// during instantiation.                                                                                         // 1719\n\t\t\t\t\t\tvar eventname,handler_and_args,i;                                                                                // 1720\n                                                                                                                       // 1721\n\t\t\t\t\t\tfor (i = newEvents.length - 1; i !== -1; i--) {                                                                  // 1722\n\t\t\t\t\t\t\t// subscribe takes 3 args: 'topic', function, runonce_flag                                                      // 1723\n\t\t\t\t\t\t\t// if undefined, runonce is false.                                                                              // 1724\n\t\t\t\t\t\t\t// users can attach callback directly,                                                                          // 1725\n\t\t\t\t\t\t\t// or they can attach an array with [callback, runonce_flag]                                                    // 1726\n\t\t\t\t\t\t\t// that's what the \"apply\" magic is for below.                                                                  // 1727\n\t\t\t\t\t\t\teventname = newEvents[i][0];                                                                                    // 1728\n\t\t\t\t\t\t\thandler_and_args = newEvents[i][1];                                                                             // 1729\n\t\t\t\t\t\t\tevents.subscribe.apply(                                                                                         // 1730\n\t\t\t\t\t\t\t\tevents,                                                                                                        // 1731\n\t\t\t\t\t\t\t\t[eventname].concat(                                                                                            // 1732\n\t\t\t\t\t\t\t\t\ttypeof handler_and_args === 'function' ?                                                                      // 1733\n\t\t\t\t\t\t\t\t\t\t[handler_and_args] : handler_and_args));                                                                     // 1734\n\t\t\t\t\t\t}                                                                                                                // 1735\n\t\t\t\t\t}(events, jsPDF.API.events));                                                                                     // 1736\n\t\t\t\t} else {                                                                                                           // 1737\n\t\t\t\t\tAPI[plugin] = jsPDF.API[plugin];                                                                                  // 1738\n\t\t\t\t}                                                                                                                  // 1739\n\t\t\t}                                                                                                                   // 1740\n\t\t}                                                                                                                    // 1741\n                                                                                                                       // 1742\n\t\t//////////////////////////////////////////////////////                                                               // 1743\n\t\t// continuing initialization of jsPDF Document object                                                                // 1744\n\t\t//////////////////////////////////////////////////////                                                               // 1745\n\t\t// Add the first page automatically                                                                                  // 1746\n\t\taddFonts();                                                                                                          // 1747\n\t\tactiveFontKey = 'F1';                                                                                                // 1748\n\t\t_addPage(format, orientation);                                                                                       // 1749\n                                                                                                                       // 1750\n\t\tevents.publish('initialized');                                                                                       // 1751\n\t\treturn API;                                                                                                          // 1752\n\t}                                                                                                                     // 1753\n                                                                                                                       // 1754\n\t/**                                                                                                                   // 1755\n\t * jsPDF.API is a STATIC property of jsPDF class.                                                                     // 1756\n\t * jsPDF.API is an object you can add methods and properties to.                                                      // 1757\n\t * The methods / properties you add will show up in new jsPDF objects.                                                // 1758\n\t *                                                                                                                    // 1759\n\t * One property is prepopulated. It is the 'events' Object. Plugin authors can add topics,                            // 1760\n\t * callbacks to this object. These will be reassigned to all new instances of jsPDF.                                  // 1761\n\t * Examples:                                                                                                          // 1762\n\t * jsPDF.API.events['initialized'] = function(){ 'this' is API object }                                               // 1763\n\t * jsPDF.API.events['addFont'] = function(added_font_object){ 'this' is API object }                                  // 1764\n\t *                                                                                                                    // 1765\n\t * @static                                                                                                            // 1766\n\t * @public                                                                                                            // 1767\n\t * @memberOf jsPDF                                                                                                    // 1768\n\t * @name API                                                                                                          // 1769\n\t *                                                                                                                    // 1770\n\t * @example                                                                                                           // 1771\n\t * jsPDF.API.mymethod = function(){                                                                                   // 1772\n\t *   // 'this' will be ref to internal API object. see jsPDF source                                                   // 1773\n\t *   // , so you can refer to built-in methods like so:                                                               // 1774\n\t *   //     this.line(....)                                                                                           // 1775\n\t *   //     this.text(....)                                                                                           // 1776\n\t * }                                                                                                                  // 1777\n\t * var pdfdoc = new jsPDF()                                                                                           // 1778\n\t * pdfdoc.mymethod() // <- !!!!!!                                                                                     // 1779\n\t */                                                                                                                   // 1780\n\tjsPDF.API = {events:[]};                                                                                              // 1781\n\tjsPDF.version = \"1.0.272-debug 2014-09-29T15:09:diegocr\";                                                             // 1782\n                                                                                                                       // 1783\n\tif (typeof define === 'function' && define.amd) {                                                                     // 1784\n\t\tdefine('jsPDF', function() {                                                                                         // 1785\n\t\t\treturn jsPDF;                                                                                                       // 1786\n\t\t});                                                                                                                  // 1787\n\t} else {                                                                                                              // 1788\n\t\tglobal.jsPDF = jsPDF;                                                                                                // 1789\n\t}                                                                                                                     // 1790\n\treturn jsPDF;                                                                                                         // 1791\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this));                            // 1792\n/**                                                                                                                    // 1793\n * jsPDF addHTML PlugIn                                                                                                // 1794\n * Copyright (c) 2014 Diego Casorran                                                                                   // 1795\n *                                                                                                                     // 1796\n * Licensed under the MIT License.                                                                                     // 1797\n * http://opensource.org/licenses/mit-license                                                                          // 1798\n */                                                                                                                    // 1799\n                                                                                                                       // 1800\n(function (jsPDFAPI) {                                                                                                 // 1801\n\t'use strict';                                                                                                         // 1802\n                                                                                                                       // 1803\n\t/**                                                                                                                   // 1804\n\t * Renders an HTML element to canvas object which added as an image to the PDF                                        // 1805\n\t *                                                                                                                    // 1806\n\t * This PlugIn requires html2canvas: https://github.com/niklasvh/html2canvas                                          // 1807\n\t *            OR rasterizeHTML: https://github.com/cburgmer/rasterizeHTML.js                                          // 1808\n\t *                                                                                                                    // 1809\n\t * @public                                                                                                            // 1810\n\t * @function                                                                                                          // 1811\n\t * @param element {Mixed} HTML Element, or anything supported by html2canvas.                                         // 1812\n\t * @param x {Number} starting X coordinate in jsPDF instance's declared units.                                        // 1813\n\t * @param y {Number} starting Y coordinate in jsPDF instance's declared units.                                        // 1814\n\t * @param options {Object} Additional options, check the code below.                                                  // 1815\n\t * @param callback {Function} to call when the rendering has finished.                                                // 1816\n\t *                                                                                                                    // 1817\n\t * NOTE: Every parameter is optional except 'element' and 'callback', in such                                         // 1818\n\t *       case the image is positioned at 0x0 covering the whole PDF document                                          // 1819\n\t *       size. Ie, to easily take screenshoots of webpages saving them to PDF.                                        // 1820\n\t */                                                                                                                   // 1821\n\tjsPDFAPI.addHTML = function (element, x, y, options, callback) {                                                      // 1822\n\t\t'use strict';                                                                                                        // 1823\n                                                                                                                       // 1824\n\t\tif(typeof html2canvas === 'undefined' && typeof rasterizeHTML === 'undefined')                                       // 1825\n\t\t\tthrow new Error('You need either '                                                                                  // 1826\n\t\t\t\t+'https://github.com/niklasvh/html2canvas'                                                                         // 1827\n\t\t\t\t+' or https://github.com/cburgmer/rasterizeHTML.js');                                                              // 1828\n                                                                                                                       // 1829\n\t\tif(typeof x !== 'number') {                                                                                          // 1830\n\t\t\toptions = x;                                                                                                        // 1831\n\t\t\tcallback = y;                                                                                                       // 1832\n\t\t}                                                                                                                    // 1833\n                                                                                                                       // 1834\n\t\tif(typeof options === 'function') {                                                                                  // 1835\n\t\t\tcallback = options;                                                                                                 // 1836\n\t\t\toptions = null;                                                                                                     // 1837\n\t\t}                                                                                                                    // 1838\n                                                                                                                       // 1839\n\t\tvar I = this.internal, K = I.scaleFactor, W = I.pageSize.width, H = I.pageSize.height;                               // 1840\n                                                                                                                       // 1841\n\t\toptions = options || {};                                                                                             // 1842\n\t\toptions.onrendered = function(obj) {                                                                                 // 1843\n\t\t\tx = parseInt(x) || 0;                                                                                               // 1844\n\t\t\ty = parseInt(y) || 0;                                                                                               // 1845\n\t\t\tvar dim = options.dim || {};                                                                                        // 1846\n\t\t\tvar h = dim.h || 0;                                                                                                 // 1847\n\t\t\tvar w = dim.w || Math.min(W,obj.width/K) - x;                                                                       // 1848\n                                                                                                                       // 1849\n\t\t\tvar format = 'JPEG';                                                                                                // 1850\n\t\t\tif(options.format)                                                                                                  // 1851\n\t\t\t\tformat = options.format;                                                                                           // 1852\n                                                                                                                       // 1853\n\t\t\tif(obj.height > H && options.pagesplit) {                                                                           // 1854\n\t\t\t\tvar crop = function() {                                                                                            // 1855\n\t\t\t\t\tvar cy = 0;                                                                                                       // 1856\n\t\t\t\t\twhile(1) {                                                                                                        // 1857\n\t\t\t\t\t\tvar canvas = document.createElement('canvas');                                                                   // 1858\n\t\t\t\t\t\tcanvas.width = Math.min(W*K,obj.width);                                                                          // 1859\n\t\t\t\t\t\tcanvas.height = Math.min(H*K,obj.height-cy);                                                                     // 1860\n\t\t\t\t\t\tvar ctx = canvas.getContext('2d');                                                                               // 1861\n\t\t\t\t\t\tctx.drawImage(obj,0,cy,obj.width,canvas.height,0,0,canvas.width,canvas.height);                                  // 1862\n\t\t\t\t\t\tvar args = [canvas, x,cy?0:y,canvas.width/K,canvas.height/K, format,null,'SLOW'];                                // 1863\n\t\t\t\t\t\tthis.addImage.apply(this, args);                                                                                 // 1864\n\t\t\t\t\t\tcy += canvas.height;                                                                                             // 1865\n\t\t\t\t\t\tif(cy >= obj.height) break;                                                                                      // 1866\n\t\t\t\t\t\tthis.addPage();                                                                                                  // 1867\n\t\t\t\t\t}                                                                                                                 // 1868\n\t\t\t\t\tcallback(w,cy,null,args);                                                                                         // 1869\n\t\t\t\t}.bind(this);                                                                                                      // 1870\n\t\t\t\tif(obj.nodeName === 'CANVAS') {                                                                                    // 1871\n\t\t\t\t\tvar img = new Image();                                                                                            // 1872\n\t\t\t\t\timg.onload = crop;                                                                                                // 1873\n\t\t\t\t\timg.src = obj.toDataURL(\"image/png\");                                                                             // 1874\n\t\t\t\t\tobj = img;                                                                                                        // 1875\n\t\t\t\t} else {                                                                                                           // 1876\n\t\t\t\t\tcrop();                                                                                                           // 1877\n\t\t\t\t}                                                                                                                  // 1878\n\t\t\t} else {                                                                                                            // 1879\n\t\t\t\tvar alias = Math.random().toString(35);                                                                            // 1880\n\t\t\t\tvar args = [obj, x,y,w,h, format,alias,'SLOW'];                                                                    // 1881\n                                                                                                                       // 1882\n\t\t\t\tthis.addImage.apply(this, args);                                                                                   // 1883\n                                                                                                                       // 1884\n\t\t\t\tcallback(w,h,alias,args);                                                                                          // 1885\n\t\t\t}                                                                                                                   // 1886\n\t\t}.bind(this);                                                                                                        // 1887\n                                                                                                                       // 1888\n\t\tif(typeof html2canvas !== 'undefined' && !options.rstz) {                                                            // 1889\n\t\t\treturn html2canvas(element, options);                                                                               // 1890\n\t\t}                                                                                                                    // 1891\n                                                                                                                       // 1892\n\t\tif(typeof rasterizeHTML !== 'undefined') {                                                                           // 1893\n\t\t\tvar meth = 'drawDocument';                                                                                          // 1894\n\t\t\tif(typeof element === 'string') {                                                                                   // 1895\n\t\t\t\tmeth = /^http/.test(element) ? 'drawURL' : 'drawHTML';                                                             // 1896\n\t\t\t}                                                                                                                   // 1897\n\t\t\toptions.width = options.width || (W*K);                                                                             // 1898\n\t\t\treturn rasterizeHTML[meth](element, void 0, options).then(function(r) {                                             // 1899\n\t\t\t\toptions.onrendered(r.image);                                                                                       // 1900\n\t\t\t}, function(e) {                                                                                                    // 1901\n\t\t\t\tcallback(null,e);                                                                                                  // 1902\n\t\t\t});                                                                                                                 // 1903\n\t\t}                                                                                                                    // 1904\n                                                                                                                       // 1905\n\t\treturn null;                                                                                                         // 1906\n\t};                                                                                                                    // 1907\n})(jsPDF.API);                                                                                                         // 1908\n/** @preserve                                                                                                          // 1909\n * jsPDF addImage plugin                                                                                               // 1910\n * Copyright (c) 2012 Jason Siefken, https://github.com/siefkenj/                                                      // 1911\n *               2013 Chris Dowling, https://github.com/gingerchris                                                    // 1912\n *               2013 Trinh Ho, https://github.com/ineedfat                                                            // 1913\n *               2013 Edwin Alejandro Perez, https://github.com/eaparango                                              // 1914\n *               2013 Norah Smith, https://github.com/burnburnrocket                                                   // 1915\n *               2014 Diego Casorran, https://github.com/diegocr                                                       // 1916\n *               2014 James Robb, https://github.com/jamesbrobb                                                        // 1917\n *                                                                                                                     // 1918\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 1919\n * a copy of this software and associated documentation files (the                                                     // 1920\n * \"Software\"), to deal in the Software without restriction, including                                                 // 1921\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 1922\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 1923\n * permit persons to whom the Software is furnished to do so, subject to                                               // 1924\n * the following conditions:                                                                                           // 1925\n *                                                                                                                     // 1926\n * The above copyright notice and this permission notice shall be                                                      // 1927\n * included in all copies or substantial portions of the Software.                                                     // 1928\n *                                                                                                                     // 1929\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 1930\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 1931\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 1932\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 1933\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 1934\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 1935\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 1936\n */                                                                                                                    // 1937\n                                                                                                                       // 1938\n;(function(jsPDFAPI) {                                                                                                 // 1939\n\t'use strict'                                                                                                          // 1940\n                                                                                                                       // 1941\n\tvar namespace = 'addImage_',                                                                                          // 1942\n\t\tsupported_image_types = ['jpeg', 'jpg', 'png'];                                                                      // 1943\n                                                                                                                       // 1944\n\t// Image functionality ported from pdf.js                                                                             // 1945\n\tvar putImage = function(img) {                                                                                        // 1946\n                                                                                                                       // 1947\n\t\tvar objectNumber = this.internal.newObject()                                                                         // 1948\n\t\t, out = this.internal.write                                                                                          // 1949\n\t\t, putStream = this.internal.putStream                                                                                // 1950\n                                                                                                                       // 1951\n\t\timg['n'] = objectNumber                                                                                              // 1952\n                                                                                                                       // 1953\n\t\tout('<</Type /XObject')                                                                                              // 1954\n\t\tout('/Subtype /Image')                                                                                               // 1955\n\t\tout('/Width ' + img['w'])                                                                                            // 1956\n\t\tout('/Height ' + img['h'])                                                                                           // 1957\n\t\tif (img['cs'] === this.color_spaces.INDEXED) {                                                                       // 1958\n\t\t\tout('/ColorSpace [/Indexed /DeviceRGB '                                                                             // 1959\n\t\t\t\t\t// if an indexed png defines more than one colour with transparency, we've created a smask                        // 1960\n\t\t\t\t\t+ (img['pal'].length / 3 - 1) + ' ' + ('smask' in img ? objectNumber + 2 : objectNumber + 1)                      // 1961\n\t\t\t\t\t+ ' 0 R]');                                                                                                       // 1962\n\t\t} else {                                                                                                             // 1963\n\t\t\tout('/ColorSpace /' + img['cs']);                                                                                   // 1964\n\t\t\tif (img['cs'] === this.color_spaces.DEVICE_CMYK) {                                                                  // 1965\n\t\t\t\tout('/Decode [1 0 1 0 1 0 1 0]');                                                                                  // 1966\n\t\t\t}                                                                                                                   // 1967\n\t\t}                                                                                                                    // 1968\n\t\tout('/BitsPerComponent ' + img['bpc']);                                                                              // 1969\n\t\tif ('f' in img) {                                                                                                    // 1970\n\t\t\tout('/Filter /' + img['f']);                                                                                        // 1971\n\t\t}                                                                                                                    // 1972\n\t\tif ('dp' in img) {                                                                                                   // 1973\n\t\t\tout('/DecodeParms <<' + img['dp'] + '>>');                                                                          // 1974\n\t\t}                                                                                                                    // 1975\n\t\tif ('trns' in img && img['trns'].constructor == Array) {                                                             // 1976\n\t\t\tvar trns = '',                                                                                                      // 1977\n\t\t\t\ti = 0,                                                                                                             // 1978\n\t\t\t\tlen = img['trns'].length;                                                                                          // 1979\n\t\t\tfor (; i < len; i++)                                                                                                // 1980\n\t\t\t\ttrns += (img['trns'][i] + ' ' + img['trns'][i] + ' ');                                                             // 1981\n\t\t\tout('/Mask [' + trns + ']');                                                                                        // 1982\n\t\t}                                                                                                                    // 1983\n\t\tif ('smask' in img) {                                                                                                // 1984\n\t\t\tout('/SMask ' + (objectNumber + 1) + ' 0 R');                                                                       // 1985\n\t\t}                                                                                                                    // 1986\n\t\tout('/Length ' + img['data'].length + '>>');                                                                         // 1987\n                                                                                                                       // 1988\n\t\tputStream(img['data']);                                                                                              // 1989\n                                                                                                                       // 1990\n\t\tout('endobj');                                                                                                       // 1991\n                                                                                                                       // 1992\n\t\t// Soft mask                                                                                                         // 1993\n\t\tif ('smask' in img) {                                                                                                // 1994\n\t\t\tvar dp = '/Predictor 15 /Colors 1 /BitsPerComponent ' + img['bpc'] + ' /Columns ' + img['w'];                       // 1995\n\t\t\tvar smask = {'w': img['w'], 'h': img['h'], 'cs': 'DeviceGray', 'bpc': img['bpc'], 'dp': dp, 'data': img['smask']};  // 1996\n\t\t\tif ('f' in img)                                                                                                     // 1997\n\t\t\t\tsmask.f = img['f'];                                                                                                // 1998\n\t\t\tputImage.call(this, smask);                                                                                         // 1999\n\t\t}                                                                                                                    // 2000\n                                                                                                                       // 2001\n\t    //Palette                                                                                                         // 2002\n\t\tif (img['cs'] === this.color_spaces.INDEXED) {                                                                       // 2003\n                                                                                                                       // 2004\n\t\t\tthis.internal.newObject();                                                                                          // 2005\n\t\t\t//out('<< /Filter / ' + img['f'] +' /Length ' + img['pal'].length + '>>');                                          // 2006\n\t\t\t//putStream(zlib.compress(img['pal']));                                                                             // 2007\n\t\t\tout('<< /Length ' + img['pal'].length + '>>');                                                                      // 2008\n\t\t\tputStream(this.arrayBufferToBinaryString(new Uint8Array(img['pal'])));                                              // 2009\n\t\t\tout('endobj');                                                                                                      // 2010\n\t\t}                                                                                                                    // 2011\n\t}                                                                                                                     // 2012\n\t, putResourcesCallback = function() {                                                                                 // 2013\n\t\tvar images = this.internal.collections[namespace + 'images']                                                         // 2014\n\t\tfor ( var i in images ) {                                                                                            // 2015\n\t\t\tputImage.call(this, images[i])                                                                                      // 2016\n\t\t}                                                                                                                    // 2017\n\t}                                                                                                                     // 2018\n\t, putXObjectsDictCallback = function(){                                                                               // 2019\n\t\tvar images = this.internal.collections[namespace + 'images']                                                         // 2020\n\t\t, out = this.internal.write                                                                                          // 2021\n\t\t, image                                                                                                              // 2022\n\t\tfor (var i in images) {                                                                                              // 2023\n\t\t\timage = images[i]                                                                                                   // 2024\n\t\t\tout(                                                                                                                // 2025\n\t\t\t\t'/I' + image['i']                                                                                                  // 2026\n\t\t\t\t, image['n']                                                                                                       // 2027\n\t\t\t\t, '0'                                                                                                              // 2028\n\t\t\t\t, 'R'                                                                                                              // 2029\n\t\t\t)                                                                                                                   // 2030\n\t\t}                                                                                                                    // 2031\n\t}                                                                                                                     // 2032\n\t, checkCompressValue = function(value) {                                                                              // 2033\n\t\tif(value && typeof value === 'string')                                                                               // 2034\n\t\t\tvalue = value.toUpperCase();                                                                                        // 2035\n\t\treturn value in jsPDFAPI.image_compression ? value : jsPDFAPI.image_compression.NONE;                                // 2036\n\t}                                                                                                                     // 2037\n\t, getImages = function() {                                                                                            // 2038\n\t\tvar images = this.internal.collections[namespace + 'images'];                                                        // 2039\n\t\t//first run, so initialise stuff                                                                                     // 2040\n\t\tif(!images) {                                                                                                        // 2041\n\t\t\tthis.internal.collections[namespace + 'images'] = images = {};                                                      // 2042\n\t\t\tthis.internal.events.subscribe('putResources', putResourcesCallback);                                               // 2043\n\t\t\tthis.internal.events.subscribe('putXobjectDict', putXObjectsDictCallback);                                          // 2044\n\t\t}                                                                                                                    // 2045\n                                                                                                                       // 2046\n\t\treturn images;                                                                                                       // 2047\n\t}                                                                                                                     // 2048\n\t, getImageIndex = function(images) {                                                                                  // 2049\n\t\tvar imageIndex = 0;                                                                                                  // 2050\n                                                                                                                       // 2051\n\t\tif (images){                                                                                                         // 2052\n\t\t\t// this is NOT the first time this method is ran on this instance of jsPDF object.                                  // 2053\n\t\t\timageIndex = Object.keys ?                                                                                          // 2054\n\t\t\tObject.keys(images).length :                                                                                        // 2055\n\t\t\t(function(o){                                                                                                       // 2056\n\t\t\t\tvar i = 0                                                                                                          // 2057\n\t\t\t\tfor (var e in o){if(o.hasOwnProperty(e)){ i++ }}                                                                   // 2058\n\t\t\t\treturn i                                                                                                           // 2059\n\t\t\t})(images)                                                                                                          // 2060\n\t\t}                                                                                                                    // 2061\n                                                                                                                       // 2062\n\t\treturn imageIndex;                                                                                                   // 2063\n\t}                                                                                                                     // 2064\n\t, notDefined = function(value) {                                                                                      // 2065\n\t\treturn typeof value === 'undefined' || value === null;                                                               // 2066\n\t}                                                                                                                     // 2067\n\t, generateAliasFromData = function(data) {                                                                            // 2068\n\t\treturn typeof data === 'string' && jsPDFAPI.sHashCode(data);                                                         // 2069\n\t}                                                                                                                     // 2070\n\t, doesNotSupportImageType = function(type) {                                                                          // 2071\n\t\treturn supported_image_types.indexOf(type) === -1;                                                                   // 2072\n\t}                                                                                                                     // 2073\n\t, processMethodNotEnabled = function(type) {                                                                          // 2074\n\t\treturn typeof jsPDFAPI['process' + type.toUpperCase()] !== 'function';                                               // 2075\n\t}                                                                                                                     // 2076\n\t, isDOMElement = function(object) {                                                                                   // 2077\n\t\treturn typeof object === 'object' && object.nodeType === 1;                                                          // 2078\n\t}                                                                                                                     // 2079\n\t, createDataURIFromElement = function(element, format, angle) {                                                       // 2080\n                                                                                                                       // 2081\n\t\t//if element is an image which uses data url defintion, just return the dataurl                                      // 2082\n\t\tif (element.nodeName === 'IMG' && element.hasAttribute('src')) {                                                     // 2083\n\t\t\tvar src = ''+element.getAttribute('src');                                                                           // 2084\n\t\t\tif (!angle && src.indexOf('data:image/') === 0) return src;                                                         // 2085\n                                                                                                                       // 2086\n\t\t\t// only if the user doesn't care about a format                                                                     // 2087\n\t\t\tif (!format && /\\.png(?:[?#].*)?$/i.test(src)) format = 'png';                                                      // 2088\n\t\t}                                                                                                                    // 2089\n                                                                                                                       // 2090\n\t\tif(element.nodeName === 'CANVAS') {                                                                                  // 2091\n\t\t\tvar canvas = element;                                                                                               // 2092\n\t\t} else {                                                                                                             // 2093\n\t\t\tvar canvas = document.createElement('canvas');                                                                      // 2094\n\t\t\tcanvas.width = element.clientWidth || element.width;                                                                // 2095\n\t\t\tcanvas.height = element.clientHeight || element.height;                                                             // 2096\n                                                                                                                       // 2097\n\t\t\tvar ctx = canvas.getContext('2d');                                                                                  // 2098\n\t\t\tif (!ctx) {                                                                                                         // 2099\n\t\t\t\tthrow ('addImage requires canvas to be supported by browser.');                                                    // 2100\n\t\t\t}                                                                                                                   // 2101\n\t\t\tif (angle) {                                                                                                        // 2102\n\t\t\t\tvar x, y, b, c, s, w, h, to_radians = Math.PI/180, angleInRadians;                                                 // 2103\n                                                                                                                       // 2104\n\t\t\t\tif (typeof angle === 'object') {                                                                                   // 2105\n\t\t\t\t\tx = angle.x;                                                                                                      // 2106\n\t\t\t\t\ty = angle.y;                                                                                                      // 2107\n\t\t\t\t\tb = angle.bg;                                                                                                     // 2108\n\t\t\t\t\tangle = angle.angle;                                                                                              // 2109\n\t\t\t\t}                                                                                                                  // 2110\n\t\t\t\tangleInRadians = angle*to_radians;                                                                                 // 2111\n\t\t\t\tc = Math.abs(Math.cos(angleInRadians));                                                                            // 2112\n\t\t\t\ts = Math.abs(Math.sin(angleInRadians));                                                                            // 2113\n\t\t\t\tw = canvas.width;                                                                                                  // 2114\n\t\t\t\th = canvas.height;                                                                                                 // 2115\n\t\t\t\tcanvas.width = h * s + w * c;                                                                                      // 2116\n\t\t\t\tcanvas.height = h * c + w * s;                                                                                     // 2117\n                                                                                                                       // 2118\n\t\t\t\tif (isNaN(x)) x = canvas.width / 2;                                                                                // 2119\n\t\t\t\tif (isNaN(y)) y = canvas.height / 2;                                                                               // 2120\n                                                                                                                       // 2121\n\t\t\t\tctx.clearRect(0,0,canvas.width, canvas.height);                                                                    // 2122\n\t\t\t\tctx.fillStyle = b || 'white';                                                                                      // 2123\n\t\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);                                                                   // 2124\n\t\t\t\tctx.save();                                                                                                        // 2125\n\t\t\t\tctx.translate(x, y);                                                                                               // 2126\n\t\t\t\tctx.rotate(angleInRadians);                                                                                        // 2127\n\t\t\t\tctx.drawImage(element, -(w/2), -(h/2));                                                                            // 2128\n\t\t\t\tctx.rotate(-angleInRadians);                                                                                       // 2129\n\t\t\t\tctx.translate(-x, -y);                                                                                             // 2130\n\t\t\t\tctx.restore();                                                                                                     // 2131\n\t\t\t} else {                                                                                                            // 2132\n\t\t\t\tctx.drawImage(element, 0, 0, canvas.width, canvas.height);                                                         // 2133\n\t\t\t}                                                                                                                   // 2134\n\t\t}                                                                                                                    // 2135\n\t\treturn canvas.toDataURL((''+format).toLowerCase() == 'png' ? 'image/png' : 'image/jpeg');                            // 2136\n\t}                                                                                                                     // 2137\n\t,checkImagesForAlias = function(alias, images) {                                                                      // 2138\n\t\tvar cached_info;                                                                                                     // 2139\n\t\tif(images) {                                                                                                         // 2140\n\t\t\tfor(var e in images) {                                                                                              // 2141\n\t\t\t\tif(alias === images[e].alias) {                                                                                    // 2142\n\t\t\t\t\tcached_info = images[e];                                                                                          // 2143\n\t\t\t\t\tbreak;                                                                                                            // 2144\n\t\t\t\t}                                                                                                                  // 2145\n\t\t\t}                                                                                                                   // 2146\n\t\t}                                                                                                                    // 2147\n\t\treturn cached_info;                                                                                                  // 2148\n\t}                                                                                                                     // 2149\n\t,determineWidthAndHeight = function(w, h, info) {                                                                     // 2150\n\t\tif (!w && !h) {                                                                                                      // 2151\n\t\t\tw = -96;                                                                                                            // 2152\n\t\t\th = -96;                                                                                                            // 2153\n\t\t}                                                                                                                    // 2154\n\t\tif (w < 0) {                                                                                                         // 2155\n\t\t\tw = (-1) * info['w'] * 72 / w / this.internal.scaleFactor;                                                          // 2156\n\t\t}                                                                                                                    // 2157\n\t\tif (h < 0) {                                                                                                         // 2158\n\t\t\th = (-1) * info['h'] * 72 / h / this.internal.scaleFactor;                                                          // 2159\n\t\t}                                                                                                                    // 2160\n\t\tif (w === 0) {                                                                                                       // 2161\n\t\t\tw = h * info['w'] / info['h'];                                                                                      // 2162\n\t\t}                                                                                                                    // 2163\n\t\tif (h === 0) {                                                                                                       // 2164\n\t\t\th = w * info['h'] / info['w'];                                                                                      // 2165\n\t\t}                                                                                                                    // 2166\n                                                                                                                       // 2167\n\t\treturn [w, h];                                                                                                       // 2168\n\t}                                                                                                                     // 2169\n\t, writeImageToPDF = function(x, y, w, h, info, index, images) {                                                       // 2170\n\t\tvar dims = determineWidthAndHeight.call(this, w, h, info),                                                           // 2171\n\t\t\tcoord = this.internal.getCoordinateString,                                                                          // 2172\n\t\t\tvcoord = this.internal.getVerticalCoordinateString;                                                                 // 2173\n                                                                                                                       // 2174\n\t\tw = dims[0];                                                                                                         // 2175\n\t\th = dims[1];                                                                                                         // 2176\n                                                                                                                       // 2177\n\t\timages[index] = info;                                                                                                // 2178\n                                                                                                                       // 2179\n\t\tthis.internal.write(                                                                                                 // 2180\n\t\t\t'q'                                                                                                                 // 2181\n\t\t\t, coord(w)                                                                                                          // 2182\n\t\t\t, '0 0'                                                                                                             // 2183\n\t\t\t, coord(h) // TODO: check if this should be shifted by vcoord                                                       // 2184\n\t\t\t, coord(x)                                                                                                          // 2185\n\t\t\t, vcoord(y + h)                                                                                                     // 2186\n\t\t\t, 'cm /I'+info['i']                                                                                                 // 2187\n\t\t\t, 'Do Q'                                                                                                            // 2188\n\t\t)                                                                                                                    // 2189\n\t};                                                                                                                    // 2190\n                                                                                                                       // 2191\n\t/**                                                                                                                   // 2192\n\t * COLOR SPACES                                                                                                       // 2193\n\t */                                                                                                                   // 2194\n\tjsPDFAPI.color_spaces = {                                                                                             // 2195\n\t\tDEVICE_RGB:'DeviceRGB',                                                                                              // 2196\n\t\tDEVICE_GRAY:'DeviceGray',                                                                                            // 2197\n\t\tDEVICE_CMYK:'DeviceCMYK',                                                                                            // 2198\n\t\tCAL_GREY:'CalGray',                                                                                                  // 2199\n\t\tCAL_RGB:'CalRGB',                                                                                                    // 2200\n\t\tLAB:'Lab',                                                                                                           // 2201\n\t\tICC_BASED:'ICCBased',                                                                                                // 2202\n\t\tINDEXED:'Indexed',                                                                                                   // 2203\n\t\tPATTERN:'Pattern',                                                                                                   // 2204\n\t\tSEPERATION:'Seperation',                                                                                             // 2205\n\t\tDEVICE_N:'DeviceN'                                                                                                   // 2206\n\t};                                                                                                                    // 2207\n                                                                                                                       // 2208\n\t/**                                                                                                                   // 2209\n\t * DECODE METHODS                                                                                                     // 2210\n\t */                                                                                                                   // 2211\n\tjsPDFAPI.decode = {                                                                                                   // 2212\n\t\tDCT_DECODE:'DCTDecode',                                                                                              // 2213\n\t\tFLATE_DECODE:'FlateDecode',                                                                                          // 2214\n\t\tLZW_DECODE:'LZWDecode',                                                                                              // 2215\n\t\tJPX_DECODE:'JPXDecode',                                                                                              // 2216\n\t\tJBIG2_DECODE:'JBIG2Decode',                                                                                          // 2217\n\t\tASCII85_DECODE:'ASCII85Decode',                                                                                      // 2218\n\t\tASCII_HEX_DECODE:'ASCIIHexDecode',                                                                                   // 2219\n\t\tRUN_LENGTH_DECODE:'RunLengthDecode',                                                                                 // 2220\n\t\tCCITT_FAX_DECODE:'CCITTFaxDecode'                                                                                    // 2221\n\t};                                                                                                                    // 2222\n                                                                                                                       // 2223\n\t/**                                                                                                                   // 2224\n\t * IMAGE COMPRESSION TYPES                                                                                            // 2225\n\t */                                                                                                                   // 2226\n\tjsPDFAPI.image_compression = {                                                                                        // 2227\n\t\tNONE: 'NONE',                                                                                                        // 2228\n\t\tFAST: 'FAST',                                                                                                        // 2229\n\t\tMEDIUM: 'MEDIUM',                                                                                                    // 2230\n\t\tSLOW: 'SLOW'                                                                                                         // 2231\n\t};                                                                                                                    // 2232\n                                                                                                                       // 2233\n\tjsPDFAPI.sHashCode = function(str) {                                                                                  // 2234\n\t\treturn Array.prototype.reduce && str.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);     // 2235\n\t};                                                                                                                    // 2236\n                                                                                                                       // 2237\n\tjsPDFAPI.isString = function(object) {                                                                                // 2238\n\t\treturn typeof object === 'string';                                                                                   // 2239\n\t};                                                                                                                    // 2240\n                                                                                                                       // 2241\n\t/**                                                                                                                   // 2242\n\t * Strips out and returns info from a valid base64 data URI                                                           // 2243\n\t * @param {String[dataURI]} a valid data URI of format 'data:[<MIME-type>][;base64],<data>'                           // 2244\n\t * @returns an Array containing the following                                                                         // 2245\n\t * [0] the complete data URI                                                                                          // 2246\n\t * [1] <MIME-type>                                                                                                    // 2247\n\t * [2] format - the second part of the mime-type i.e 'png' in 'image/png'                                             // 2248\n\t * [4] <data>                                                                                                         // 2249\n\t */                                                                                                                   // 2250\n\tjsPDFAPI.extractInfoFromBase64DataURI = function(dataURI) {                                                           // 2251\n\t\treturn /^data:([\\w]+?\\/([\\w]+?));base64,(.+?)$/g.exec(dataURI);                                                      // 2252\n\t};                                                                                                                    // 2253\n                                                                                                                       // 2254\n\t/**                                                                                                                   // 2255\n\t * Check to see if ArrayBuffer is supported                                                                           // 2256\n\t */                                                                                                                   // 2257\n\tjsPDFAPI.supportsArrayBuffer = function() {                                                                           // 2258\n\t\treturn typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';                                      // 2259\n\t};                                                                                                                    // 2260\n                                                                                                                       // 2261\n\t/**                                                                                                                   // 2262\n\t * Tests supplied object to determine if ArrayBuffer                                                                  // 2263\n\t * @param {Object[object]}                                                                                            // 2264\n\t */                                                                                                                   // 2265\n\tjsPDFAPI.isArrayBuffer = function(object) {                                                                           // 2266\n\t\tif(!this.supportsArrayBuffer())                                                                                      // 2267\n\t        return false;                                                                                                 // 2268\n\t\treturn object instanceof ArrayBuffer;                                                                                // 2269\n\t};                                                                                                                    // 2270\n                                                                                                                       // 2271\n\t/**                                                                                                                   // 2272\n\t * Tests supplied object to determine if it implements the ArrayBufferView (TypedArray) interface                     // 2273\n\t * @param {Object[object]}                                                                                            // 2274\n\t */                                                                                                                   // 2275\n\tjsPDFAPI.isArrayBufferView = function(object) {                                                                       // 2276\n\t\tif(!this.supportsArrayBuffer())                                                                                      // 2277\n\t        return false;                                                                                                 // 2278\n\t\tif(typeof Uint32Array === 'undefined')                                                                               // 2279\n\t\t\treturn false;                                                                                                       // 2280\n\t\treturn (object instanceof Int8Array ||                                                                               // 2281\n\t\t\t\tobject instanceof Uint8Array ||                                                                                    // 2282\n\t\t\t\t(typeof Uint8ClampedArray !== 'undefined' && object instanceof Uint8ClampedArray) ||                               // 2283\n\t\t\t\tobject instanceof Int16Array ||                                                                                    // 2284\n\t\t\t\tobject instanceof Uint16Array ||                                                                                   // 2285\n\t\t\t\tobject instanceof Int32Array ||                                                                                    // 2286\n\t\t\t\tobject instanceof Uint32Array ||                                                                                   // 2287\n\t\t\t\tobject instanceof Float32Array ||                                                                                  // 2288\n\t\t\t\tobject instanceof Float64Array );                                                                                  // 2289\n\t};                                                                                                                    // 2290\n                                                                                                                       // 2291\n\t/**                                                                                                                   // 2292\n\t * Exactly what it says on the tin                                                                                    // 2293\n\t */                                                                                                                   // 2294\n\tjsPDFAPI.binaryStringToUint8Array = function(binary_string) {                                                         // 2295\n\t\t/*                                                                                                                   // 2296\n\t\t * not sure how efficient this will be will bigger files. Is there a native method?                                  // 2297\n\t\t */                                                                                                                  // 2298\n\t\tvar len = binary_string.length;                                                                                      // 2299\n\t    var bytes = new Uint8Array( len );                                                                                // 2300\n\t    for (var i = 0; i < len; i++) {                                                                                   // 2301\n\t        bytes[i] = binary_string.charCodeAt(i);                                                                       // 2302\n\t    }                                                                                                                 // 2303\n\t    return bytes;                                                                                                     // 2304\n\t};                                                                                                                    // 2305\n                                                                                                                       // 2306\n\t/**                                                                                                                   // 2307\n\t * @see this discussion                                                                                               // 2308\n\t * http://stackoverflow.com/questions/6965107/converting-between-strings-and-arraybuffers                             // 2309\n\t *                                                                                                                    // 2310\n\t * As stated, i imagine the method below is highly inefficent for large files.                                        // 2311\n\t *                                                                                                                    // 2312\n\t * Also of note from Mozilla,                                                                                         // 2313\n\t *                                                                                                                    // 2314\n\t * \"However, this is slow and error-prone, due to the need for multiple conversions (especially if the binary data is not actually byte-format data, but, for example, 32-bit integers or floats).\"\n\t *                                                                                                                    // 2316\n\t * https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView                                               // 2317\n\t *                                                                                                                    // 2318\n\t * Although i'm strugglig to see how StringView solves this issue? Doesn't appear to be a direct method for conversion?\n\t *                                                                                                                    // 2320\n\t * Async method using Blob and FileReader could be best, but i'm not sure how to fit it into the flow?                // 2321\n\t */                                                                                                                   // 2322\n\tjsPDFAPI.arrayBufferToBinaryString = function(buffer) {                                                               // 2323\n\t\tif(this.isArrayBuffer(buffer))                                                                                       // 2324\n\t\t\tbuffer = new Uint8Array(buffer);                                                                                    // 2325\n                                                                                                                       // 2326\n\t    var binary_string = '';                                                                                           // 2327\n\t    var len = buffer.byteLength;                                                                                      // 2328\n\t    for (var i = 0; i < len; i++) {                                                                                   // 2329\n\t        binary_string += String.fromCharCode(buffer[i]);                                                              // 2330\n\t    }                                                                                                                 // 2331\n\t    return binary_string;                                                                                             // 2332\n\t    /*                                                                                                                // 2333\n\t     * Another solution is the method below - convert array buffer straight to base64 and then use atob               // 2334\n\t     */                                                                                                               // 2335\n\t\t//return atob(this.arrayBufferToBase64(buffer));                                                                     // 2336\n\t};                                                                                                                    // 2337\n                                                                                                                       // 2338\n\t/**                                                                                                                   // 2339\n\t * Converts an ArrayBuffer directly to base64                                                                         // 2340\n\t *                                                                                                                    // 2341\n\t * Taken from here                                                                                                    // 2342\n\t *                                                                                                                    // 2343\n\t * http://jsperf.com/encoding-xhr-image-data/31                                                                       // 2344\n\t *                                                                                                                    // 2345\n\t * Need to test if this is a better solution for larger files                                                         // 2346\n\t *                                                                                                                    // 2347\n\t */                                                                                                                   // 2348\n\tjsPDFAPI.arrayBufferToBase64 = function(arrayBuffer) {                                                                // 2349\n\t\tvar base64    = ''                                                                                                   // 2350\n\t\tvar encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                   // 2351\n                                                                                                                       // 2352\n\t\tvar bytes         = new Uint8Array(arrayBuffer)                                                                      // 2353\n\t\tvar byteLength    = bytes.byteLength                                                                                 // 2354\n\t\tvar byteRemainder = byteLength % 3                                                                                   // 2355\n\t\tvar mainLength    = byteLength - byteRemainder                                                                       // 2356\n                                                                                                                       // 2357\n\t\tvar a, b, c, d                                                                                                       // 2358\n\t\tvar chunk                                                                                                            // 2359\n                                                                                                                       // 2360\n\t\t// Main loop deals with bytes in chunks of 3                                                                         // 2361\n\t\tfor (var i = 0; i < mainLength; i = i + 3) {                                                                         // 2362\n\t\t\t// Combine the three bytes into a single integer                                                                    // 2363\n\t\t\tchunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]                                                       // 2364\n                                                                                                                       // 2365\n\t\t\t// Use bitmasks to extract 6-bit segments from the triplet                                                          // 2366\n\t\t\ta = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18                                                          // 2367\n\t\t\tb = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12                                                          // 2368\n\t\t\tc = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6                                                           // 2369\n\t\t\td = chunk & 63               // 63       = 2^6 - 1                                                                  // 2370\n                                                                                                                       // 2371\n\t\t\t// Convert the raw binary segments to the appropriate ASCII encoding                                                // 2372\n\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]                                                 // 2373\n\t\t}                                                                                                                    // 2374\n                                                                                                                       // 2375\n\t\t// Deal with the remaining bytes and padding                                                                         // 2376\n\t\tif (byteRemainder == 1) {                                                                                            // 2377\n\t\t\tchunk = bytes[mainLength]                                                                                           // 2378\n                                                                                                                       // 2379\n\t\t\ta = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2                                                                      // 2380\n                                                                                                                       // 2381\n\t\t\t// Set the 4 least significant bits to zero                                                                         // 2382\n\t\t\tb = (chunk & 3)   << 4 // 3   = 2^2 - 1                                                                             // 2383\n                                                                                                                       // 2384\n\t\t\tbase64 += encodings[a] + encodings[b] + '=='                                                                        // 2385\n\t\t} else if (byteRemainder == 2) {                                                                                     // 2386\n\t\t\tchunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]                                                            // 2387\n                                                                                                                       // 2388\n\t\t\ta = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10                                                                // 2389\n\t\t\tb = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4                                                                 // 2390\n                                                                                                                       // 2391\n\t\t\t// Set the 2 least significant bits to zero                                                                         // 2392\n\t\t\tc = (chunk & 15)    <<  2 // 15    = 2^4 - 1                                                                        // 2393\n                                                                                                                       // 2394\n\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + '='                                                          // 2395\n\t\t}                                                                                                                    // 2396\n                                                                                                                       // 2397\n\t\treturn base64                                                                                                        // 2398\n\t};                                                                                                                    // 2399\n                                                                                                                       // 2400\n\tjsPDFAPI.createImageInfo = function(data, wd, ht, cs, bpc, f, imageIndex, alias, dp, trns, pal, smask) {              // 2401\n\t\tvar info = {                                                                                                         // 2402\n\t\t\t\talias:alias,                                                                                                       // 2403\n\t\t\t\tw : wd,                                                                                                            // 2404\n\t\t\t\th : ht,                                                                                                            // 2405\n\t\t\t\tcs : cs,                                                                                                           // 2406\n\t\t\t\tbpc : bpc,                                                                                                         // 2407\n\t\t\t\ti : imageIndex,                                                                                                    // 2408\n\t\t\t\tdata : data                                                                                                        // 2409\n\t\t\t\t// n: objectNumber will be added by putImage code                                                                  // 2410\n\t\t\t};                                                                                                                  // 2411\n                                                                                                                       // 2412\n\t\tif(f) info.f = f;                                                                                                    // 2413\n\t\tif(dp) info.dp = dp;                                                                                                 // 2414\n\t\tif(trns) info.trns = trns;                                                                                           // 2415\n\t\tif(pal) info.pal = pal;                                                                                              // 2416\n\t\tif(smask) info.smask = smask;                                                                                        // 2417\n                                                                                                                       // 2418\n\t\treturn info;                                                                                                         // 2419\n\t};                                                                                                                    // 2420\n                                                                                                                       // 2421\n\tjsPDFAPI.addImage = function(imageData, format, x, y, w, h, alias, compression, rotation) {                           // 2422\n\t\t'use strict'                                                                                                         // 2423\n                                                                                                                       // 2424\n\t\tif(typeof format !== 'string') {                                                                                     // 2425\n\t\t\tvar tmp = h;                                                                                                        // 2426\n\t\t\th = w;                                                                                                              // 2427\n\t\t\tw = y;                                                                                                              // 2428\n\t\t\ty = x;                                                                                                              // 2429\n\t\t\tx = format;                                                                                                         // 2430\n\t\t\tformat = tmp;                                                                                                       // 2431\n\t\t}                                                                                                                    // 2432\n                                                                                                                       // 2433\n\t\tif (typeof imageData === 'object' && !isDOMElement(imageData) && \"imageData\" in imageData) {                         // 2434\n\t\t\tvar options = imageData;                                                                                            // 2435\n                                                                                                                       // 2436\n\t\t\timageData = options.imageData;                                                                                      // 2437\n\t\t\tformat = options.format || format;                                                                                  // 2438\n\t\t\tx = options.x || x || 0;                                                                                            // 2439\n\t\t\ty = options.y || y || 0;                                                                                            // 2440\n\t\t\tw = options.w || w;                                                                                                 // 2441\n\t\t\th = options.h || h;                                                                                                 // 2442\n\t\t\talias = options.alias || alias;                                                                                     // 2443\n\t\t\tcompression = options.compression || compression;                                                                   // 2444\n\t\t\trotation = options.rotation || options.angle || rotation;                                                           // 2445\n\t\t}                                                                                                                    // 2446\n                                                                                                                       // 2447\n\t\tif (isNaN(x) || isNaN(y))                                                                                            // 2448\n\t\t{                                                                                                                    // 2449\n\t\t\tconsole.error('jsPDF.addImage: Invalid coordinates', arguments);                                                    // 2450\n\t\t\tthrow new Error('Invalid coordinates passed to jsPDF.addImage');                                                    // 2451\n\t\t}                                                                                                                    // 2452\n                                                                                                                       // 2453\n\t\tvar images = getImages.call(this), info;                                                                             // 2454\n                                                                                                                       // 2455\n\t\tif (!(info = checkImagesForAlias(imageData, images))) {                                                              // 2456\n\t\t\tvar dataAsBinaryString;                                                                                             // 2457\n                                                                                                                       // 2458\n\t\t\tif(isDOMElement(imageData))                                                                                         // 2459\n\t\t\t\timageData = createDataURIFromElement(imageData, format, rotation);                                                 // 2460\n                                                                                                                       // 2461\n\t\t\tif(notDefined(alias))                                                                                               // 2462\n\t\t\t\talias = generateAliasFromData(imageData);                                                                          // 2463\n                                                                                                                       // 2464\n\t\t\tif (!(info = checkImagesForAlias(alias, images))) {                                                                 // 2465\n                                                                                                                       // 2466\n\t\t\t\tif(this.isString(imageData)) {                                                                                     // 2467\n                                                                                                                       // 2468\n\t\t\t\t\tvar base64Info = this.extractInfoFromBase64DataURI(imageData);                                                    // 2469\n                                                                                                                       // 2470\n\t\t\t\t\tif(base64Info) {                                                                                                  // 2471\n                                                                                                                       // 2472\n\t\t\t\t\t\tformat = base64Info[2];                                                                                          // 2473\n\t\t\t\t\t\timageData = atob(base64Info[3]);//convert to binary string                                                       // 2474\n                                                                                                                       // 2475\n\t\t\t\t\t} else {                                                                                                          // 2476\n                                                                                                                       // 2477\n\t\t\t\t\t\tif (imageData.charCodeAt(0) === 0x89 &&                                                                          // 2478\n\t\t\t\t\t\t\timageData.charCodeAt(1) === 0x50 &&                                                                             // 2479\n\t\t\t\t\t\t\timageData.charCodeAt(2) === 0x4e &&                                                                             // 2480\n\t\t\t\t\t\t\timageData.charCodeAt(3) === 0x47  )  format = 'png';                                                            // 2481\n\t\t\t\t\t}                                                                                                                 // 2482\n\t\t\t\t}                                                                                                                  // 2483\n\t\t\t\tformat = (format || 'JPEG').toLowerCase();                                                                         // 2484\n                                                                                                                       // 2485\n\t\t\t\tif(doesNotSupportImageType(format))                                                                                // 2486\n\t\t\t\t\tthrow new Error('addImage currently only supports formats ' + supported_image_types + ', not \\''+format+'\\'');    // 2487\n                                                                                                                       // 2488\n\t\t\t\tif(processMethodNotEnabled(format))                                                                                // 2489\n\t\t\t\t\tthrow new Error('please ensure that the plugin for \\''+format+'\\' support is added');                             // 2490\n                                                                                                                       // 2491\n\t\t\t\t/**                                                                                                                // 2492\n\t\t\t\t * need to test if it's more efficent to convert all binary strings                                                // 2493\n\t\t\t\t * to TypedArray - or should we just leave and process as string?                                                  // 2494\n\t\t\t\t */                                                                                                                // 2495\n\t\t\t\tif(this.supportsArrayBuffer()) {                                                                                   // 2496\n\t\t\t\t\tdataAsBinaryString = imageData;                                                                                   // 2497\n\t\t\t\t\timageData = this.binaryStringToUint8Array(imageData);                                                             // 2498\n\t\t\t\t}                                                                                                                  // 2499\n                                                                                                                       // 2500\n\t\t\t\tinfo = this['process' + format.toUpperCase()](                                                                     // 2501\n\t\t\t\t\timageData,                                                                                                        // 2502\n\t\t\t\t\tgetImageIndex(images),                                                                                            // 2503\n\t\t\t\t\talias,                                                                                                            // 2504\n\t\t\t\t\tcheckCompressValue(compression),                                                                                  // 2505\n\t\t\t\t\tdataAsBinaryString                                                                                                // 2506\n\t\t\t\t);                                                                                                                 // 2507\n                                                                                                                       // 2508\n\t\t\t\tif(!info)                                                                                                          // 2509\n\t\t\t\t\tthrow new Error('An unkwown error occurred whilst processing the image');                                         // 2510\n\t\t\t}                                                                                                                   // 2511\n\t\t}                                                                                                                    // 2512\n                                                                                                                       // 2513\n\t\twriteImageToPDF.call(this, x, y, w, h, info, info.i, images);                                                        // 2514\n                                                                                                                       // 2515\n\t\treturn this                                                                                                          // 2516\n\t};                                                                                                                    // 2517\n                                                                                                                       // 2518\n\t/**                                                                                                                   // 2519\n\t * JPEG SUPPORT                                                                                                       // 2520\n\t **/                                                                                                                  // 2521\n                                                                                                                       // 2522\n\t//takes a string imgData containing the raw bytes of                                                                  // 2523\n\t//a jpeg image and returns [width, height]                                                                            // 2524\n\t//Algorithm from: http://www.64lines.com/jpeg-width-height                                                            // 2525\n\tvar getJpegSize = function(imgData) {                                                                                 // 2526\n\t\t'use strict'                                                                                                         // 2527\n\t\tvar width, height, numcomponents;                                                                                    // 2528\n\t\t// Verify we have a valid jpeg header 0xff,0xd8,0xff,0xe0,?,?,'J','F','I','F',0x00                                   // 2529\n\t\tif (!imgData.charCodeAt(0) === 0xff ||                                                                               // 2530\n\t\t\t!imgData.charCodeAt(1) === 0xd8 ||                                                                                  // 2531\n\t\t\t!imgData.charCodeAt(2) === 0xff ||                                                                                  // 2532\n\t\t\t!imgData.charCodeAt(3) === 0xe0 ||                                                                                  // 2533\n\t\t\t!imgData.charCodeAt(6) === 'J'.charCodeAt(0) ||                                                                     // 2534\n\t\t\t!imgData.charCodeAt(7) === 'F'.charCodeAt(0) ||                                                                     // 2535\n\t\t\t!imgData.charCodeAt(8) === 'I'.charCodeAt(0) ||                                                                     // 2536\n\t\t\t!imgData.charCodeAt(9) === 'F'.charCodeAt(0) ||                                                                     // 2537\n\t\t\t!imgData.charCodeAt(10) === 0x00) {                                                                                 // 2538\n\t\t\t\tthrow new Error('getJpegSize requires a binary string jpeg file')                                                  // 2539\n\t\t}                                                                                                                    // 2540\n\t\tvar blockLength = imgData.charCodeAt(4)*256 + imgData.charCodeAt(5);                                                 // 2541\n\t\tvar i = 4, len = imgData.length;                                                                                     // 2542\n\t\twhile ( i < len ) {                                                                                                  // 2543\n\t\t\ti += blockLength;                                                                                                   // 2544\n\t\t\tif (imgData.charCodeAt(i) !== 0xff) {                                                                               // 2545\n\t\t\t\tthrow new Error('getJpegSize could not find the size of the image');                                               // 2546\n\t\t\t}                                                                                                                   // 2547\n\t\t\tif (imgData.charCodeAt(i+1) === 0xc0 || //(SOF) Huffman  - Baseline DCT                                             // 2548\n\t\t\t    imgData.charCodeAt(i+1) === 0xc1 || //(SOF) Huffman  - Extended sequential DCT                                  // 2549\n\t\t\t    imgData.charCodeAt(i+1) === 0xc2 || // Progressive DCT (SOF2)                                                   // 2550\n\t\t\t    imgData.charCodeAt(i+1) === 0xc3 || // Spatial (sequential) lossless (SOF3)                                     // 2551\n\t\t\t    imgData.charCodeAt(i+1) === 0xc4 || // Differential sequential DCT (SOF5)                                       // 2552\n\t\t\t    imgData.charCodeAt(i+1) === 0xc5 || // Differential progressive DCT (SOF6)                                      // 2553\n\t\t\t    imgData.charCodeAt(i+1) === 0xc6 || // Differential spatial (SOF7)                                              // 2554\n\t\t\t    imgData.charCodeAt(i+1) === 0xc7) {                                                                             // 2555\n\t\t\t\theight = imgData.charCodeAt(i+5)*256 + imgData.charCodeAt(i+6);                                                    // 2556\n\t\t\t\twidth = imgData.charCodeAt(i+7)*256 + imgData.charCodeAt(i+8);                                                     // 2557\n                numcomponents = imgData.charCodeAt(i+9);                                                               // 2558\n\t\t\t\treturn [width, height, numcomponents];                                                                             // 2559\n\t\t\t} else {                                                                                                            // 2560\n\t\t\t\ti += 2;                                                                                                            // 2561\n\t\t\t\tblockLength = imgData.charCodeAt(i)*256 + imgData.charCodeAt(i+1)                                                  // 2562\n\t\t\t}                                                                                                                   // 2563\n\t\t}                                                                                                                    // 2564\n\t}                                                                                                                     // 2565\n\t, getJpegSizeFromBytes = function(data) {                                                                             // 2566\n                                                                                                                       // 2567\n\t\tvar hdr = (data[0] << 8) | data[1];                                                                                  // 2568\n                                                                                                                       // 2569\n\t\tif(hdr !== 0xFFD8)                                                                                                   // 2570\n\t\t\tthrow new Error('Supplied data is not a JPEG');                                                                     // 2571\n                                                                                                                       // 2572\n\t\tvar len = data.length,                                                                                               // 2573\n\t\t\tblock = (data[4] << 8) + data[5],                                                                                   // 2574\n\t\t\tpos = 4,                                                                                                            // 2575\n\t\t\tbytes, width, height, numcomponents;                                                                                // 2576\n                                                                                                                       // 2577\n\t\twhile(pos < len) {                                                                                                   // 2578\n\t\t\tpos += block;                                                                                                       // 2579\n\t\t\tbytes = readBytes(data, pos);                                                                                       // 2580\n\t\t\tblock = (bytes[2] << 8) + bytes[3];                                                                                 // 2581\n\t\t\tif((bytes[1] === 0xC0 || bytes[1] === 0xC2) && bytes[0] === 0xFF && block > 7) {                                    // 2582\n\t\t\t\tbytes = readBytes(data, pos + 5);                                                                                  // 2583\n\t\t\t\twidth = (bytes[2] << 8) + bytes[3];                                                                                // 2584\n\t\t\t\theight = (bytes[0] << 8) + bytes[1];                                                                               // 2585\n                numcomponents = bytes[4];                                                                              // 2586\n\t\t\t\treturn {width:width, height:height, numcomponents: numcomponents};                                                 // 2587\n\t\t\t}                                                                                                                   // 2588\n                                                                                                                       // 2589\n\t\t\tpos+=2;                                                                                                             // 2590\n\t\t}                                                                                                                    // 2591\n                                                                                                                       // 2592\n\t\tthrow new Error('getJpegSizeFromBytes could not find the size of the image');                                        // 2593\n\t}                                                                                                                     // 2594\n\t, readBytes = function(data, offset) {                                                                                // 2595\n\t\treturn data.subarray(offset, offset+ 5);                                                                             // 2596\n\t};                                                                                                                    // 2597\n                                                                                                                       // 2598\n\tjsPDFAPI.processJPEG = function(data, index, alias, compression, dataAsBinaryString) {                                // 2599\n\t\t'use strict'                                                                                                         // 2600\n\t\tvar colorSpace = this.color_spaces.DEVICE_RGB,                                                                       // 2601\n\t\t\tfilter = this.decode.DCT_DECODE,                                                                                    // 2602\n\t\t\tbpc = 8,                                                                                                            // 2603\n\t\t\tdims;                                                                                                               // 2604\n                                                                                                                       // 2605\n\t\tif(this.isString(data)) {                                                                                            // 2606\n\t\t\tdims = getJpegSize(data);                                                                                           // 2607\n\t\t\treturn this.createImageInfo(data, dims[0], dims[1], dims[3] == 1 ? this.color_spaces.DEVICE_GRAY:colorSpace, bpc, filter, index, alias);\n\t\t}                                                                                                                    // 2609\n                                                                                                                       // 2610\n\t\tif(this.isArrayBuffer(data))                                                                                         // 2611\n\t\t\tdata = new Uint8Array(data);                                                                                        // 2612\n                                                                                                                       // 2613\n\t\tif(this.isArrayBufferView(data)) {                                                                                   // 2614\n                                                                                                                       // 2615\n\t\t\tdims = getJpegSizeFromBytes(data);                                                                                  // 2616\n                                                                                                                       // 2617\n\t\t\t// if we already have a stored binary string rep use that                                                           // 2618\n\t\t\tdata = dataAsBinaryString || this.arrayBufferToBinaryString(data);                                                  // 2619\n                                                                                                                       // 2620\n\t\t\treturn this.createImageInfo(data, dims.width, dims.height, dims.numcomponents == 1 ? this.color_spaces.DEVICE_GRAY:colorSpace, bpc, filter, index, alias);\n\t\t}                                                                                                                    // 2622\n                                                                                                                       // 2623\n\t\treturn null;                                                                                                         // 2624\n\t};                                                                                                                    // 2625\n                                                                                                                       // 2626\n\tjsPDFAPI.processJPG = function(/*data, index, alias, compression, dataAsBinaryString*/) {                             // 2627\n\t\treturn this.processJPEG.apply(this, arguments);                                                                      // 2628\n\t}                                                                                                                     // 2629\n                                                                                                                       // 2630\n})(jsPDF.API);                                                                                                         // 2631\n(function (jsPDFAPI) {                                                                                                 // 2632\n\t'use strict';                                                                                                         // 2633\n                                                                                                                       // 2634\n\tjsPDFAPI.autoPrint = function () {                                                                                    // 2635\n\t\t'use strict'                                                                                                         // 2636\n\t\tvar refAutoPrintTag;                                                                                                 // 2637\n                                                                                                                       // 2638\n\t\tthis.internal.events.subscribe('postPutResources', function () {                                                     // 2639\n\t\t\trefAutoPrintTag = this.internal.newObject()                                                                         // 2640\n\t\t\t\tthis.internal.write(\"<< /S/Named /Type/Action /N/Print >>\", \"endobj\");                                             // 2641\n\t\t});                                                                                                                  // 2642\n                                                                                                                       // 2643\n\t\tthis.internal.events.subscribe(\"putCatalog\", function () {                                                           // 2644\n\t\t\tthis.internal.write(\"/OpenAction \" + refAutoPrintTag + \" 0\" + \" R\");                                                // 2645\n\t\t});                                                                                                                  // 2646\n\t\treturn this;                                                                                                         // 2647\n\t};                                                                                                                    // 2648\n})(jsPDF.API);                                                                                                         // 2649\n/** ====================================================================                                               // 2650\n * jsPDF Cell plugin                                                                                                   // 2651\n * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com                                                         // 2652\n *               2013 Eduardo Menezes de Morais, eduardo.morais@usp.br                                                 // 2653\n *               2013 Lee Driscoll, https://github.com/lsdriscoll                                                      // 2654\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria                                              // 2655\n *               2014 James Hall, james@parall.ax                                                                      // 2656\n *               2014 Diego Casorran, https://github.com/diegocr                                                       // 2657\n *                                                                                                                     // 2658\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 2659\n * a copy of this software and associated documentation files (the                                                     // 2660\n * \"Software\"), to deal in the Software without restriction, including                                                 // 2661\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 2662\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 2663\n * permit persons to whom the Software is furnished to do so, subject to                                               // 2664\n * the following conditions:                                                                                           // 2665\n *                                                                                                                     // 2666\n * The above copyright notice and this permission notice shall be                                                      // 2667\n * included in all copies or substantial portions of the Software.                                                     // 2668\n *                                                                                                                     // 2669\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 2670\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 2671\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 2672\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 2673\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 2674\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 2675\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 2676\n * ====================================================================                                                // 2677\n */                                                                                                                    // 2678\n                                                                                                                       // 2679\n(function (jsPDFAPI) {                                                                                                 // 2680\n    'use strict';                                                                                                      // 2681\n    /*jslint browser:true */                                                                                           // 2682\n    /*global document: false, jsPDF */                                                                                 // 2683\n                                                                                                                       // 2684\n    var fontName,                                                                                                      // 2685\n        fontSize,                                                                                                      // 2686\n        fontStyle,                                                                                                     // 2687\n        padding = 3,                                                                                                   // 2688\n        margin = 13,                                                                                                   // 2689\n        headerFunction,                                                                                                // 2690\n        lastCellPos = { x: undefined, y: undefined, w: undefined, h: undefined, ln: undefined },                       // 2691\n        pages = 1,                                                                                                     // 2692\n        setLastCellPosition = function (x, y, w, h, ln) {                                                              // 2693\n            lastCellPos = { 'x': x, 'y': y, 'w': w, 'h': h, 'ln': ln };                                                // 2694\n        },                                                                                                             // 2695\n        getLastCellPosition = function () {                                                                            // 2696\n            return lastCellPos;                                                                                        // 2697\n        },                                                                                                             // 2698\n        NO_MARGINS = {left:0, top:0, bottom: 0};                                                                       // 2699\n                                                                                                                       // 2700\n    jsPDFAPI.setHeaderFunction = function (func) {                                                                     // 2701\n        headerFunction = func;                                                                                         // 2702\n    };                                                                                                                 // 2703\n                                                                                                                       // 2704\n    jsPDFAPI.getTextDimensions = function (txt) {                                                                      // 2705\n        fontName = this.internal.getFont().fontName;                                                                   // 2706\n        fontSize = this.table_font_size || this.internal.getFontSize();                                                // 2707\n        fontStyle = this.internal.getFont().fontStyle;                                                                 // 2708\n        // 1 pixel = 0.264583 mm and 1 mm = 72/25.4 point                                                              // 2709\n        var px2pt = 0.264583 * 72 / 25.4,                                                                              // 2710\n            dimensions,                                                                                                // 2711\n            text;                                                                                                      // 2712\n                                                                                                                       // 2713\n        text = document.createElement('font');                                                                         // 2714\n        text.id = \"jsPDFCell\";                                                                                         // 2715\n        text.style.fontStyle = fontStyle;                                                                              // 2716\n        text.style.fontName = fontName;                                                                                // 2717\n        text.style.fontSize = fontSize + 'pt';                                                                         // 2718\n        text.textContent = txt;                                                                                        // 2719\n                                                                                                                       // 2720\n        document.body.appendChild(text);                                                                               // 2721\n                                                                                                                       // 2722\n        dimensions = { w: (text.offsetWidth + 1) * px2pt, h: (text.offsetHeight + 1) * px2pt};                         // 2723\n                                                                                                                       // 2724\n        document.body.removeChild(text);                                                                               // 2725\n                                                                                                                       // 2726\n        return dimensions;                                                                                             // 2727\n    };                                                                                                                 // 2728\n                                                                                                                       // 2729\n    jsPDFAPI.cellAddPage = function () {                                                                               // 2730\n        var margins = this.margins || NO_MARGINS;                                                                      // 2731\n                                                                                                                       // 2732\n        this.addPage();                                                                                                // 2733\n                                                                                                                       // 2734\n        setLastCellPosition(margins.left, margins.top, undefined, undefined);                                          // 2735\n        //setLastCellPosition(undefined, undefined, undefined, undefined, undefined);                                  // 2736\n        pages += 1;                                                                                                    // 2737\n    };                                                                                                                 // 2738\n                                                                                                                       // 2739\n    jsPDFAPI.cellInitialize = function () {                                                                            // 2740\n        lastCellPos = { x: undefined, y: undefined, w: undefined, h: undefined, ln: undefined };                       // 2741\n        pages = 1;                                                                                                     // 2742\n    };                                                                                                                 // 2743\n                                                                                                                       // 2744\n    jsPDFAPI.cell = function (x, y, w, h, txt, ln, align) {                                                            // 2745\n        var curCell = getLastCellPosition();                                                                           // 2746\n                                                                                                                       // 2747\n        // If this is not the first cell, we must change its position                                                  // 2748\n        if (curCell.ln !== undefined) {                                                                                // 2749\n            if (curCell.ln === ln) {                                                                                   // 2750\n                //Same line                                                                                            // 2751\n                x = curCell.x + curCell.w;                                                                             // 2752\n                y = curCell.y;                                                                                         // 2753\n            } else {                                                                                                   // 2754\n                //New line                                                                                             // 2755\n                var margins = this.margins || NO_MARGINS;                                                              // 2756\n                if ((curCell.y + curCell.h + h + margin) >= this.internal.pageSize.height - margins.bottom) {          // 2757\n                    this.cellAddPage();                                                                                // 2758\n                    if (this.printHeaders && this.tableHeaderRow) {                                                    // 2759\n                        this.printHeaderRow(ln, true);                                                                 // 2760\n                    }                                                                                                  // 2761\n                }                                                                                                      // 2762\n                //We ignore the passed y: the lines may have diferent heights                                          // 2763\n                y = (getLastCellPosition().y + getLastCellPosition().h);                                               // 2764\n                                                                                                                       // 2765\n            }                                                                                                          // 2766\n        }                                                                                                              // 2767\n                                                                                                                       // 2768\n        if (txt[0] !== undefined) {                                                                                    // 2769\n            if (this.printingHeaderRow) {                                                                              // 2770\n                this.rect(x, y, w, h, 'FD');                                                                           // 2771\n            } else {                                                                                                   // 2772\n                this.rect(x, y, w, h);                                                                                 // 2773\n            }                                                                                                          // 2774\n            if (align === 'right') {                                                                                   // 2775\n                if (txt instanceof Array) {                                                                            // 2776\n                    for(var i = 0; i<txt.length; i++) {                                                                // 2777\n                        var currentLine = txt[i];                                                                      // 2778\n                        var textSize = this.getStringUnitWidth(currentLine) * this.internal.getFontSize();             // 2779\n                        this.text(currentLine, x + w - textSize - padding, y + this.internal.getLineHeight()*(i+1));   // 2780\n                    }                                                                                                  // 2781\n                }                                                                                                      // 2782\n            } else {                                                                                                   // 2783\n                this.text(txt, x + padding, y + this.internal.getLineHeight());                                        // 2784\n            }                                                                                                          // 2785\n        }                                                                                                              // 2786\n        setLastCellPosition(x, y, w, h, ln);                                                                           // 2787\n        return this;                                                                                                   // 2788\n    };                                                                                                                 // 2789\n                                                                                                                       // 2790\n    /**                                                                                                                // 2791\n     * Return the maximum value from an array                                                                          // 2792\n     * @param array                                                                                                    // 2793\n     * @param comparisonFn                                                                                             // 2794\n     * @returns {*}                                                                                                    // 2795\n     */                                                                                                                // 2796\n    jsPDFAPI.arrayMax = function (array, comparisonFn) {                                                               // 2797\n        var max = array[0],                                                                                            // 2798\n            i,                                                                                                         // 2799\n            ln,                                                                                                        // 2800\n            item;                                                                                                      // 2801\n                                                                                                                       // 2802\n        for (i = 0, ln = array.length; i < ln; i += 1) {                                                               // 2803\n            item = array[i];                                                                                           // 2804\n                                                                                                                       // 2805\n            if (comparisonFn) {                                                                                        // 2806\n                if (comparisonFn(max, item) === -1) {                                                                  // 2807\n                    max = item;                                                                                        // 2808\n                }                                                                                                      // 2809\n            } else {                                                                                                   // 2810\n                if (item > max) {                                                                                      // 2811\n                    max = item;                                                                                        // 2812\n                }                                                                                                      // 2813\n            }                                                                                                          // 2814\n        }                                                                                                              // 2815\n                                                                                                                       // 2816\n        return max;                                                                                                    // 2817\n    };                                                                                                                 // 2818\n                                                                                                                       // 2819\n    /**                                                                                                                // 2820\n     * Create a table from a set of data.                                                                              // 2821\n     * @param {Integer} [x] : left-position for top-left corner of table                                               // 2822\n     * @param {Integer} [y] top-position for top-left corner of table                                                  // 2823\n     * @param {Object[]} [data] As array of objects containing key-value pairs corresponding to a row of data.         // 2824\n     * @param {String[]} [headers] Omit or null to auto-generate headers at a performance cost                         // 2825\n                                                                                                                       // 2826\n     * @param {Object} [config.printHeaders] True to print column headers at the top of every page                     // 2827\n     * @param {Object} [config.autoSize] True to dynamically set the column widths to match the widest cell value      // 2828\n     * @param {Object} [config.margins] margin values for left, top, bottom, and width                                 // 2829\n     * @param {Object} [config.fontSize] Integer fontSize to use (optional)                                            // 2830\n     */                                                                                                                // 2831\n                                                                                                                       // 2832\n    jsPDFAPI.table = function (x,y, data, headers, config) {                                                           // 2833\n        if (!data) {                                                                                                   // 2834\n            throw 'No data for PDF table';                                                                             // 2835\n        }                                                                                                              // 2836\n                                                                                                                       // 2837\n        var headerNames = [],                                                                                          // 2838\n            headerPrompts = [],                                                                                        // 2839\n            header,                                                                                                    // 2840\n            i,                                                                                                         // 2841\n            ln,                                                                                                        // 2842\n            cln,                                                                                                       // 2843\n            columnMatrix = {},                                                                                         // 2844\n            columnWidths = {},                                                                                         // 2845\n            columnData,                                                                                                // 2846\n            column,                                                                                                    // 2847\n            columnMinWidths = [],                                                                                      // 2848\n            j,                                                                                                         // 2849\n            tableHeaderConfigs = [],                                                                                   // 2850\n            model,                                                                                                     // 2851\n            jln,                                                                                                       // 2852\n            func,                                                                                                      // 2853\n                                                                                                                       // 2854\n        //set up defaults. If a value is provided in config, defaults will be overwritten:                             // 2855\n           autoSize        = false,                                                                                    // 2856\n           printHeaders    = true,                                                                                     // 2857\n           fontSize        = 12,                                                                                       // 2858\n           margins         = NO_MARGINS;                                                                               // 2859\n                                                                                                                       // 2860\n           margins.width = this.internal.pageSize.width;                                                               // 2861\n                                                                                                                       // 2862\n        if (config) {                                                                                                  // 2863\n        //override config defaults if the user has specified non-default behavior:                                     // 2864\n            if(config.autoSize === true) {                                                                             // 2865\n                autoSize = true;                                                                                       // 2866\n            }                                                                                                          // 2867\n            if(config.printHeaders === false) {                                                                        // 2868\n                printHeaders = false;                                                                                  // 2869\n            }                                                                                                          // 2870\n            if(config.fontSize){                                                                                       // 2871\n                fontSize = config.fontSize;                                                                            // 2872\n            }                                                                                                          // 2873\n            if(config.margins){                                                                                        // 2874\n                margins = config.margins;                                                                              // 2875\n            }                                                                                                          // 2876\n        }                                                                                                              // 2877\n                                                                                                                       // 2878\n        /**                                                                                                            // 2879\n         * @property {Number} lnMod                                                                                    // 2880\n         * Keep track of the current line number modifier used when creating cells                                     // 2881\n         */                                                                                                            // 2882\n        this.lnMod = 0;                                                                                                // 2883\n        lastCellPos = { x: undefined, y: undefined, w: undefined, h: undefined, ln: undefined },                       // 2884\n        pages = 1;                                                                                                     // 2885\n                                                                                                                       // 2886\n        this.printHeaders = printHeaders;                                                                              // 2887\n        this.margins = margins;                                                                                        // 2888\n        this.setFontSize(fontSize);                                                                                    // 2889\n        this.table_font_size = fontSize;                                                                               // 2890\n                                                                                                                       // 2891\n        // Set header values                                                                                           // 2892\n        if (headers === undefined || (headers === null)) {                                                             // 2893\n            // No headers defined so we derive from data                                                               // 2894\n            headerNames = Object.keys(data[0]);                                                                        // 2895\n                                                                                                                       // 2896\n        } else if (headers[0] && (typeof headers[0] !== 'string')) {                                                   // 2897\n            var px2pt = 0.264583 * 72 / 25.4;                                                                          // 2898\n                                                                                                                       // 2899\n            // Split header configs into names and prompts                                                             // 2900\n            for (i = 0, ln = headers.length; i < ln; i += 1) {                                                         // 2901\n                header = headers[i];                                                                                   // 2902\n                headerNames.push(header.name);                                                                         // 2903\n                headerPrompts.push(header.prompt);                                                                     // 2904\n                columnWidths[header.name] = header.width *px2pt;                                                       // 2905\n            }                                                                                                          // 2906\n                                                                                                                       // 2907\n        } else {                                                                                                       // 2908\n            headerNames = headers;                                                                                     // 2909\n        }                                                                                                              // 2910\n                                                                                                                       // 2911\n        if (autoSize) {                                                                                                // 2912\n            // Create a matrix of columns e.g., {column_title: [row1_Record, row2_Record]}                             // 2913\n            func = function (rec) {                                                                                    // 2914\n                return rec[header];                                                                                    // 2915\n            };                                                                                                         // 2916\n                                                                                                                       // 2917\n            for (i = 0, ln = headerNames.length; i < ln; i += 1) {                                                     // 2918\n                header = headerNames[i];                                                                               // 2919\n                                                                                                                       // 2920\n                columnMatrix[header] = data.map(                                                                       // 2921\n                    func                                                                                               // 2922\n                );                                                                                                     // 2923\n                                                                                                                       // 2924\n                // get header width                                                                                    // 2925\n                columnMinWidths.push(this.getTextDimensions(headerPrompts[i] || header).w);                            // 2926\n                column = columnMatrix[header];                                                                         // 2927\n                                                                                                                       // 2928\n                // get cell widths                                                                                     // 2929\n                for (j = 0, cln = column.length; j < cln; j += 1) {                                                    // 2930\n                    columnData = column[j];                                                                            // 2931\n                    columnMinWidths.push(this.getTextDimensions(columnData).w);                                        // 2932\n                }                                                                                                      // 2933\n                                                                                                                       // 2934\n                // get final column width                                                                              // 2935\n                columnWidths[header] = jsPDFAPI.arrayMax(columnMinWidths);                                             // 2936\n            }                                                                                                          // 2937\n        }                                                                                                              // 2938\n                                                                                                                       // 2939\n        // -- Construct the table                                                                                      // 2940\n                                                                                                                       // 2941\n        if (printHeaders) {                                                                                            // 2942\n            var lineHeight = this.calculateLineHeight(headerNames, columnWidths, headerPrompts.length?headerPrompts:headerNames);\n                                                                                                                       // 2944\n            // Construct the header row                                                                                // 2945\n            for (i = 0, ln = headerNames.length; i < ln; i += 1) {                                                     // 2946\n                header = headerNames[i];                                                                               // 2947\n                tableHeaderConfigs.push([x, y, columnWidths[header], lineHeight, String(headerPrompts.length ? headerPrompts[i] : header)]);\n            }                                                                                                          // 2949\n                                                                                                                       // 2950\n            // Store the table header config                                                                           // 2951\n            this.setTableHeaderRow(tableHeaderConfigs);                                                                // 2952\n                                                                                                                       // 2953\n            // Print the header for the start of the table                                                             // 2954\n            this.printHeaderRow(1, false);                                                                             // 2955\n        }                                                                                                              // 2956\n                                                                                                                       // 2957\n        // Construct the data rows                                                                                     // 2958\n        for (i = 0, ln = data.length; i < ln; i += 1) {                                                                // 2959\n            var lineHeight;                                                                                            // 2960\n            model = data[i];                                                                                           // 2961\n            lineHeight = this.calculateLineHeight(headerNames, columnWidths, model);                                   // 2962\n                                                                                                                       // 2963\n            for (j = 0, jln = headerNames.length; j < jln; j += 1) {                                                   // 2964\n                header = headerNames[j];                                                                               // 2965\n                this.cell(x, y, columnWidths[header], lineHeight, model[header], i + 2, header.align);                 // 2966\n            }                                                                                                          // 2967\n        }                                                                                                              // 2968\n        this.lastCellPos = lastCellPos;                                                                                // 2969\n        this.table_x = x;                                                                                              // 2970\n        this.table_y = y;                                                                                              // 2971\n        return this;                                                                                                   // 2972\n    };                                                                                                                 // 2973\n    /**                                                                                                                // 2974\n     * Calculate the height for containing the highest column                                                          // 2975\n     * @param {String[]} headerNames is the header, used as keys to the data                                           // 2976\n     * @param {Integer[]} columnWidths is size of each column                                                          // 2977\n     * @param {Object[]} model is the line of data we want to calculate the height of                                  // 2978\n     */                                                                                                                // 2979\n    jsPDFAPI.calculateLineHeight = function (headerNames, columnWidths, model) {                                       // 2980\n        var header, lineHeight = 0;                                                                                    // 2981\n        for (var j = 0; j < headerNames.length; j++) {                                                                 // 2982\n            header = headerNames[j];                                                                                   // 2983\n            model[header] = this.splitTextToSize(String(model[header]), columnWidths[header] - padding);               // 2984\n            var h = this.internal.getLineHeight() * model[header].length + padding;                                    // 2985\n            if (h > lineHeight)                                                                                        // 2986\n                lineHeight = h;                                                                                        // 2987\n        }                                                                                                              // 2988\n        return lineHeight;                                                                                             // 2989\n    };                                                                                                                 // 2990\n                                                                                                                       // 2991\n    /**                                                                                                                // 2992\n     * Store the config for outputting a table header                                                                  // 2993\n     * @param {Object[]} config                                                                                        // 2994\n     * An array of cell configs that would define a header row: Each config matches the config used by jsPDFAPI.cell   // 2995\n     * except the ln parameter is excluded                                                                             // 2996\n     */                                                                                                                // 2997\n    jsPDFAPI.setTableHeaderRow = function (config) {                                                                   // 2998\n        this.tableHeaderRow = config;                                                                                  // 2999\n    };                                                                                                                 // 3000\n                                                                                                                       // 3001\n    /**                                                                                                                // 3002\n     * Output the store header row                                                                                     // 3003\n     * @param lineNumber The line number to output the header at                                                       // 3004\n     */                                                                                                                // 3005\n    jsPDFAPI.printHeaderRow = function (lineNumber, new_page) {                                                        // 3006\n        if (!this.tableHeaderRow) {                                                                                    // 3007\n            throw 'Property tableHeaderRow does not exist.';                                                           // 3008\n        }                                                                                                              // 3009\n                                                                                                                       // 3010\n        var tableHeaderCell,                                                                                           // 3011\n            tmpArray,                                                                                                  // 3012\n            i,                                                                                                         // 3013\n            ln;                                                                                                        // 3014\n                                                                                                                       // 3015\n        this.printingHeaderRow = true;                                                                                 // 3016\n        if (headerFunction !== undefined) {                                                                            // 3017\n            var position = headerFunction(this, pages);                                                                // 3018\n            setLastCellPosition(position[0], position[1], position[2], position[3], -1);                               // 3019\n        }                                                                                                              // 3020\n        this.setFontStyle('bold');                                                                                     // 3021\n        var tempHeaderConf = [];                                                                                       // 3022\n        for (i = 0, ln = this.tableHeaderRow.length; i < ln; i += 1) {                                                 // 3023\n            this.setFillColor(200,200,200);                                                                            // 3024\n                                                                                                                       // 3025\n            tableHeaderCell = this.tableHeaderRow[i];                                                                  // 3026\n            if (new_page) {                                                                                            // 3027\n                tableHeaderCell[1] = this.margins && this.margins.top || 0;                                            // 3028\n                tempHeaderConf.push(tableHeaderCell);                                                                  // 3029\n            }                                                                                                          // 3030\n            tmpArray = [].concat(tableHeaderCell);                                                                     // 3031\n            this.cell.apply(this, tmpArray.concat(lineNumber));                                                        // 3032\n        }                                                                                                              // 3033\n        if (tempHeaderConf.length > 0){                                                                                // 3034\n            this.setTableHeaderRow(tempHeaderConf);                                                                    // 3035\n        }                                                                                                              // 3036\n        this.setFontStyle('normal');                                                                                   // 3037\n        this.printingHeaderRow = false;                                                                                // 3038\n    };                                                                                                                 // 3039\n                                                                                                                       // 3040\n})(jsPDF.API);                                                                                                         // 3041\n/** @preserve                                                                                                          // 3042\n * jsPDF fromHTML plugin. BETA stage. API subject to change. Needs browser                                             // 3043\n * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com                                                   // 3044\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria                                              // 3045\n *               2014 Diego Casorran, https://github.com/diegocr                                                       // 3046\n *               2014 Daniel Husar, https://github.com/danielhusar                                                     // 3047\n *               2014 Wolfgang Gassler, https://github.com/woolfg                                                      // 3048\n *                                                                                                                     // 3049\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 3050\n * a copy of this software and associated documentation files (the                                                     // 3051\n * \"Software\"), to deal in the Software without restriction, including                                                 // 3052\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 3053\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 3054\n * permit persons to whom the Software is furnished to do so, subject to                                               // 3055\n * the following conditions:                                                                                           // 3056\n *                                                                                                                     // 3057\n * The above copyright notice and this permission notice shall be                                                      // 3058\n * included in all copies or substantial portions of the Software.                                                     // 3059\n *                                                                                                                     // 3060\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 3061\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 3062\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 3063\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 3064\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 3065\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 3066\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 3067\n * ====================================================================                                                // 3068\n */                                                                                                                    // 3069\n                                                                                                                       // 3070\n(function (jsPDFAPI) {                                                                                                 // 3071\n\tvar clone,                                                                                                            // 3072\n\tDrillForContent,                                                                                                      // 3073\n\tFontNameDB,                                                                                                           // 3074\n\tFontStyleMap,                                                                                                         // 3075\n\tFontWeightMap,                                                                                                        // 3076\n\tFloatMap,                                                                                                             // 3077\n\tClearMap,                                                                                                             // 3078\n\tGetCSS,                                                                                                               // 3079\n\tPurgeWhiteSpace,                                                                                                      // 3080\n\tRenderer,                                                                                                             // 3081\n\tResolveFont,                                                                                                          // 3082\n\tResolveUnitedNumber,                                                                                                  // 3083\n\tUnitedNumberMap,                                                                                                      // 3084\n\telementHandledElsewhere,                                                                                              // 3085\n\timages,                                                                                                               // 3086\n\tloadImgs,                                                                                                             // 3087\n\tcheckForFooter,                                                                                                       // 3088\n\tprocess,                                                                                                              // 3089\n\ttableToJson;                                                                                                          // 3090\n\tclone = (function () {                                                                                                // 3091\n\t\treturn function (obj) {                                                                                              // 3092\n\t\t\tClone.prototype = obj;                                                                                              // 3093\n\t\t\treturn new Clone()                                                                                                  // 3094\n\t\t};                                                                                                                   // 3095\n\t\tfunction Clone() {}                                                                                                  // 3096\n\t})();                                                                                                                 // 3097\n\tPurgeWhiteSpace = function (array) {                                                                                  // 3098\n\t\tvar fragment,                                                                                                        // 3099\n\t\ti,                                                                                                                   // 3100\n\t\tl,                                                                                                                   // 3101\n\t\tlTrimmed,                                                                                                            // 3102\n\t\tr,                                                                                                                   // 3103\n\t\trTrimmed,                                                                                                            // 3104\n\t\ttrailingSpace;                                                                                                       // 3105\n\t\ti = 0;                                                                                                               // 3106\n\t\tl = array.length;                                                                                                    // 3107\n\t\tfragment = void 0;                                                                                                   // 3108\n\t\tlTrimmed = false;                                                                                                    // 3109\n\t\trTrimmed = false;                                                                                                    // 3110\n\t\twhile (!lTrimmed && i !== l) {                                                                                       // 3111\n\t\t\tfragment = array[i] = array[i].trimLeft();                                                                          // 3112\n\t\t\tif (fragment) {                                                                                                     // 3113\n\t\t\t\tlTrimmed = true;                                                                                                   // 3114\n\t\t\t}                                                                                                                   // 3115\n\t\t\ti++;                                                                                                                // 3116\n\t\t}                                                                                                                    // 3117\n\t\ti = l - 1;                                                                                                           // 3118\n\t\twhile (l && !rTrimmed && i !== -1) {                                                                                 // 3119\n\t\t\tfragment = array[i] = array[i].trimRight();                                                                         // 3120\n\t\t\tif (fragment) {                                                                                                     // 3121\n\t\t\t\trTrimmed = true;                                                                                                   // 3122\n\t\t\t}                                                                                                                   // 3123\n\t\t\ti--;                                                                                                                // 3124\n\t\t}                                                                                                                    // 3125\n\t\tr = /\\s+$/g;                                                                                                         // 3126\n\t\ttrailingSpace = true;                                                                                                // 3127\n\t\ti = 0;                                                                                                               // 3128\n\t\twhile (i !== l) {                                                                                                    // 3129\n\t\t\tfragment = array[i].replace(/\\s+/g, \" \");                                                                           // 3130\n\t\t\tif (trailingSpace) {                                                                                                // 3131\n\t\t\t\tfragment = fragment.trimLeft();                                                                                    // 3132\n\t\t\t}                                                                                                                   // 3133\n\t\t\tif (fragment) {                                                                                                     // 3134\n\t\t\t\ttrailingSpace = r.test(fragment);                                                                                  // 3135\n\t\t\t}                                                                                                                   // 3136\n\t\t\tarray[i] = fragment;                                                                                                // 3137\n\t\t\ti++;                                                                                                                // 3138\n\t\t}                                                                                                                    // 3139\n\t\treturn array;                                                                                                        // 3140\n\t};                                                                                                                    // 3141\n\tRenderer = function (pdf, x, y, settings) {                                                                           // 3142\n\t\tthis.pdf = pdf;                                                                                                      // 3143\n\t\tthis.x = x;                                                                                                          // 3144\n\t\tthis.y = y;                                                                                                          // 3145\n\t\tthis.settings = settings;                                                                                            // 3146\n\t\t//list of functions which are called after each element-rendering process                                            // 3147\n\t\tthis.watchFunctions = [];                                                                                            // 3148\n\t\tthis.init();                                                                                                         // 3149\n\t\treturn this;                                                                                                         // 3150\n\t};                                                                                                                    // 3151\n\tResolveFont = function (css_font_family_string) {                                                                     // 3152\n\t\tvar name,                                                                                                            // 3153\n\t\tpart,                                                                                                                // 3154\n\t\tparts;                                                                                                               // 3155\n\t\tname = void 0;                                                                                                       // 3156\n\t\tparts = css_font_family_string.split(\",\");                                                                           // 3157\n\t\tpart = parts.shift();                                                                                                // 3158\n\t\twhile (!name && part) {                                                                                              // 3159\n\t\t\tname = FontNameDB[part.trim().toLowerCase()];                                                                       // 3160\n\t\t\tpart = parts.shift();                                                                                               // 3161\n\t\t}                                                                                                                    // 3162\n\t\treturn name;                                                                                                         // 3163\n\t};                                                                                                                    // 3164\n\tResolveUnitedNumber = function (css_line_height_string) {                                                             // 3165\n                                                                                                                       // 3166\n\t\t//IE8 issues                                                                                                         // 3167\n\t\tcss_line_height_string = css_line_height_string === \"auto\" ? \"0px\" : css_line_height_string;                         // 3168\n\t\tif (css_line_height_string.indexOf(\"em\") > -1 && !isNaN(Number(css_line_height_string.replace(\"em\", \"\")))) {         // 3169\n\t\t\tcss_line_height_string = Number(css_line_height_string.replace(\"em\", \"\")) * 18.719 + \"px\";                          // 3170\n\t\t}                                                                                                                    // 3171\n\t\tif (css_line_height_string.indexOf(\"pt\") > -1 && !isNaN(Number(css_line_height_string.replace(\"pt\", \"\")))) {         // 3172\n\t\t\tcss_line_height_string = Number(css_line_height_string.replace(\"pt\", \"\")) * 1.333 + \"px\";                           // 3173\n\t\t}                                                                                                                    // 3174\n                                                                                                                       // 3175\n\t\tvar normal,                                                                                                          // 3176\n\t\tundef,                                                                                                               // 3177\n\t\tvalue;                                                                                                               // 3178\n\t\tundef = void 0;                                                                                                      // 3179\n\t\tnormal = 16.00;                                                                                                      // 3180\n\t\tvalue = UnitedNumberMap[css_line_height_string];                                                                     // 3181\n\t\tif (value) {                                                                                                         // 3182\n\t\t\treturn value;                                                                                                       // 3183\n\t\t}                                                                                                                    // 3184\n\t\tvalue = {                                                                                                            // 3185\n\t\t\t\"xx-small\"  :  9,                                                                                                   // 3186\n\t\t\t\"x-small\"   : 11,                                                                                                   // 3187\n\t\t\tsmall       : 13,                                                                                                   // 3188\n\t\t\tmedium      : 16,                                                                                                   // 3189\n\t\t\tlarge       : 19,                                                                                                   // 3190\n\t\t\t\"x-large\"   : 23,                                                                                                   // 3191\n\t\t\t\"xx-large\"  : 28,                                                                                                   // 3192\n\t\t\tauto        :  0                                                                                                    // 3193\n\t\t}[{ css_line_height_string : css_line_height_string }];                                                              // 3194\n                                                                                                                       // 3195\n\t\tif (value !== undef) {                                                                                               // 3196\n\t\t\treturn UnitedNumberMap[css_line_height_string] = value / normal;                                                    // 3197\n\t\t}                                                                                                                    // 3198\n\t\tif (value = parseFloat(css_line_height_string)) {                                                                    // 3199\n\t\t\treturn UnitedNumberMap[css_line_height_string] = value / normal;                                                    // 3200\n\t\t}                                                                                                                    // 3201\n\t\tvalue = css_line_height_string.match(/([\\d\\.]+)(px)/);                                                               // 3202\n\t\tif (value.length === 3) {                                                                                            // 3203\n\t\t\treturn UnitedNumberMap[css_line_height_string] = parseFloat(value[1]) / normal;                                     // 3204\n\t\t}                                                                                                                    // 3205\n\t\treturn UnitedNumberMap[css_line_height_string] = 1;                                                                  // 3206\n\t};                                                                                                                    // 3207\n\tGetCSS = function (element) {                                                                                         // 3208\n\t\tvar css,tmp,computedCSSElement;                                                                                      // 3209\n\t\tcomputedCSSElement = (function (el) {                                                                                // 3210\n\t\t\tvar compCSS;                                                                                                        // 3211\n\t\t\tcompCSS = (function (el) {                                                                                          // 3212\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {                                               // 3213\n\t\t\t\t\treturn document.defaultView.getComputedStyle(el, null);                                                           // 3214\n\t\t\t\t} else if (el.currentStyle) {                                                                                      // 3215\n\t\t\t\t\treturn el.currentStyle;                                                                                           // 3216\n\t\t\t\t} else {                                                                                                           // 3217\n\t\t\t\t\treturn el.style;                                                                                                  // 3218\n\t\t\t\t}                                                                                                                  // 3219\n\t\t\t})(el);                                                                                                             // 3220\n\t\t\treturn function (prop) {                                                                                            // 3221\n\t\t\t\tprop = prop.replace(/-\\D/g, function (match) {                                                                     // 3222\n\t\t\t\t\treturn match.charAt(1).toUpperCase();                                                                             // 3223\n\t\t\t\t});                                                                                                                // 3224\n\t\t\t\treturn compCSS[prop];                                                                                              // 3225\n\t\t\t};                                                                                                                  // 3226\n\t\t})(element);                                                                                                         // 3227\n\t\tcss = {};                                                                                                            // 3228\n\t\ttmp = void 0;                                                                                                        // 3229\n\t\tcss[\"font-family\"] = ResolveFont(computedCSSElement(\"font-family\")) || \"times\";                                      // 3230\n\t\tcss[\"font-style\"] = FontStyleMap[computedCSSElement(\"font-style\")] || \"normal\";                                      // 3231\n\t\tcss[\"text-align\"] = TextAlignMap[computedCSSElement(\"text-align\")] || \"left\";                                        // 3232\n\t\ttmp = FontWeightMap[computedCSSElement(\"font-weight\")] || \"normal\";                                                  // 3233\n\t\tif (tmp === \"bold\") {                                                                                                // 3234\n\t\t\tif (css[\"font-style\"] === \"normal\") {                                                                               // 3235\n\t\t\t\tcss[\"font-style\"] = tmp;                                                                                           // 3236\n\t\t\t} else {                                                                                                            // 3237\n\t\t\t\tcss[\"font-style\"] = tmp + css[\"font-style\"];                                                                       // 3238\n\t\t\t}                                                                                                                   // 3239\n\t\t}                                                                                                                    // 3240\n\t\tcss[\"font-size\"] = ResolveUnitedNumber(computedCSSElement(\"font-size\")) || 1;                                        // 3241\n\t\tcss[\"line-height\"] = ResolveUnitedNumber(computedCSSElement(\"line-height\")) || 1;                                    // 3242\n\t\tcss[\"display\"] = (computedCSSElement(\"display\") === \"inline\" ? \"inline\" : \"block\");                                  // 3243\n                                                                                                                       // 3244\n\t\ttmp = (css[\"display\"] === \"block\");                                                                                  // 3245\n\t\tcss[\"margin-top\"]     = tmp && ResolveUnitedNumber(computedCSSElement(\"margin-top\"))     || 0;                       // 3246\n\t\tcss[\"margin-bottom\"]  = tmp && ResolveUnitedNumber(computedCSSElement(\"margin-bottom\"))  || 0;                       // 3247\n\t\tcss[\"padding-top\"]    = tmp && ResolveUnitedNumber(computedCSSElement(\"padding-top\"))    || 0;                       // 3248\n\t\tcss[\"padding-bottom\"] = tmp && ResolveUnitedNumber(computedCSSElement(\"padding-bottom\")) || 0;                       // 3249\n\t\tcss[\"margin-left\"]    = tmp && ResolveUnitedNumber(computedCSSElement(\"margin-left\"))    || 0;                       // 3250\n\t\tcss[\"margin-right\"]   = tmp && ResolveUnitedNumber(computedCSSElement(\"margin-right\"))   || 0;                       // 3251\n\t\tcss[\"padding-left\"]   = tmp && ResolveUnitedNumber(computedCSSElement(\"padding-left\"))   || 0;                       // 3252\n\t\tcss[\"padding-right\"]  = tmp && ResolveUnitedNumber(computedCSSElement(\"padding-right\"))  || 0;                       // 3253\n                                                                                                                       // 3254\n\t\t//float and clearing of floats                                                                                       // 3255\n\t\tcss[\"float\"] = FloatMap[computedCSSElement(\"cssFloat\")] || \"none\";                                                   // 3256\n\t\tcss[\"clear\"] = ClearMap[computedCSSElement(\"clear\")] || \"none\";                                                      // 3257\n\t\treturn css;                                                                                                          // 3258\n\t};                                                                                                                    // 3259\n\telementHandledElsewhere = function (element, renderer, elementHandlers) {                                             // 3260\n\t\tvar handlers,                                                                                                        // 3261\n\t\ti,                                                                                                                   // 3262\n\t\tisHandledElsewhere,                                                                                                  // 3263\n\t\tl,                                                                                                                   // 3264\n\t\tt;                                                                                                                   // 3265\n\t\tisHandledElsewhere = false;                                                                                          // 3266\n\t\ti = void 0;                                                                                                          // 3267\n\t\tl = void 0;                                                                                                          // 3268\n\t\tt = void 0;                                                                                                          // 3269\n\t\thandlers = elementHandlers[\"#\" + element.id];                                                                        // 3270\n\t\tif (handlers) {                                                                                                      // 3271\n\t\t\tif (typeof handlers === \"function\") {                                                                               // 3272\n\t\t\t\tisHandledElsewhere = handlers(element, renderer);                                                                  // 3273\n\t\t\t} else {                                                                                                            // 3274\n\t\t\t\ti = 0;                                                                                                             // 3275\n\t\t\t\tl = handlers.length;                                                                                               // 3276\n\t\t\t\twhile (!isHandledElsewhere && i !== l) {                                                                           // 3277\n\t\t\t\t\tisHandledElsewhere = handlers[i](element, renderer);                                                              // 3278\n\t\t\t\t\ti++;                                                                                                              // 3279\n\t\t\t\t}                                                                                                                  // 3280\n\t\t\t}                                                                                                                   // 3281\n\t\t}                                                                                                                    // 3282\n\t\thandlers = elementHandlers[element.nodeName];                                                                        // 3283\n\t\tif (!isHandledElsewhere && handlers) {                                                                               // 3284\n\t\t\tif (typeof handlers === \"function\") {                                                                               // 3285\n\t\t\t\tisHandledElsewhere = handlers(element, renderer);                                                                  // 3286\n\t\t\t} else {                                                                                                            // 3287\n\t\t\t\ti = 0;                                                                                                             // 3288\n\t\t\t\tl = handlers.length;                                                                                               // 3289\n\t\t\t\twhile (!isHandledElsewhere && i !== l) {                                                                           // 3290\n\t\t\t\t\tisHandledElsewhere = handlers[i](element, renderer);                                                              // 3291\n\t\t\t\t\ti++;                                                                                                              // 3292\n\t\t\t\t}                                                                                                                  // 3293\n\t\t\t}                                                                                                                   // 3294\n\t\t}                                                                                                                    // 3295\n\t\treturn isHandledElsewhere;                                                                                           // 3296\n\t};                                                                                                                    // 3297\n\ttableToJson = function (table, renderer) {                                                                            // 3298\n\t\tvar data,                                                                                                            // 3299\n\t\theaders,                                                                                                             // 3300\n\t\ti,                                                                                                                   // 3301\n\t\tj,                                                                                                                   // 3302\n\t\trowData,                                                                                                             // 3303\n\t\ttableRow,                                                                                                            // 3304\n\t\ttable_obj,                                                                                                           // 3305\n\t\ttable_with,                                                                                                          // 3306\n\t\tcell,                                                                                                                // 3307\n\t\tl;                                                                                                                   // 3308\n\t\tdata = [];                                                                                                           // 3309\n\t\theaders = [];                                                                                                        // 3310\n\t\ti = 0;                                                                                                               // 3311\n\t\tl = table.rows[0].cells.length;                                                                                      // 3312\n\t\ttable_with = table.clientWidth;                                                                                      // 3313\n\t\twhile (i < l) {                                                                                                      // 3314\n\t\t\tcell = table.rows[0].cells[i];                                                                                      // 3315\n\t\t\theaders[i] = {                                                                                                      // 3316\n\t\t\t\tname : cell.textContent.toLowerCase().replace(/\\s+/g, ''),                                                         // 3317\n\t\t\t\tprompt : cell.textContent.replace(/\\r?\\n/g, ''),                                                                   // 3318\n\t\t\t\twidth : (cell.clientWidth / table_with) * renderer.pdf.internal.pageSize.width                                     // 3319\n\t\t\t};                                                                                                                  // 3320\n\t\t\ti++;                                                                                                                // 3321\n\t\t}                                                                                                                    // 3322\n\t\ti = 1;                                                                                                               // 3323\n\t\twhile (i < table.rows.length) {                                                                                      // 3324\n\t\t\ttableRow = table.rows[i];                                                                                           // 3325\n\t\t\trowData = {};                                                                                                       // 3326\n\t\t\tj = 0;                                                                                                              // 3327\n\t\t\twhile (j < tableRow.cells.length) {                                                                                 // 3328\n\t\t\t\trowData[headers[j].name] = tableRow.cells[j].textContent.replace(/\\r?\\n/g, '');                                    // 3329\n\t\t\t\tj++;                                                                                                               // 3330\n\t\t\t}                                                                                                                   // 3331\n\t\t\tdata.push(rowData);                                                                                                 // 3332\n\t\t\ti++;                                                                                                                // 3333\n\t\t}                                                                                                                    // 3334\n\t\treturn table_obj = {                                                                                                 // 3335\n\t\t\trows : data,                                                                                                        // 3336\n\t\t\theaders : headers                                                                                                   // 3337\n\t\t};                                                                                                                   // 3338\n\t};                                                                                                                    // 3339\n\tvar SkipNode = {                                                                                                      // 3340\n\t\tSCRIPT   : 1,                                                                                                        // 3341\n\t\tSTYLE    : 1,                                                                                                        // 3342\n\t\tNOSCRIPT : 1,                                                                                                        // 3343\n\t\tOBJECT   : 1,                                                                                                        // 3344\n\t\tEMBED    : 1,                                                                                                        // 3345\n\t\tSELECT   : 1                                                                                                         // 3346\n\t};                                                                                                                    // 3347\n\tvar listCount = 1;                                                                                                    // 3348\n\tDrillForContent = function (element, renderer, elementHandlers) {                                                     // 3349\n\t\tvar cn,                                                                                                              // 3350\n\t\tcns,                                                                                                                 // 3351\n\t\tfragmentCSS,                                                                                                         // 3352\n\t\ti,                                                                                                                   // 3353\n\t\tisBlock,                                                                                                             // 3354\n\t\tl,                                                                                                                   // 3355\n\t\tpx2pt,                                                                                                               // 3356\n\t\ttable2json,                                                                                                          // 3357\n\t\tcb;                                                                                                                  // 3358\n\t\tcns = element.childNodes;                                                                                            // 3359\n\t\tcn = void 0;                                                                                                         // 3360\n\t\tfragmentCSS = GetCSS(element);                                                                                       // 3361\n\t\tisBlock = fragmentCSS.display === \"block\";                                                                           // 3362\n\t\tif (isBlock) {                                                                                                       // 3363\n\t\t\trenderer.setBlockBoundary();                                                                                        // 3364\n\t\t\trenderer.setBlockStyle(fragmentCSS);                                                                                // 3365\n\t\t}                                                                                                                    // 3366\n\t\tpx2pt = 0.264583 * 72 / 25.4;                                                                                        // 3367\n\t\ti = 0;                                                                                                               // 3368\n\t\tl = cns.length;                                                                                                      // 3369\n\t\twhile (i < l) {                                                                                                      // 3370\n\t\t\tcn = cns[i];                                                                                                        // 3371\n\t\t\tif (typeof cn === \"object\") {                                                                                       // 3372\n                                                                                                                       // 3373\n\t\t\t\t//execute all watcher functions to e.g. reset floating                                                             // 3374\n\t\t\t\trenderer.executeWatchFunctions(cn);                                                                                // 3375\n                                                                                                                       // 3376\n\t\t\t\t/*** HEADER rendering **/                                                                                          // 3377\n\t\t\t\tif (cn.nodeType === 1 && cn.nodeName === 'HEADER') {                                                               // 3378\n\t\t\t\t\tvar header = cn;                                                                                                  // 3379\n\t\t\t\t\t//store old top margin                                                                                            // 3380\n\t\t\t\t\tvar oldMarginTop = renderer.pdf.margins_doc.top;                                                                  // 3381\n\t\t\t\t\t//subscribe for new page event and render header first on every page                                              // 3382\n\t\t\t\t\trenderer.pdf.internal.events.subscribe('addPage', function (pageInfo) {                                           // 3383\n\t\t\t\t\t\t//set current y position to old margin                                                                           // 3384\n\t\t\t\t\t\trenderer.y = oldMarginTop;                                                                                       // 3385\n\t\t\t\t\t\t//render all child nodes of the header element                                                                   // 3386\n\t\t\t\t\t\tDrillForContent(header, renderer, elementHandlers);                                                              // 3387\n\t\t\t\t\t\t//set margin to old margin + rendered header + 10 space to prevent overlapping                                   // 3388\n\t\t\t\t\t\t//important for other plugins (e.g. table) to start rendering at correct position after header                   // 3389\n\t\t\t\t\t\trenderer.pdf.margins_doc.top = renderer.y + 10;                                                                  // 3390\n\t\t\t\t\t\trenderer.y += 10;                                                                                                // 3391\n\t\t\t\t\t}, false);                                                                                                        // 3392\n\t\t\t\t}                                                                                                                  // 3393\n                                                                                                                       // 3394\n\t\t\t\tif (cn.nodeType === 8 && cn.nodeName === \"#comment\") {                                                             // 3395\n\t\t\t\t\tif (~cn.textContent.indexOf(\"ADD_PAGE\")) {                                                                        // 3396\n\t\t\t\t\t\trenderer.pdf.addPage();                                                                                          // 3397\n\t\t\t\t\t\trenderer.y = renderer.pdf.margins_doc.top;                                                                       // 3398\n\t\t\t\t\t}                                                                                                                 // 3399\n                                                                                                                       // 3400\n\t\t\t\t} else if (cn.nodeType === 1 && !SkipNode[cn.nodeName]) {                                                          // 3401\n\t\t\t\t\t/*** IMAGE RENDERING ***/                                                                                         // 3402\n\t\t\t\t\tvar cached_image;                                                                                                 // 3403\n\t\t\t\t\tif (cn.nodeName === \"IMG\") {                                                                                      // 3404\n\t\t\t\t\t\tvar url = cn.getAttribute(\"src\");                                                                                // 3405\n\t\t\t\t\t\tcached_image = images[renderer.pdf.sHashCode(url) || url];                                                       // 3406\n\t\t\t\t\t}                                                                                                                 // 3407\n\t\t\t\t\tif (cached_image) {                                                                                               // 3408\n\t\t\t\t\t\tif ((renderer.pdf.internal.pageSize.height - renderer.pdf.margins_doc.bottom < renderer.y + cn.height) && (renderer.y > renderer.pdf.margins_doc.top)) {\n\t\t\t\t\t\t\trenderer.pdf.addPage();                                                                                         // 3410\n\t\t\t\t\t\t\trenderer.y = renderer.pdf.margins_doc.top;                                                                      // 3411\n\t\t\t\t\t\t\t//check if we have to set back some values due to e.g. header rendering for new page                            // 3412\n\t\t\t\t\t\t\trenderer.executeWatchFunctions(cn);                                                                             // 3413\n\t\t\t\t\t\t}                                                                                                                // 3414\n                                                                                                                       // 3415\n\t\t\t\t\t\tvar imagesCSS = GetCSS(cn);                                                                                      // 3416\n\t\t\t\t\t\tvar imageX = renderer.x;                                                                                         // 3417\n\t\t\t\t\t\tvar fontToUnitRatio = 12 / renderer.pdf.internal.scaleFactor;                                                    // 3418\n                                                                                                                       // 3419\n\t\t\t\t\t\t//define additional paddings, margins which have to be taken into account for margin calculations                // 3420\n\t\t\t\t\t\tvar additionalSpaceLeft = (imagesCSS[\"margin-left\"] + imagesCSS[\"padding-left\"])*fontToUnitRatio;                // 3421\n\t\t\t\t\t\tvar additionalSpaceRight = (imagesCSS[\"margin-right\"] + imagesCSS[\"padding-right\"])*fontToUnitRatio;             // 3422\n\t\t\t\t\t\tvar additionalSpaceTop = (imagesCSS[\"margin-top\"] + imagesCSS[\"padding-top\"])*fontToUnitRatio;                   // 3423\n\t\t\t\t\t\tvar additionalSpaceBottom = (imagesCSS[\"margin-bottom\"] + imagesCSS[\"padding-bottom\"])*fontToUnitRatio;          // 3424\n                                                                                                                       // 3425\n\t\t\t\t\t\t//if float is set to right, move the image to the right border                                                   // 3426\n\t\t\t\t\t\t//add space if margin is set                                                                                     // 3427\n\t\t\t\t\t\tif (imagesCSS['float'] !== undefined && imagesCSS['float'] === 'right') {                                        // 3428\n\t\t\t\t\t\t\timageX += renderer.settings.width - cn.width - additionalSpaceRight;                                            // 3429\n\t\t\t\t\t\t} else {                                                                                                         // 3430\n\t\t\t\t\t\t\timageX +=  additionalSpaceLeft;                                                                                 // 3431\n\t\t\t\t\t\t}                                                                                                                // 3432\n                                                                                                                       // 3433\n\t\t\t\t\t\trenderer.pdf.addImage(cached_image, imageX, renderer.y + additionalSpaceTop, cn.width, cn.height);               // 3434\n\t\t\t\t\t\tcached_image = undefined;                                                                                        // 3435\n\t\t\t\t\t\t//if the float prop is specified we have to float the text around the image                                      // 3436\n\t\t\t\t\t\tif (imagesCSS['float'] === 'right' || imagesCSS['float'] === 'left') {                                           // 3437\n\t\t\t\t\t\t\t//add functiont to set back coordinates after image rendering                                                   // 3438\n\t\t\t\t\t\t\trenderer.watchFunctions.push((function(diffX , thresholdY, diffWidth, el) {                                     // 3439\n\t\t\t\t\t\t\t\t//undo drawing box adaptions which were set by floating                                                        // 3440\n\t\t\t\t\t\t\t\tif (renderer.y >= thresholdY) {                                                                                // 3441\n\t\t\t\t\t\t\t\t\trenderer.x += diffX;                                                                                          // 3442\n\t\t\t\t\t\t\t\t\trenderer.settings.width += diffWidth;                                                                         // 3443\n\t\t\t\t\t\t\t\t\treturn true;                                                                                                  // 3444\n\t\t\t\t\t\t\t\t} else if(el && el.nodeType === 1 && !SkipNode[el.nodeName] && renderer.x+el.width > (renderer.pdf.margins_doc.left + renderer.pdf.margins_doc.width)) {\n\t\t\t\t\t\t\t\t\trenderer.x += diffX;                                                                                          // 3446\n\t\t\t\t\t\t\t\t\trenderer.y = thresholdY;                                                                                      // 3447\n\t\t\t\t\t\t\t\t\trenderer.settings.width += diffWidth;                                                                         // 3448\n\t\t\t\t\t\t\t\t\treturn true;                                                                                                  // 3449\n\t\t\t\t\t\t\t\t} else {                                                                                                       // 3450\n\t\t\t\t\t\t\t\t\treturn false;                                                                                                 // 3451\n\t\t\t\t\t\t\t\t}                                                                                                              // 3452\n\t\t\t\t\t\t\t}).bind(this, (imagesCSS['float'] === 'left') ? -cn.width-additionalSpaceLeft-additionalSpaceRight : 0, renderer.y+cn.height+additionalSpaceTop+additionalSpaceBottom, cn.width));\n\t\t\t\t\t\t\t//reset floating by clear:both divs                                                                             // 3454\n\t\t\t\t\t\t\t//just set cursorY after the floating element                                                                   // 3455\n\t\t\t\t\t\t\trenderer.watchFunctions.push((function(yPositionAfterFloating, pages, el) {                                     // 3456\n\t\t\t\t\t\t\t\tif (renderer.y < yPositionAfterFloating && pages === renderer.pdf.internal.getNumberOfPages()) {               // 3457\n\t\t\t\t\t\t\t\t\tif (el.nodeType === 1 && GetCSS(el).clear === 'both') {                                                       // 3458\n\t\t\t\t\t\t\t\t\t\trenderer.y = yPositionAfterFloating;                                                                         // 3459\n\t\t\t\t\t\t\t\t\t\treturn true;                                                                                                 // 3460\n\t\t\t\t\t\t\t\t\t} else {                                                                                                      // 3461\n\t\t\t\t\t\t\t\t\t\treturn false;                                                                                                // 3462\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 3463\n\t\t\t\t\t\t\t\t} else {                                                                                                       // 3464\n\t\t\t\t\t\t\t\t\treturn true;                                                                                                  // 3465\n\t\t\t\t\t\t\t\t}                                                                                                              // 3466\n\t\t\t\t\t\t\t}).bind(this, renderer.y+cn.height, renderer.pdf.internal.getNumberOfPages()));                                 // 3467\n                                                                                                                       // 3468\n\t\t\t\t\t\t\t//if floating is set we decrease the available width by the image width                                         // 3469\n\t\t\t\t\t\t\trenderer.settings.width -= cn.width+additionalSpaceLeft+additionalSpaceRight;                                   // 3470\n\t\t\t\t\t\t\t//if left just add the image width to the X coordinate                                                          // 3471\n\t\t\t\t\t\t\tif (imagesCSS['float'] === 'left') {                                                                            // 3472\n\t\t\t\t\t\t\t\trenderer.x += cn.width+additionalSpaceLeft+additionalSpaceRight;                                               // 3473\n\t\t\t\t\t\t\t}                                                                                                               // 3474\n\t\t\t\t\t\t} else {                                                                                                         // 3475\n\t\t\t\t\t\t//if no floating is set, move the rendering cursor after the image height                                        // 3476\n\t\t\t\t\t\t\trenderer.y += cn.height + additionalSpaceBottom;                                                                // 3477\n\t\t\t\t\t\t}                                                                                                                // 3478\n                                                                                                                       // 3479\n\t\t\t\t\t/*** TABLE RENDERING ***/                                                                                         // 3480\n\t\t\t\t\t} else if (cn.nodeName === \"TABLE\") {                                                                             // 3481\n\t\t\t\t\t\ttable2json = tableToJson(cn, renderer);                                                                          // 3482\n\t\t\t\t\t\trenderer.y += 10;                                                                                                // 3483\n\t\t\t\t\t\trenderer.pdf.table(renderer.x, renderer.y, table2json.rows, table2json.headers, {                                // 3484\n\t\t\t\t\t\t\tautoSize : false,                                                                                               // 3485\n\t\t\t\t\t\t\tprintHeaders : true,                                                                                            // 3486\n\t\t\t\t\t\t\tmargins : renderer.pdf.margins_doc                                                                              // 3487\n\t\t\t\t\t\t});                                                                                                              // 3488\n\t\t\t\t\t\trenderer.y = renderer.pdf.lastCellPos.y + renderer.pdf.lastCellPos.h + 20;                                       // 3489\n\t\t\t\t\t} else if (cn.nodeName === \"OL\" || cn.nodeName === \"UL\") {                                                        // 3490\n\t\t\t\t\t\tlistCount = 1;                                                                                                   // 3491\n\t\t\t\t\t\tif (!elementHandledElsewhere(cn, renderer, elementHandlers)) {                                                   // 3492\n\t\t\t\t\t\t\tDrillForContent(cn, renderer, elementHandlers);                                                                 // 3493\n\t\t\t\t\t\t}                                                                                                                // 3494\n\t\t\t\t\t\trenderer.y += 10;                                                                                                // 3495\n\t\t\t\t\t} else if (cn.nodeName === \"LI\") {                                                                                // 3496\n\t\t\t\t\t\tvar temp = renderer.x;                                                                                           // 3497\n\t\t\t\t\t\trenderer.x += cn.parentNode.nodeName === \"UL\" ? 22 : 10;                                                         // 3498\n\t\t\t\t\t\trenderer.y += 3;                                                                                                 // 3499\n\t\t\t\t\t\tif (!elementHandledElsewhere(cn, renderer, elementHandlers)) {                                                   // 3500\n\t\t\t\t\t\t\tDrillForContent(cn, renderer, elementHandlers);                                                                 // 3501\n\t\t\t\t\t\t}                                                                                                                // 3502\n\t\t\t\t\t\trenderer.x = temp;                                                                                               // 3503\n\t\t\t\t\t} else if (cn.nodeName === \"BR\") {                                                                                // 3504\n\t\t\t\t\t\trenderer.y += fragmentCSS[\"font-size\"] * renderer.pdf.internal.scaleFactor;                                      // 3505\n\t\t\t\t\t} else {                                                                                                          // 3506\n\t\t\t\t\t\tif (!elementHandledElsewhere(cn, renderer, elementHandlers)) {                                                   // 3507\n\t\t\t\t\t\t\tDrillForContent(cn, renderer, elementHandlers);                                                                 // 3508\n\t\t\t\t\t\t}                                                                                                                // 3509\n\t\t\t\t\t}                                                                                                                 // 3510\n\t\t\t\t} else if (cn.nodeType === 3) {                                                                                    // 3511\n\t\t\t\t\tvar value = cn.nodeValue;                                                                                         // 3512\n\t\t\t\t\tif (cn.nodeValue && cn.parentNode.nodeName === \"LI\") {                                                            // 3513\n\t\t\t\t\t\tif (cn.parentNode.parentNode.nodeName === \"OL\") {                                                                // 3514\n\t\t\t\t\t\t\tvalue = listCount++ + '. ' + value;                                                                             // 3515\n\t\t\t\t\t\t} else {                                                                                                         // 3516\n\t\t\t\t\t\t\tvar fontPx = fragmentCSS[\"font-size\"] * 16;                                                                     // 3517\n\t\t\t\t\t\t\tvar radius = 2;                                                                                                 // 3518\n\t\t\t\t\t\t\tif (fontPx > 20) {                                                                                              // 3519\n\t\t\t\t\t\t\t\tradius = 3;                                                                                                    // 3520\n\t\t\t\t\t\t\t}                                                                                                               // 3521\n\t\t\t\t\t\t\tcb = function (x, y) {                                                                                          // 3522\n\t\t\t\t\t\t\t\tthis.pdf.circle(x, y, radius, 'FD');                                                                           // 3523\n\t\t\t\t\t\t\t};                                                                                                              // 3524\n\t\t\t\t\t\t}                                                                                                                // 3525\n\t\t\t\t\t}                                                                                                                 // 3526\n\t\t\t\t\trenderer.addText(value, fragmentCSS);                                                                             // 3527\n\t\t\t\t} else if (typeof cn === \"string\") {                                                                               // 3528\n\t\t\t\t\trenderer.addText(cn, fragmentCSS);                                                                                // 3529\n\t\t\t\t}                                                                                                                  // 3530\n\t\t\t}                                                                                                                   // 3531\n\t\t\ti++;                                                                                                                // 3532\n\t\t}                                                                                                                    // 3533\n                                                                                                                       // 3534\n\t\tif (isBlock) {                                                                                                       // 3535\n\t\t\treturn renderer.setBlockBoundary(cb);                                                                               // 3536\n\t\t}                                                                                                                    // 3537\n\t};                                                                                                                    // 3538\n\timages = {};                                                                                                          // 3539\n\tloadImgs = function (element, renderer, elementHandlers, cb) {                                                        // 3540\n\t\tvar imgs = element.getElementsByTagName('img'),                                                                      // 3541\n\t\tl = imgs.length, found_images,                                                                                       // 3542\n\t\tx = 0;                                                                                                               // 3543\n\t\tfunction done() {                                                                                                    // 3544\n\t\t\trenderer.pdf.internal.events.publish('imagesLoaded');                                                               // 3545\n\t\t\tcb(found_images);                                                                                                   // 3546\n\t\t}                                                                                                                    // 3547\n\t\tfunction loadImage(url, width, height) {                                                                             // 3548\n\t\t\tif (!url)                                                                                                           // 3549\n\t\t\t\treturn;                                                                                                            // 3550\n\t\t\tvar img = new Image();                                                                                              // 3551\n\t\t\tfound_images = ++x;                                                                                                 // 3552\n\t\t\timg.crossOrigin = '';                                                                                               // 3553\n\t\t\timg.onerror = img.onload = function () {                                                                            // 3554\n\t\t\t\tif(img.complete) {                                                                                                 // 3555\n\t\t\t\t\t//to support data urls in images, set width and height                                                            // 3556\n\t\t\t\t\t//as those values are not recognized automatically                                                                // 3557\n\t\t\t\t\tif (img.src.indexOf('data:image/') === 0) {                                                                       // 3558\n\t\t\t\t\t\timg.width = width || img.width || 0;                                                                             // 3559\n\t\t\t\t\t\timg.height = height || img.height || 0;                                                                          // 3560\n\t\t\t\t\t}                                                                                                                 // 3561\n\t\t\t\t\t//if valid image add to known images array                                                                        // 3562\n\t\t\t\t\tif (img.width + img.height) {                                                                                     // 3563\n\t\t\t\t\t\tvar hash = renderer.pdf.sHashCode(url) || url;                                                                   // 3564\n\t\t\t\t\t\timages[hash] = images[hash] || img;                                                                              // 3565\n\t\t\t\t\t}                                                                                                                 // 3566\n\t\t\t\t}                                                                                                                  // 3567\n\t\t\t\tif(!--x) {                                                                                                         // 3568\n\t\t\t\t\tdone();                                                                                                           // 3569\n\t\t\t\t}                                                                                                                  // 3570\n\t\t\t};                                                                                                                  // 3571\n\t\t\timg.src = url;                                                                                                      // 3572\n\t\t}                                                                                                                    // 3573\n\t\twhile (l--)                                                                                                          // 3574\n\t\t\tloadImage(imgs[l].getAttribute(\"src\"),imgs[l].width,imgs[l].height);                                                // 3575\n\t\treturn x || done();                                                                                                  // 3576\n\t};                                                                                                                    // 3577\n\tcheckForFooter = function (elem, renderer, elementHandlers) {                                                         // 3578\n\t\t//check if we can found a <footer> element                                                                           // 3579\n\t\tvar footer = elem.getElementsByTagName(\"footer\");                                                                    // 3580\n\t\tif (footer.length > 0) {                                                                                             // 3581\n                                                                                                                       // 3582\n\t\t\tfooter = footer[0];                                                                                                 // 3583\n                                                                                                                       // 3584\n\t\t\t//bad hack to get height of footer                                                                                  // 3585\n\t\t\t//creat dummy out and check new y after fake rendering                                                              // 3586\n\t\t\tvar oldOut = renderer.pdf.internal.write;                                                                           // 3587\n\t\t\tvar oldY = renderer.y;                                                                                              // 3588\n\t\t\trenderer.pdf.internal.write = function () {};                                                                       // 3589\n\t\t\tDrillForContent(footer, renderer, elementHandlers);                                                                 // 3590\n\t\t\tvar footerHeight = Math.ceil(renderer.y - oldY) + 5;                                                                // 3591\n\t\t\trenderer.y = oldY;                                                                                                  // 3592\n\t\t\trenderer.pdf.internal.write = oldOut;                                                                               // 3593\n                                                                                                                       // 3594\n\t\t\t//add 20% to prevent overlapping                                                                                    // 3595\n\t\t\trenderer.pdf.margins_doc.bottom += footerHeight;                                                                    // 3596\n                                                                                                                       // 3597\n\t\t\t//Create function render header on every page                                                                       // 3598\n\t\t\tvar renderFooter = function (pageInfo) {                                                                            // 3599\n\t\t\t\tvar pageNumber = pageInfo !== undefined ? pageInfo.pageNumber : 1;                                                 // 3600\n\t\t\t\t//set current y position to old margin                                                                             // 3601\n\t\t\t\tvar oldPosition = renderer.y;                                                                                      // 3602\n\t\t\t\t//render all child nodes of the header element                                                                     // 3603\n\t\t\t\trenderer.y = renderer.pdf.internal.pageSize.height - renderer.pdf.margins_doc.bottom;                              // 3604\n\t\t\t\trenderer.pdf.margins_doc.bottom -= footerHeight;                                                                   // 3605\n                                                                                                                       // 3606\n\t\t\t\t//check if we have to add page numbers                                                                             // 3607\n\t\t\t\tvar spans = footer.getElementsByTagName('span');                                                                   // 3608\n\t\t\t\tfor (var i = 0; i < spans.length; ++i) {                                                                           // 3609\n\t\t\t\t\t//if we find some span element with class pageCounter, set the page                                               // 3610\n\t\t\t\t\tif ((\" \" + spans[i].className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(\" pageCounter \") > -1) {                     // 3611\n\t\t\t\t\t\tspans[i].innerHTML = pageNumber;                                                                                 // 3612\n\t\t\t\t\t}                                                                                                                 // 3613\n\t\t\t\t\t//if we find some span element with class totalPages, set a variable which is replaced after rendering of all pages\n\t\t\t\t\tif ((\" \" + spans[i].className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(\" totalPages \") > -1) {                      // 3615\n\t\t\t\t\t\tspans[i].innerHTML = '###jsPDFVarTotalPages###';                                                                 // 3616\n\t\t\t\t\t}                                                                                                                 // 3617\n\t\t\t\t}                                                                                                                  // 3618\n                                                                                                                       // 3619\n\t\t\t\t//render footer content                                                                                            // 3620\n\t\t\t\tDrillForContent(footer, renderer, elementHandlers);                                                                // 3621\n\t\t\t\t//set bottom margin to previous height including the footer height                                                 // 3622\n\t\t\t\trenderer.pdf.margins_doc.bottom += footerHeight;                                                                   // 3623\n\t\t\t\t//important for other plugins (e.g. table) to start rendering at correct position after header                     // 3624\n\t\t\t\trenderer.y = oldPosition;                                                                                          // 3625\n\t\t\t};                                                                                                                  // 3626\n                                                                                                                       // 3627\n\t\t\t//check if footer contains totalPages which shoudl be replace at the disoposal of the document                      // 3628\n\t\t\tvar spans = footer.getElementsByTagName('span');                                                                    // 3629\n\t\t\tfor (var i = 0; i < spans.length; ++i) {                                                                            // 3630\n\t\t\t\tif ((\" \" + spans[i].className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(\" totalPages \") > -1) {                       // 3631\n\t\t\t\t\trenderer.pdf.internal.events.subscribe('htmlRenderingFinished', renderer.pdf.putTotalPages.bind(renderer.pdf, '###jsPDFVarTotalPages###'), true);\n\t\t\t\t}                                                                                                                  // 3633\n\t\t\t}                                                                                                                   // 3634\n                                                                                                                       // 3635\n\t\t\t//register event to render footer on every new page                                                                 // 3636\n\t\t\trenderer.pdf.internal.events.subscribe('addPage', renderFooter, false);                                             // 3637\n\t\t\t//render footer on first page                                                                                       // 3638\n\t\t\trenderFooter();                                                                                                     // 3639\n                                                                                                                       // 3640\n\t\t\t//prevent footer rendering                                                                                          // 3641\n\t\t\tSkipNode['FOOTER'] = 1;                                                                                             // 3642\n\t\t}                                                                                                                    // 3643\n\t};                                                                                                                    // 3644\n\tprocess = function (pdf, element, x, y, settings, callback) {                                                         // 3645\n\t\tif (!element)                                                                                                        // 3646\n\t\t\treturn false;                                                                                                       // 3647\n\t\tif (typeof element !== \"string\" && !element.parentNode)                                                              // 3648\n\t\t\telement = '' + element.innerHTML;                                                                                   // 3649\n\t\tif (typeof element === \"string\") {                                                                                   // 3650\n\t\t\telement = (function (element) {                                                                                     // 3651\n\t\t\t\tvar $frame,                                                                                                        // 3652\n\t\t\t\t$hiddendiv,                                                                                                        // 3653\n\t\t\t\tframename,                                                                                                         // 3654\n\t\t\t\tvisuallyhidden;                                                                                                    // 3655\n\t\t\t\tframename = \"jsPDFhtmlText\" + Date.now().toString() + (Math.random() * 1000).toFixed(0);                           // 3656\n\t\t\t\tvisuallyhidden = \"position: absolute !important;\" + \"clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\" + \"clip: rect(1px, 1px, 1px, 1px);\" + \"padding:0 !important;\" + \"border:0 !important;\" + \"height: 1px !important;\" + \"width: 1px !important; \" + \"top:auto;\" + \"left:-100px;\" + \"overflow: hidden;\";\n\t\t\t\t$hiddendiv = document.createElement('div');                                                                        // 3658\n\t\t\t\t$hiddendiv.style.cssText = visuallyhidden;                                                                         // 3659\n\t\t\t\t$hiddendiv.innerHTML = \"<iframe style=\\\"height:1px;width:1px\\\" name=\\\"\" + framename + \"\\\" />\";                     // 3660\n\t\t\t\tdocument.body.appendChild($hiddendiv);                                                                             // 3661\n\t\t\t\t$frame = window.frames[framename];                                                                                 // 3662\n\t\t\t\t$frame.document.body.innerHTML = element;                                                                          // 3663\n\t\t\t\treturn $frame.document.body;                                                                                       // 3664\n\t\t\t})(element.replace(/<\\/?script[^>]*?>/gi, ''));                                                                     // 3665\n\t\t}                                                                                                                    // 3666\n\t\tvar r = new Renderer(pdf, x, y, settings), out;                                                                      // 3667\n                                                                                                                       // 3668\n\t\t// 1. load images                                                                                                    // 3669\n\t\t// 2. prepare optional footer elements                                                                               // 3670\n\t\t// 3. render content                                                                                                 // 3671\n\t\tloadImgs.call(this, element, r, settings.elementHandlers, function (found_images) {                                  // 3672\n\t\t\tcheckForFooter( element, r, settings.elementHandlers);                                                              // 3673\n\t\t\tDrillForContent(element, r, settings.elementHandlers);                                                              // 3674\n\t\t\t//send event dispose for final taks (e.g. footer totalpage replacement)                                             // 3675\n\t\t\tr.pdf.internal.events.publish('htmlRenderingFinished');                                                             // 3676\n\t\t\tout = r.dispose();                                                                                                  // 3677\n\t\t\tif (typeof callback === 'function') callback(out);                                                                  // 3678\n\t\t\telse if (found_images) console.error('jsPDF Warning: rendering issues? provide a callback to fromHTML!');           // 3679\n\t\t});                                                                                                                  // 3680\n\t\treturn out || {x: r.x, y:r.y};                                                                                       // 3681\n\t};                                                                                                                    // 3682\n\tRenderer.prototype.init = function () {                                                                               // 3683\n\t\tthis.paragraph = {                                                                                                   // 3684\n\t\t\ttext : [],                                                                                                          // 3685\n\t\t\tstyle : []                                                                                                          // 3686\n\t\t};                                                                                                                   // 3687\n\t\treturn this.pdf.internal.write(\"q\");                                                                                 // 3688\n\t};                                                                                                                    // 3689\n\tRenderer.prototype.dispose = function () {                                                                            // 3690\n\t\tthis.pdf.internal.write(\"Q\");                                                                                        // 3691\n\t\treturn {                                                                                                             // 3692\n\t\t\tx : this.x,                                                                                                         // 3693\n\t\t\ty : this.y,                                                                                                         // 3694\n\t\t\tready:true                                                                                                          // 3695\n\t\t};                                                                                                                   // 3696\n\t};                                                                                                                    // 3697\n                                                                                                                       // 3698\n\t//Checks if we have to execute some watcher functions                                                                 // 3699\n\t//e.g. to end text floating around an image                                                                           // 3700\n\tRenderer.prototype.executeWatchFunctions = function(el) {                                                             // 3701\n\t\tvar ret = false;                                                                                                     // 3702\n\t\tvar narray = [];                                                                                                     // 3703\n\t\tif (this.watchFunctions.length > 0) {                                                                                // 3704\n\t\t\tfor(var i=0; i< this.watchFunctions.length; ++i) {                                                                  // 3705\n\t\t\t\tif (this.watchFunctions[i](el) === true) {                                                                         // 3706\n\t\t\t\t\tret = true;                                                                                                       // 3707\n\t\t\t\t} else {                                                                                                           // 3708\n\t\t\t\t\tnarray.push(this.watchFunctions[i]);                                                                              // 3709\n\t\t\t\t}                                                                                                                  // 3710\n\t\t\t}                                                                                                                   // 3711\n\t\t\tthis.watchFunctions = narray;                                                                                       // 3712\n\t\t}                                                                                                                    // 3713\n\t\treturn ret;                                                                                                          // 3714\n\t};                                                                                                                    // 3715\n                                                                                                                       // 3716\n\tRenderer.prototype.splitFragmentsIntoLines = function (fragments, styles) {                                           // 3717\n\t\tvar currentLineLength,                                                                                               // 3718\n\t\tdefaultFontSize,                                                                                                     // 3719\n\t\tff,                                                                                                                  // 3720\n\t\tfontMetrics,                                                                                                         // 3721\n\t\tfontMetricsCache,                                                                                                    // 3722\n\t\tfragment,                                                                                                            // 3723\n\t\tfragmentChopped,                                                                                                     // 3724\n\t\tfragmentLength,                                                                                                      // 3725\n\t\tfragmentSpecificMetrics,                                                                                             // 3726\n\t\tfs,                                                                                                                  // 3727\n\t\tk,                                                                                                                   // 3728\n\t\tline,                                                                                                                // 3729\n\t\tlines,                                                                                                               // 3730\n\t\tmaxLineLength,                                                                                                       // 3731\n\t\tstyle;                                                                                                               // 3732\n\t\tdefaultFontSize = 12;                                                                                                // 3733\n\t\tk = this.pdf.internal.scaleFactor;                                                                                   // 3734\n\t\tfontMetricsCache = {};                                                                                               // 3735\n\t\tff = void 0;                                                                                                         // 3736\n\t\tfs = void 0;                                                                                                         // 3737\n\t\tfontMetrics = void 0;                                                                                                // 3738\n\t\tfragment = void 0;                                                                                                   // 3739\n\t\tstyle = void 0;                                                                                                      // 3740\n\t\tfragmentSpecificMetrics = void 0;                                                                                    // 3741\n\t\tfragmentLength = void 0;                                                                                             // 3742\n\t\tfragmentChopped = void 0;                                                                                            // 3743\n\t\tline = [];                                                                                                           // 3744\n\t\tlines = [line];                                                                                                      // 3745\n\t\tcurrentLineLength = 0;                                                                                               // 3746\n\t\tmaxLineLength = this.settings.width;                                                                                 // 3747\n\t\twhile (fragments.length) {                                                                                           // 3748\n\t\t\tfragment = fragments.shift();                                                                                       // 3749\n\t\t\tstyle = styles.shift();                                                                                             // 3750\n\t\t\tif (fragment) {                                                                                                     // 3751\n\t\t\t\tff = style[\"font-family\"];                                                                                         // 3752\n\t\t\t\tfs = style[\"font-style\"];                                                                                          // 3753\n\t\t\t\tfontMetrics = fontMetricsCache[ff + fs];                                                                           // 3754\n\t\t\t\tif (!fontMetrics) {                                                                                                // 3755\n\t\t\t\t\tfontMetrics = this.pdf.internal.getFont(ff, fs).metadata.Unicode;                                                 // 3756\n\t\t\t\t\tfontMetricsCache[ff + fs] = fontMetrics;                                                                          // 3757\n\t\t\t\t}                                                                                                                  // 3758\n\t\t\t\tfragmentSpecificMetrics = {                                                                                        // 3759\n\t\t\t\t\twidths : fontMetrics.widths,                                                                                      // 3760\n\t\t\t\t\tkerning : fontMetrics.kerning,                                                                                    // 3761\n\t\t\t\t\tfontSize : style[\"font-size\"] * defaultFontSize,                                                                  // 3762\n\t\t\t\t\ttextIndent : currentLineLength                                                                                    // 3763\n\t\t\t\t};                                                                                                                 // 3764\n\t\t\t\tfragmentLength = this.pdf.getStringUnitWidth(fragment, fragmentSpecificMetrics) * fragmentSpecificMetrics.fontSize / k;\n\t\t\t\tif (currentLineLength + fragmentLength > maxLineLength) {                                                          // 3766\n\t\t\t\t\tfragmentChopped = this.pdf.splitTextToSize(fragment, maxLineLength, fragmentSpecificMetrics);                     // 3767\n\t\t\t\t\tline.push([fragmentChopped.shift(), style]);                                                                      // 3768\n\t\t\t\t\twhile (fragmentChopped.length) {                                                                                  // 3769\n\t\t\t\t\t\tline = [[fragmentChopped.shift(), style]];                                                                       // 3770\n\t\t\t\t\t\tlines.push(line);                                                                                                // 3771\n\t\t\t\t\t}                                                                                                                 // 3772\n\t\t\t\t\tcurrentLineLength = this.pdf.getStringUnitWidth(line[0][0], fragmentSpecificMetrics) * fragmentSpecificMetrics.fontSize / k;\n\t\t\t\t} else {                                                                                                           // 3774\n\t\t\t\t\tline.push([fragment, style]);                                                                                     // 3775\n\t\t\t\t\tcurrentLineLength += fragmentLength;                                                                              // 3776\n\t\t\t\t}                                                                                                                  // 3777\n\t\t\t}                                                                                                                   // 3778\n\t\t}                                                                                                                    // 3779\n                                                                                                                       // 3780\n\t\t//if text alignment was set, set margin/indent of each line                                                          // 3781\n\t\tif (style['text-align'] !== undefined && (style['text-align'] === 'center' || style['text-align'] === 'right' || style['text-align'] === 'justify')) {\n\t\t\tfor (var i = 0; i < lines.length; ++i) {                                                                            // 3783\n\t\t\t\tvar length = this.pdf.getStringUnitWidth(lines[i][0][0], fragmentSpecificMetrics) * fragmentSpecificMetrics.fontSize / k;\n\t\t\t\t//if there is more than on line we have to clone the style object as all lines hold a reference on this object     // 3785\n\t\t\t\tif (i > 0) {                                                                                                       // 3786\n\t\t\t\t\tlines[i][0][1] = clone(lines[i][0][1]);                                                                           // 3787\n\t\t\t\t}                                                                                                                  // 3788\n\t\t\t\tvar space = (maxLineLength - length);                                                                              // 3789\n                                                                                                                       // 3790\n\t\t\t\tif (style['text-align'] === 'right') {                                                                             // 3791\n\t\t\t\t\tlines[i][0][1]['margin-left'] = space;                                                                            // 3792\n\t\t\t\t\t//if alignment is not right, it has to be center so split the space to the left and the right                     // 3793\n\t\t\t\t} else if (style['text-align'] === 'center') {                                                                     // 3794\n\t\t\t\t\tlines[i][0][1]['margin-left'] = space / 2;                                                                        // 3795\n\t\t\t\t\t//if justify was set, calculate the word spacing and define in by using the css property                          // 3796\n\t\t\t\t} else if (style['text-align'] === 'justify') {                                                                    // 3797\n\t\t\t\t\tvar countSpaces = lines[i][0][0].split(' ').length - 1;                                                           // 3798\n\t\t\t\t\tlines[i][0][1]['word-spacing'] = space / countSpaces;                                                             // 3799\n\t\t\t\t\t//ignore the last line in justify mode                                                                            // 3800\n\t\t\t\t\tif (i === (lines.length - 1)) {                                                                                   // 3801\n\t\t\t\t\t\tlines[i][0][1]['word-spacing'] = 0;                                                                              // 3802\n\t\t\t\t\t}                                                                                                                 // 3803\n\t\t\t\t}                                                                                                                  // 3804\n\t\t\t}                                                                                                                   // 3805\n\t\t}                                                                                                                    // 3806\n                                                                                                                       // 3807\n\t\treturn lines;                                                                                                        // 3808\n\t};                                                                                                                    // 3809\n\tRenderer.prototype.RenderTextFragment = function (text, style) {                                                      // 3810\n\t\tvar defaultFontSize,                                                                                                 // 3811\n\t\tfont,                                                                                                                // 3812\n\t\tmaxLineHeight;                                                                                                       // 3813\n                                                                                                                       // 3814\n\t\tmaxLineHeight = 0;                                                                                                   // 3815\n\t\tdefaultFontSize = 12;                                                                                                // 3816\n                                                                                                                       // 3817\n\t\tif (this.pdf.internal.pageSize.height - this.pdf.margins_doc.bottom < this.y + this.pdf.internal.getFontSize()) {    // 3818\n\t\t\tthis.pdf.internal.write(\"ET\", \"Q\");                                                                                 // 3819\n\t\t\tthis.pdf.addPage();                                                                                                 // 3820\n\t\t\tthis.y = this.pdf.margins_doc.top;                                                                                  // 3821\n\t\t\tthis.pdf.internal.write(\"q\", \"BT 0 g\", this.pdf.internal.getCoordinateString(this.x), this.pdf.internal.getVerticalCoordinateString(this.y), \"Td\");\n\t\t\t//move cursor by one line on new page                                                                               // 3823\n\t\t\tmaxLineHeight = Math.max(maxLineHeight, style[\"line-height\"], style[\"font-size\"]);                                  // 3824\n\t\t\tthis.pdf.internal.write(0, (-1 * defaultFontSize * maxLineHeight).toFixed(2), \"Td\");                                // 3825\n\t\t}                                                                                                                    // 3826\n                                                                                                                       // 3827\n\t\tfont = this.pdf.internal.getFont(style[\"font-family\"], style[\"font-style\"]);                                         // 3828\n                                                                                                                       // 3829\n\t\t//set the word spacing for e.g. justify style                                                                        // 3830\n\t\tif (style['word-spacing'] !== undefined && style['word-spacing'] > 0) {                                              // 3831\n\t\t\tthis.pdf.internal.write(style['word-spacing'].toFixed(2), \"Tw\");                                                    // 3832\n\t\t}                                                                                                                    // 3833\n                                                                                                                       // 3834\n\t\tthis.pdf.internal.write(\"/\" + font.id, (defaultFontSize * style[\"font-size\"]).toFixed(2), \"Tf\", \"(\" + this.pdf.internal.pdfEscape(text) + \") Tj\");\n                                                                                                                       // 3836\n\t\t//set the word spacing back to neutral => 0                                                                          // 3837\n\t\tif (style['word-spacing'] !== undefined) {                                                                           // 3838\n\t\t\tthis.pdf.internal.write(0, \"Tw\");                                                                                   // 3839\n\t\t}                                                                                                                    // 3840\n\t};                                                                                                                    // 3841\n\tRenderer.prototype.renderParagraph = function (cb) {                                                                  // 3842\n\t\tvar blockstyle,                                                                                                      // 3843\n\t\tdefaultFontSize,                                                                                                     // 3844\n\t\tfontToUnitRatio,                                                                                                     // 3845\n\t\tfragments,                                                                                                           // 3846\n\t\ti,                                                                                                                   // 3847\n\t\tl,                                                                                                                   // 3848\n\t\tline,                                                                                                                // 3849\n\t\tlines,                                                                                                               // 3850\n\t\tmaxLineHeight,                                                                                                       // 3851\n\t\tout,                                                                                                                 // 3852\n\t\tparagraphspacing_after,                                                                                              // 3853\n\t\tparagraphspacing_before,                                                                                             // 3854\n\t\tpriorblockstype,                                                                                                     // 3855\n\t\tstyles,                                                                                                              // 3856\n\t\tfontSize;                                                                                                            // 3857\n\t\tfragments = PurgeWhiteSpace(this.paragraph.text);                                                                    // 3858\n\t\tstyles = this.paragraph.style;                                                                                       // 3859\n\t\tblockstyle = this.paragraph.blockstyle;                                                                              // 3860\n\t\tpriorblockstype = this.paragraph.blockstyle || {};                                                                   // 3861\n\t\tthis.paragraph = {                                                                                                   // 3862\n\t\t\ttext : [],                                                                                                          // 3863\n\t\t\tstyle : [],                                                                                                         // 3864\n\t\t\tblockstyle : {},                                                                                                    // 3865\n\t\t\tpriorblockstyle : blockstyle                                                                                        // 3866\n\t\t};                                                                                                                   // 3867\n\t\tif (!fragments.join(\"\").trim()) {                                                                                    // 3868\n\t\t\treturn;                                                                                                             // 3869\n\t\t}                                                                                                                    // 3870\n\t\tlines = this.splitFragmentsIntoLines(fragments, styles);                                                             // 3871\n\t\tline = void 0;                                                                                                       // 3872\n\t\tmaxLineHeight = void 0;                                                                                              // 3873\n\t\tdefaultFontSize = 12;                                                                                                // 3874\n\t\tfontToUnitRatio = defaultFontSize / this.pdf.internal.scaleFactor;                                                   // 3875\n\t\tparagraphspacing_before = (Math.max((blockstyle[\"margin-top\"] || 0) - (priorblockstype[\"margin-bottom\"] || 0), 0) + (blockstyle[\"padding-top\"] || 0)) * fontToUnitRatio;\n\t\tparagraphspacing_after = ((blockstyle[\"margin-bottom\"] || 0) + (blockstyle[\"padding-bottom\"] || 0)) * fontToUnitRatio;\n\t\tout = this.pdf.internal.write;                                                                                       // 3878\n\t\ti = void 0;                                                                                                          // 3879\n\t\tl = void 0;                                                                                                          // 3880\n\t\tthis.y += paragraphspacing_before;                                                                                   // 3881\n\t\tout(\"q\", \"BT 0 g\", this.pdf.internal.getCoordinateString(this.x), this.pdf.internal.getVerticalCoordinateString(this.y), \"Td\");\n                                                                                                                       // 3883\n\t\t//stores the current indent of cursor position                                                                       // 3884\n\t\tvar currentIndent = 0;                                                                                               // 3885\n                                                                                                                       // 3886\n\t\twhile (lines.length) {                                                                                               // 3887\n\t\t\tline = lines.shift();                                                                                               // 3888\n\t\t\tmaxLineHeight = 0;                                                                                                  // 3889\n\t\t\ti = 0;                                                                                                              // 3890\n\t\t\tl = line.length;                                                                                                    // 3891\n\t\t\twhile (i !== l) {                                                                                                   // 3892\n\t\t\t\tif (line[i][0].trim()) {                                                                                           // 3893\n\t\t\t\t\tmaxLineHeight = Math.max(maxLineHeight, line[i][1][\"line-height\"], line[i][1][\"font-size\"]);                      // 3894\n\t\t\t\t\tfontSize = line[i][1][\"font-size\"] * 7;                                                                           // 3895\n\t\t\t\t}                                                                                                                  // 3896\n\t\t\t\ti++;                                                                                                               // 3897\n\t\t\t}                                                                                                                   // 3898\n\t\t\t//if we have to move the cursor to adapt the indent                                                                 // 3899\n\t\t\tvar indentMove = 0;                                                                                                 // 3900\n\t\t\t//if a margin was added (by e.g. a text-alignment), move the cursor                                                 // 3901\n\t\t\tif (line[0][1][\"margin-left\"] !== undefined && line[0][1][\"margin-left\"] > 0) {                                     // 3902\n\t\t\t\twantedIndent = this.pdf.internal.getCoordinateString(line[0][1][\"margin-left\"]);                                   // 3903\n\t\t\t\tindentMove = wantedIndent - currentIndent;                                                                         // 3904\n\t\t\t\tcurrentIndent = wantedIndent;                                                                                      // 3905\n\t\t\t}                                                                                                                   // 3906\n\t\t\t//move the cursor                                                                                                   // 3907\n\t\t\tout(indentMove, (-1 * defaultFontSize * maxLineHeight).toFixed(2), \"Td\");                                           // 3908\n\t\t\ti = 0;                                                                                                              // 3909\n\t\t\tl = line.length;                                                                                                    // 3910\n\t\t\twhile (i !== l) {                                                                                                   // 3911\n\t\t\t\tif (line[i][0]) {                                                                                                  // 3912\n\t\t\t\t\tthis.RenderTextFragment(line[i][0], line[i][1]);                                                                  // 3913\n\t\t\t\t}                                                                                                                  // 3914\n\t\t\t\ti++;                                                                                                               // 3915\n\t\t\t}                                                                                                                   // 3916\n\t\t\tthis.y += maxLineHeight * fontToUnitRatio;                                                                          // 3917\n                                                                                                                       // 3918\n\t\t\t//if some watcher function was executed sucessful, so e.g. margin and widths were changed,                          // 3919\n\t\t\t//reset line drawing and calculate position and lines again                                                         // 3920\n\t\t\t//e.g. to stop text floating around an image                                                                        // 3921\n\t\t\tif (this.executeWatchFunctions(line[0][1]) && lines.length > 0) {                                                   // 3922\n\t\t\t\tvar localFragments = [];                                                                                           // 3923\n\t\t\t\tvar localStyles = [];                                                                                              // 3924\n\t\t\t\t//create fragement array of                                                                                        // 3925\n\t\t\t\tlines.forEach(function(localLine) {                                                                                // 3926\n\t\t\t\t\tvar i = 0;                                                                                                        // 3927\n\t\t\t\t\tvar l = localLine.length;                                                                                         // 3928\n\t\t\t\t\twhile (i !== l) {                                                                                                 // 3929\n\t\t\t\t\t\tif (localLine[i][0]) {                                                                                           // 3930\n\t\t\t\t\t\t\tlocalFragments.push(localLine[i][0]+' ');                                                                       // 3931\n\t\t\t\t\t\t\tlocalStyles.push(localLine[i][1]);                                                                              // 3932\n\t\t\t\t\t\t}                                                                                                                // 3933\n\t\t\t\t\t\t++i;                                                                                                             // 3934\n\t\t\t\t\t}                                                                                                                 // 3935\n\t\t\t\t});                                                                                                                // 3936\n\t\t\t\t//split lines again due to possible coordinate changes                                                             // 3937\n\t\t\t\tlines = this.splitFragmentsIntoLines(PurgeWhiteSpace(localFragments), localStyles);                                // 3938\n\t\t\t\t//reposition the current cursor                                                                                    // 3939\n\t\t\t\tout(\"ET\", \"Q\");                                                                                                    // 3940\n\t\t\t\tout(\"q\", \"BT 0 g\", this.pdf.internal.getCoordinateString(this.x), this.pdf.internal.getVerticalCoordinateString(this.y), \"Td\");\n\t\t\t}                                                                                                                   // 3942\n                                                                                                                       // 3943\n\t\t}                                                                                                                    // 3944\n\t\tif (cb && typeof cb === \"function\") {                                                                                // 3945\n\t\t\tcb.call(this, this.x - 9, this.y - fontSize / 2);                                                                   // 3946\n\t\t}                                                                                                                    // 3947\n\t\tout(\"ET\", \"Q\");                                                                                                      // 3948\n\t\treturn this.y += paragraphspacing_after;                                                                             // 3949\n\t};                                                                                                                    // 3950\n\tRenderer.prototype.setBlockBoundary = function (cb) {                                                                 // 3951\n\t\treturn this.renderParagraph(cb);                                                                                     // 3952\n\t};                                                                                                                    // 3953\n\tRenderer.prototype.setBlockStyle = function (css) {                                                                   // 3954\n\t\treturn this.paragraph.blockstyle = css;                                                                              // 3955\n\t};                                                                                                                    // 3956\n\tRenderer.prototype.addText = function (text, css) {                                                                   // 3957\n\t\tthis.paragraph.text.push(text);                                                                                      // 3958\n\t\treturn this.paragraph.style.push(css);                                                                               // 3959\n\t};                                                                                                                    // 3960\n\tFontNameDB = {                                                                                                        // 3961\n\t\thelvetica         : \"helvetica\",                                                                                     // 3962\n\t\t\"sans-serif\"      : \"helvetica\",                                                                                     // 3963\n\t\t\"times new roman\" : \"times\",                                                                                         // 3964\n\t\tserif             : \"times\",                                                                                         // 3965\n\t\ttimes             : \"times\",                                                                                         // 3966\n\t\tmonospace         : \"courier\",                                                                                       // 3967\n\t\tcourier           : \"courier\"                                                                                        // 3968\n\t};                                                                                                                    // 3969\n\tFontWeightMap = {                                                                                                     // 3970\n\t\t100 : \"normal\",                                                                                                      // 3971\n\t\t200 : \"normal\",                                                                                                      // 3972\n\t\t300 : \"normal\",                                                                                                      // 3973\n\t\t400 : \"normal\",                                                                                                      // 3974\n\t\t500 : \"bold\",                                                                                                        // 3975\n\t\t600 : \"bold\",                                                                                                        // 3976\n\t\t700 : \"bold\",                                                                                                        // 3977\n\t\t800 : \"bold\",                                                                                                        // 3978\n\t\t900 : \"bold\",                                                                                                        // 3979\n\t\tnormal  : \"normal\",                                                                                                  // 3980\n\t\tbold    : \"bold\",                                                                                                    // 3981\n\t\tbolder  : \"bold\",                                                                                                    // 3982\n\t\tlighter : \"normal\"                                                                                                   // 3983\n\t};                                                                                                                    // 3984\n\tFontStyleMap = {                                                                                                      // 3985\n\t\tnormal  : \"normal\",                                                                                                  // 3986\n\t\titalic  : \"italic\",                                                                                                  // 3987\n\t\toblique : \"italic\"                                                                                                   // 3988\n\t};                                                                                                                    // 3989\n\tTextAlignMap = {                                                                                                      // 3990\n\t\tleft    : \"left\",                                                                                                    // 3991\n\t\tright   : \"right\",                                                                                                   // 3992\n\t\tcenter  : \"center\",                                                                                                  // 3993\n\t\tjustify : \"justify\"                                                                                                  // 3994\n\t};                                                                                                                    // 3995\n\tFloatMap = {                                                                                                          // 3996\n\t\tnone : 'none',                                                                                                       // 3997\n\t\tright: 'right',                                                                                                      // 3998\n\t\tleft: 'left'                                                                                                         // 3999\n\t};                                                                                                                    // 4000\n\tClearMap = {                                                                                                          // 4001\n\t  none : 'none',                                                                                                      // 4002\n\t  both : 'both'                                                                                                       // 4003\n\t};                                                                                                                    // 4004\n\tUnitedNumberMap = {                                                                                                   // 4005\n\t\tnormal : 1                                                                                                           // 4006\n\t};                                                                                                                    // 4007\n\t/**                                                                                                                   // 4008\n\t * Converts HTML-formatted text into formatted PDF text.                                                              // 4009\n\t *                                                                                                                    // 4010\n\t * Notes:                                                                                                             // 4011\n\t * 2012-07-18                                                                                                         // 4012\n\t * Plugin relies on having browser, DOM around. The HTML is pushed into dom and traversed.                            // 4013\n\t * Plugin relies on jQuery for CSS extraction.                                                                        // 4014\n\t * Targeting HTML output from Markdown templating, which is a very simple                                             // 4015\n\t * markup - div, span, em, strong, p. No br-based paragraph separation supported explicitly (but still may work.)     // 4016\n\t * Images, tables are NOT supported.                                                                                  // 4017\n\t *                                                                                                                    // 4018\n\t * @public                                                                                                            // 4019\n\t * @function                                                                                                          // 4020\n\t * @param HTML {String or DOM Element} HTML-formatted text, or pointer to DOM element that is to be rendered into PDF.\n\t * @param x {Number} starting X coordinate in jsPDF instance's declared units.                                        // 4022\n\t * @param y {Number} starting Y coordinate in jsPDF instance's declared units.                                        // 4023\n\t * @param settings {Object} Additional / optional variables controlling parsing, rendering.                           // 4024\n\t * @returns {Object} jsPDF instance                                                                                   // 4025\n\t */                                                                                                                   // 4026\n\tjsPDFAPI.fromHTML = function (HTML, x, y, settings, callback, margins) {                                              // 4027\n\t\t\"use strict\";                                                                                                        // 4028\n                                                                                                                       // 4029\n\t\tthis.margins_doc = margins || {                                                                                      // 4030\n\t\t\ttop : 0,                                                                                                            // 4031\n\t\t\tbottom : 0                                                                                                          // 4032\n\t\t};                                                                                                                   // 4033\n\t\tif (!settings)                                                                                                       // 4034\n\t\t\tsettings = {};                                                                                                      // 4035\n\t\tif (!settings.elementHandlers)                                                                                       // 4036\n\t\t\tsettings.elementHandlers = {};                                                                                      // 4037\n                                                                                                                       // 4038\n\t\treturn process(this, HTML, isNaN(x) ? 4 : x, isNaN(y) ? 4 : y, settings, callback);                                  // 4039\n\t};                                                                                                                    // 4040\n})(jsPDF.API);                                                                                                         // 4041\n/** ====================================================================                                               // 4042\n * jsPDF JavaScript plugin                                                                                             // 4043\n * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com                                                         // 4044\n *                                                                                                                     // 4045\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 4046\n * a copy of this software and associated documentation files (the                                                     // 4047\n * \"Software\"), to deal in the Software without restriction, including                                                 // 4048\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 4049\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 4050\n * permit persons to whom the Software is furnished to do so, subject to                                               // 4051\n * the following conditions:                                                                                           // 4052\n *                                                                                                                     // 4053\n * The above copyright notice and this permission notice shall be                                                      // 4054\n * included in all copies or substantial portions of the Software.                                                     // 4055\n *                                                                                                                     // 4056\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 4057\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 4058\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 4059\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 4060\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 4061\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 4062\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 4063\n * ====================================================================                                                // 4064\n */                                                                                                                    // 4065\n                                                                                                                       // 4066\n/*global jsPDF */                                                                                                      // 4067\n                                                                                                                       // 4068\n(function (jsPDFAPI) {                                                                                                 // 4069\n    'use strict';                                                                                                      // 4070\n    var jsNamesObj, jsJsObj, text;                                                                                     // 4071\n    jsPDFAPI.addJS = function (txt) {                                                                                  // 4072\n        text = txt;                                                                                                    // 4073\n        this.internal.events.subscribe(                                                                                // 4074\n            'postPutResources',                                                                                        // 4075\n            function (txt) {                                                                                           // 4076\n                jsNamesObj = this.internal.newObject();                                                                // 4077\n                this.internal.write('<< /Names [(EmbeddedJS) ' + (jsNamesObj + 1) + ' 0 R] >>', 'endobj');             // 4078\n                jsJsObj = this.internal.newObject();                                                                   // 4079\n                this.internal.write('<< /S /JavaScript /JS (', text, ') >>', 'endobj');                                // 4080\n            }                                                                                                          // 4081\n        );                                                                                                             // 4082\n        this.internal.events.subscribe(                                                                                // 4083\n            'putCatalog',                                                                                              // 4084\n            function () {                                                                                              // 4085\n                if (jsNamesObj !== undefined && jsJsObj !== undefined) {                                               // 4086\n                    this.internal.write('/Names <</JavaScript ' + jsNamesObj + ' 0 R>>');                              // 4087\n                }                                                                                                      // 4088\n            }                                                                                                          // 4089\n        );                                                                                                             // 4090\n        return this;                                                                                                   // 4091\n    };                                                                                                                 // 4092\n}(jsPDF.API));                                                                                                         // 4093\n/**@preserve                                                                                                           // 4094\n *  ====================================================================                                               // 4095\n * jsPDF PNG PlugIn                                                                                                    // 4096\n * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb                                                        // 4097\n *                                                                                                                     // 4098\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 4099\n * a copy of this software and associated documentation files (the                                                     // 4100\n * \"Software\"), to deal in the Software without restriction, including                                                 // 4101\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 4102\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 4103\n * permit persons to whom the Software is furnished to do so, subject to                                               // 4104\n * the following conditions:                                                                                           // 4105\n *                                                                                                                     // 4106\n * The above copyright notice and this permission notice shall be                                                      // 4107\n * included in all copies or substantial portions of the Software.                                                     // 4108\n *                                                                                                                     // 4109\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 4110\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 4111\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 4112\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 4113\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 4114\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 4115\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 4116\n * ====================================================================                                                // 4117\n */                                                                                                                    // 4118\n                                                                                                                       // 4119\n(function(jsPDFAPI) {                                                                                                  // 4120\n'use strict'                                                                                                           // 4121\n\t                                                                                                                      // 4122\n\t/*                                                                                                                    // 4123\n\t * @see http://www.w3.org/TR/PNG-Chunks.html                                                                          // 4124\n\t *                                                                                                                    // 4125\n\t Color    Allowed      Interpretation                                                                                 // 4126\n\t Type     Bit Depths                                                                                                  // 4127\n\t                                                                                                                      // 4128\n\t   0       1,2,4,8,16  Each pixel is a grayscale sample.                                                              // 4129\n\t                                                                                                                      // 4130\n\t   2       8,16        Each pixel is an R,G,B triple.                                                                 // 4131\n\t                                                                                                                      // 4132\n\t   3       1,2,4,8     Each pixel is a palette index;                                                                 // 4133\n\t                       a PLTE chunk must appear.                                                                      // 4134\n\t                                                                                                                      // 4135\n\t   4       8,16        Each pixel is a grayscale sample,                                                              // 4136\n\t                       followed by an alpha sample.                                                                   // 4137\n\t                                                                                                                      // 4138\n\t   6       8,16        Each pixel is an R,G,B triple,                                                                 // 4139\n\t                       followed by an alpha sample.                                                                   // 4140\n\t*/                                                                                                                    // 4141\n\t                                                                                                                      // 4142\n\t/*                                                                                                                    // 4143\n\t * PNG filter method types                                                                                            // 4144\n\t *                                                                                                                    // 4145\n\t * @see http://www.w3.org/TR/PNG-Filters.html                                                                         // 4146\n\t * @see http://www.libpng.org/pub/png/book/chapter09.html                                                             // 4147\n\t *                                                                                                                    // 4148\n\t * This is what the value 'Predictor' in decode params relates to                                                     // 4149\n\t *                                                                                                                    // 4150\n\t * 15 is \"optimal prediction\", which means the prediction algorithm can change from line to line.                     // 4151\n\t * In that case, you actually have to read the first byte off each line for the prediction algorthim (which should be 0-4, corresponding to PDF 10-14) and select the appropriate unprediction algorithm based on that byte.\n\t *                                                                                                                    // 4153\n\t   0       None                                                                                                       // 4154\n\t   1       Sub                                                                                                        // 4155\n\t   2       Up                                                                                                         // 4156\n\t   3       Average                                                                                                    // 4157\n\t   4       Paeth                                                                                                      // 4158\n\t */                                                                                                                   // 4159\n\t                                                                                                                      // 4160\n\tvar doesNotHavePngJS = function() {                                                                                   // 4161\n\t\treturn typeof PNG !== 'function' || typeof FlateStream !== 'function';                                               // 4162\n\t}                                                                                                                     // 4163\n\t, canCompress = function(value) {                                                                                     // 4164\n\t\treturn value !== jsPDFAPI.image_compression.NONE && hasCompressionJS();                                              // 4165\n\t}                                                                                                                     // 4166\n\t, hasCompressionJS = function() {                                                                                     // 4167\n\t\tvar inst = typeof Deflater === 'function';                                                                           // 4168\n\t\tif(!inst)                                                                                                            // 4169\n\t\t\tthrow new Error(\"requires deflate.js for compression\")                                                              // 4170\n\t\treturn inst;                                                                                                         // 4171\n\t}                                                                                                                     // 4172\n\t, compressBytes = function(bytes, lineLength, colorsPerPixel, compression) {                                          // 4173\n\t\t                                                                                                                     // 4174\n\t\tvar level = 5,                                                                                                       // 4175\n\t\t\tfilter_method = filterUp;                                                                                           // 4176\n\t\t                                                                                                                     // 4177\n\t\tswitch(compression) {                                                                                                // 4178\n\t\t                                                                                                                     // 4179\n\t\t\tcase jsPDFAPI.image_compression.FAST:                                                                               // 4180\n\t\t\t\t                                                                                                                   // 4181\n\t\t\t\tlevel = 3;                                                                                                         // 4182\n\t\t\t\tfilter_method = filterSub;                                                                                         // 4183\n\t\t\t\tbreak;                                                                                                             // 4184\n\t\t\t\t                                                                                                                   // 4185\n\t\t\tcase jsPDFAPI.image_compression.MEDIUM:                                                                             // 4186\n\t\t\t\t                                                                                                                   // 4187\n\t\t\t\tlevel = 6;                                                                                                         // 4188\n\t\t\t\tfilter_method = filterAverage;                                                                                     // 4189\n\t\t\t\tbreak;                                                                                                             // 4190\n\t\t\t\t                                                                                                                   // 4191\n\t\t\tcase jsPDFAPI.image_compression.SLOW:                                                                               // 4192\n\t\t\t\t                                                                                                                   // 4193\n\t\t\t\tlevel = 9;                                                                                                         // 4194\n\t\t\t\tfilter_method = filterPaeth;//uses to sum to choose best filter for each line                                      // 4195\n\t\t\t\tbreak;                                                                                                             // 4196\n\t\t}                                                                                                                    // 4197\n\t\t                                                                                                                     // 4198\n\t\tbytes = applyPngFilterMethod(bytes, lineLength, colorsPerPixel, filter_method);                                      // 4199\n\t\t                                                                                                                     // 4200\n\t\tvar header = new Uint8Array(createZlibHeader(level));                                                                // 4201\n\t\tvar checksum = adler32(bytes);                                                                                       // 4202\n\t\t                                                                                                                     // 4203\n\t\tvar deflate = new Deflater(level);                                                                                   // 4204\n\t\tvar a = deflate.append(bytes);                                                                                       // 4205\n\t\tvar cBytes = deflate.flush();                                                                                        // 4206\n\t\t                                                                                                                     // 4207\n\t\tvar len = header.length + a.length + cBytes.length;                                                                  // 4208\n\t\t                                                                                                                     // 4209\n\t\tvar cmpd = new Uint8Array(len + 4);                                                                                  // 4210\n\t\tcmpd.set(header);                                                                                                    // 4211\n\t\tcmpd.set(a, header.length);                                                                                          // 4212\n\t\tcmpd.set(cBytes, header.length + a.length);                                                                          // 4213\n\t\t                                                                                                                     // 4214\n\t\tcmpd[len++] = (checksum >>> 24) & 0xff;                                                                              // 4215\n\t\tcmpd[len++] = (checksum >>> 16) & 0xff;                                                                              // 4216\n\t\tcmpd[len++] = (checksum >>> 8) & 0xff;                                                                               // 4217\n\t\tcmpd[len++] = checksum & 0xff;                                                                                       // 4218\n\t\t                                                                                                                     // 4219\n\t\treturn jsPDFAPI.arrayBufferToBinaryString(cmpd);                                                                     // 4220\n\t}                                                                                                                     // 4221\n\t, createZlibHeader = function(bytes, level){                                                                          // 4222\n\t\t/*                                                                                                                   // 4223\n\t\t * @see http://www.ietf.org/rfc/rfc1950.txt for zlib header                                                          // 4224\n\t\t */                                                                                                                  // 4225\n\t\tvar cm = 8;                                                                                                          // 4226\n        var cinfo = Math.LOG2E * Math.log(0x8000) - 8;                                                                 // 4227\n        var cmf = (cinfo << 4) | cm;                                                                                   // 4228\n                                                                                                                       // 4229\n        var hdr = cmf << 8;                                                                                            // 4230\n        var flevel = Math.min(3, ((level - 1) & 0xff) >> 1);                                                           // 4231\n                                                                                                                       // 4232\n        hdr |= (flevel << 6);                                                                                          // 4233\n        hdr |= 0;//FDICT                                                                                               // 4234\n        hdr += 31 - (hdr % 31);                                                                                        // 4235\n                                                                                                                       // 4236\n        return [cmf, (hdr & 0xff) & 0xff];                                                                             // 4237\n\t}                                                                                                                     // 4238\n\t, adler32 = function(array, param) {                                                                                  // 4239\n\t\tvar adler = 1;                                                                                                       // 4240\n\t    var s1 = adler & 0xffff,                                                                                          // 4241\n\t        s2 = (adler >>> 16) & 0xffff;                                                                                 // 4242\n\t    var len = array.length;                                                                                           // 4243\n\t    var tlen;                                                                                                         // 4244\n\t    var i = 0;                                                                                                        // 4245\n                                                                                                                       // 4246\n\t    while (len > 0) {                                                                                                 // 4247\n\t      tlen = len > param ? param : len;                                                                               // 4248\n\t      len -= tlen;                                                                                                    // 4249\n\t      do {                                                                                                            // 4250\n\t        s1 += array[i++];                                                                                             // 4251\n\t        s2 += s1;                                                                                                     // 4252\n\t      } while (--tlen);                                                                                               // 4253\n                                                                                                                       // 4254\n\t      s1 %= 65521;                                                                                                    // 4255\n\t      s2 %= 65521;                                                                                                    // 4256\n\t    }                                                                                                                 // 4257\n                                                                                                                       // 4258\n\t    return ((s2 << 16) | s1) >>> 0;                                                                                   // 4259\n\t}                                                                                                                     // 4260\n\t, applyPngFilterMethod = function(bytes, lineLength, colorsPerPixel, filter_method) {                                 // 4261\n\t\tvar lines = bytes.length / lineLength,                                                                               // 4262\n\t\t\tresult = new Uint8Array(bytes.length + lines),                                                                      // 4263\n\t\t\tfilter_methods = getFilterMethods(),                                                                                // 4264\n\t\t\ti = 0, line, prevLine, offset;                                                                                      // 4265\n\t\t                                                                                                                     // 4266\n\t\tfor(; i < lines; i++) {                                                                                              // 4267\n\t\t\toffset = i * lineLength;                                                                                            // 4268\n\t\t\tline = bytes.subarray(offset, offset + lineLength);                                                                 // 4269\n\t\t\t                                                                                                                    // 4270\n\t\t\tif(filter_method) {                                                                                                 // 4271\n\t\t\t\tresult.set(filter_method(line, colorsPerPixel, prevLine), offset + i);                                             // 4272\n\t\t\t\t                                                                                                                   // 4273\n\t\t\t}else{                                                                                                              // 4274\n\t\t\t                                                                                                                    // 4275\n\t\t\t\tvar j = 0,                                                                                                         // 4276\n\t\t\t\t\tlen = filter_methods.length,                                                                                      // 4277\n\t\t\t\t\tresults = [];                                                                                                     // 4278\n\t\t\t\t                                                                                                                   // 4279\n\t\t\t\tfor(; j < len; j++)                                                                                                // 4280\n\t\t\t\t\tresults[j] = filter_methods[j](line, colorsPerPixel, prevLine);                                                   // 4281\n\t\t\t\t                                                                                                                   // 4282\n\t\t\t\tvar ind = getIndexOfSmallestSum(results.concat());                                                                 // 4283\n\t\t\t\t                                                                                                                   // 4284\n\t\t\t\tresult.set(results[ind], offset + i);                                                                              // 4285\n\t\t\t}                                                                                                                   // 4286\n\t\t\t                                                                                                                    // 4287\n\t\t\tprevLine = line;                                                                                                    // 4288\n\t\t}                                                                                                                    // 4289\n\t\t                                                                                                                     // 4290\n\t\treturn result;                                                                                                       // 4291\n\t}                                                                                                                     // 4292\n\t, filterNone = function(line, colorsPerPixel, prevLine) {                                                             // 4293\n\t\t/*var result = new Uint8Array(line.length + 1);                                                                      // 4294\n\t\tresult[0] = 0;                                                                                                       // 4295\n\t\tresult.set(line, 1);*/                                                                                               // 4296\n\t\t                                                                                                                     // 4297\n\t\tvar result = Array.apply([], line);                                                                                  // 4298\n\t\tresult.unshift(0);                                                                                                   // 4299\n                                                                                                                       // 4300\n\t\treturn result;                                                                                                       // 4301\n\t}                                                                                                                     // 4302\n\t, filterSub = function(line, colorsPerPixel, prevLine) {                                                              // 4303\n\t\tvar result = [],                                                                                                     // 4304\n\t\t\ti = 0,                                                                                                              // 4305\n\t\t\tlen = line.length,                                                                                                  // 4306\n\t\t\tleft;                                                                                                               // 4307\n\t\t                                                                                                                     // 4308\n\t\tresult[0] = 1;                                                                                                       // 4309\n\t\t                                                                                                                     // 4310\n\t\tfor(; i < len; i++) {                                                                                                // 4311\n\t\t\tleft = line[i - colorsPerPixel] || 0;                                                                               // 4312\n\t\t\tresult[i + 1] = (line[i] - left + 0x0100) & 0xff;                                                                   // 4313\n\t\t}                                                                                                                    // 4314\n\t\t                                                                                                                     // 4315\n\t\treturn result;                                                                                                       // 4316\n\t}                                                                                                                     // 4317\n\t, filterUp = function(line, colorsPerPixel, prevLine) {                                                               // 4318\n\t\tvar result = [],                                                                                                     // 4319\n\t\t\ti = 0,                                                                                                              // 4320\n\t\t\tlen = line.length,                                                                                                  // 4321\n\t\t\tup;                                                                                                                 // 4322\n\t\t                                                                                                                     // 4323\n\t\tresult[0] = 2;                                                                                                       // 4324\n\t\t                                                                                                                     // 4325\n\t\tfor(; i < len; i++) {                                                                                                // 4326\n\t\t\tup = prevLine && prevLine[i] || 0;                                                                                  // 4327\n\t\t\tresult[i + 1] = (line[i] - up + 0x0100) & 0xff;                                                                     // 4328\n\t\t}                                                                                                                    // 4329\n\t\t                                                                                                                     // 4330\n\t\treturn result;                                                                                                       // 4331\n\t}                                                                                                                     // 4332\n\t, filterAverage = function(line, colorsPerPixel, prevLine) {                                                          // 4333\n\t\tvar result = [],                                                                                                     // 4334\n\t\t\ti = 0,                                                                                                              // 4335\n\t\t\tlen = line.length,                                                                                                  // 4336\n\t\t\tleft,                                                                                                               // 4337\n\t\t\tup;                                                                                                                 // 4338\n\t                                                                                                                      // 4339\n\t\tresult[0] = 3;                                                                                                       // 4340\n\t\t                                                                                                                     // 4341\n\t\tfor(; i < len; i++) {                                                                                                // 4342\n\t\t\tleft = line[i - colorsPerPixel] || 0;                                                                               // 4343\n\t\t\tup = prevLine && prevLine[i] || 0;                                                                                  // 4344\n\t\t\tresult[i + 1] = (line[i] + 0x0100 - ((left + up) >>> 1)) & 0xff;                                                    // 4345\n\t\t}                                                                                                                    // 4346\n\t\t                                                                                                                     // 4347\n\t\treturn result;                                                                                                       // 4348\n\t}                                                                                                                     // 4349\n\t, filterPaeth = function(line, colorsPerPixel, prevLine) {                                                            // 4350\n\t\tvar result = [],                                                                                                     // 4351\n\t\t\ti = 0,                                                                                                              // 4352\n\t\t\tlen = line.length,                                                                                                  // 4353\n\t\t\tleft,                                                                                                               // 4354\n\t\t\tup,                                                                                                                 // 4355\n\t\t\tupLeft,                                                                                                             // 4356\n\t\t\tpaeth;                                                                                                              // 4357\n\t\t                                                                                                                     // 4358\n\t\tresult[0] = 4;                                                                                                       // 4359\n\t\t                                                                                                                     // 4360\n\t\tfor(; i < len; i++) {                                                                                                // 4361\n\t\t\tleft = line[i - colorsPerPixel] || 0;                                                                               // 4362\n\t\t\tup = prevLine && prevLine[i] || 0;                                                                                  // 4363\n\t\t\tupLeft = prevLine && prevLine[i - colorsPerPixel] || 0;                                                             // 4364\n\t\t\tpaeth = paethPredictor(left, up, upLeft);                                                                           // 4365\n\t\t\tresult[i + 1] = (line[i] - paeth + 0x0100) & 0xff;                                                                  // 4366\n\t\t}                                                                                                                    // 4367\n\t\t                                                                                                                     // 4368\n\t\treturn result;                                                                                                       // 4369\n\t}                                                                                                                     // 4370\n\t,paethPredictor = function(left, up, upLeft) {                                                                        // 4371\n                                                                                                                       // 4372\n\t\tvar p = left + up - upLeft,                                                                                          // 4373\n\t        pLeft = Math.abs(p - left),                                                                                   // 4374\n\t        pUp = Math.abs(p - up),                                                                                       // 4375\n\t        pUpLeft = Math.abs(p - upLeft);                                                                               // 4376\n\t\t                                                                                                                     // 4377\n\t\treturn (pLeft <= pUp && pLeft <= pUpLeft) ? left : (pUp <= pUpLeft) ? up : upLeft;                                   // 4378\n\t}                                                                                                                     // 4379\n\t, getFilterMethods = function() {                                                                                     // 4380\n\t\treturn [filterNone, filterSub, filterUp, filterAverage, filterPaeth];                                                // 4381\n\t}                                                                                                                     // 4382\n\t,getIndexOfSmallestSum = function(arrays) {                                                                           // 4383\n\t\tvar i = 0,                                                                                                           // 4384\n\t\t\tlen = arrays.length,                                                                                                // 4385\n\t\t\tsum, min, ind;                                                                                                      // 4386\n\t\t                                                                                                                     // 4387\n\t\twhile(i < len) {                                                                                                     // 4388\n\t\t\tsum = absSum(arrays[i].slice(1));                                                                                   // 4389\n\t\t\t                                                                                                                    // 4390\n\t\t\tif(sum < min || !min) {                                                                                             // 4391\n\t\t\t\tmin = sum;                                                                                                         // 4392\n\t\t\t\tind = i;                                                                                                           // 4393\n\t\t\t}                                                                                                                   // 4394\n\t\t\t                                                                                                                    // 4395\n\t\t\ti++;                                                                                                                // 4396\n\t\t}                                                                                                                    // 4397\n\t\t                                                                                                                     // 4398\n\t\treturn ind;                                                                                                          // 4399\n\t}                                                                                                                     // 4400\n\t, absSum = function(array) {                                                                                          // 4401\n\t\tvar i = 0,                                                                                                           // 4402\n\t\t\tlen = array.length,                                                                                                 // 4403\n\t\t\tsum = 0;                                                                                                            // 4404\n\t                                                                                                                      // 4405\n\t\twhile(i < len)                                                                                                       // 4406\n\t\t\tsum += Math.abs(array[i++]);                                                                                        // 4407\n\t\t\t                                                                                                                    // 4408\n\t\treturn sum;                                                                                                          // 4409\n\t}                                                                                                                     // 4410\n\t, logImg = function(img) {                                                                                            // 4411\n\t\tconsole.log(\"width: \" + img.width);                                                                                  // 4412\n\t\tconsole.log(\"height: \" + img.height);                                                                                // 4413\n\t\tconsole.log(\"bits: \" + img.bits);                                                                                    // 4414\n\t\tconsole.log(\"colorType: \" + img.colorType);                                                                          // 4415\n\t\tconsole.log(\"transparency:\");                                                                                        // 4416\n\t\tconsole.log(img.transparency);                                                                                       // 4417\n\t\tconsole.log(\"text:\");                                                                                                // 4418\n\t\tconsole.log(img.text);                                                                                               // 4419\n\t\tconsole.log(\"compressionMethod: \" + img.compressionMethod);                                                          // 4420\n\t\tconsole.log(\"filterMethod: \" + img.filterMethod);                                                                    // 4421\n\t\tconsole.log(\"interlaceMethod: \" + img.interlaceMethod);                                                              // 4422\n\t\tconsole.log(\"imgData:\");                                                                                             // 4423\n\t\tconsole.log(img.imgData);                                                                                            // 4424\n\t\tconsole.log(\"palette:\");                                                                                             // 4425\n\t\tconsole.log(img.palette);                                                                                            // 4426\n\t\tconsole.log(\"colors: \" + img.colors);                                                                                // 4427\n\t\tconsole.log(\"colorSpace: \" + img.colorSpace);                                                                        // 4428\n\t\tconsole.log(\"pixelBitlength: \" + img.pixelBitlength);                                                                // 4429\n\t\tconsole.log(\"hasAlphaChannel: \" + img.hasAlphaChannel);                                                              // 4430\n\t};                                                                                                                    // 4431\n\t                                                                                                                      // 4432\n\t                                                                                                                      // 4433\n\t                                                                                                                      // 4434\n\t                                                                                                                      // 4435\n\tjsPDFAPI.processPNG = function(imageData, imageIndex, alias, compression, dataAsBinaryString) {                       // 4436\n\t\t'use strict'                                                                                                         // 4437\n\t\t                                                                                                                     // 4438\n\t\tvar colorSpace = this.color_spaces.DEVICE_RGB,                                                                       // 4439\n\t\t\tdecode = this.decode.FLATE_DECODE,                                                                                  // 4440\n\t\t\tbpc = 8,                                                                                                            // 4441\n\t\t\timg, dp, trns,                                                                                                      // 4442\n\t\t\tcolors, pal, smask;                                                                                                 // 4443\n\t\t                                                                                                                     // 4444\n\t/*\tif(this.isString(imageData)) {                                                                                     // 4445\n\t\t\t                                                                                                                    // 4446\n\t\t}*/                                                                                                                  // 4447\n\t\t                                                                                                                     // 4448\n\t\tif(this.isArrayBuffer(imageData))                                                                                    // 4449\n\t\t\timageData = new Uint8Array(imageData);                                                                              // 4450\n\t\t                                                                                                                     // 4451\n\t\tif(this.isArrayBufferView(imageData)) {                                                                              // 4452\n\t\t\t                                                                                                                    // 4453\n\t\t\tif(doesNotHavePngJS())                                                                                              // 4454\n\t\t\t\tthrow new Error(\"PNG support requires png.js and zlib.js\");                                                        // 4455\n\t\t\t\t                                                                                                                   // 4456\n\t\t\timg = new PNG(imageData);                                                                                           // 4457\n\t\t\timageData = img.imgData;                                                                                            // 4458\n\t\t\tbpc = img.bits;                                                                                                     // 4459\n\t\t\tcolorSpace = img.colorSpace;                                                                                        // 4460\n\t\t\tcolors = img.colors;                                                                                                // 4461\n\t\t\t                                                                                                                    // 4462\n\t\t\t//logImg(img);                                                                                                      // 4463\n\t\t\t                                                                                                                    // 4464\n\t\t\t/*                                                                                                                  // 4465\n\t\t\t * colorType 6 - Each pixel is an R,G,B triple, followed by an alpha sample.                                        // 4466\n\t\t\t *                                                                                                                  // 4467\n\t\t\t * colorType 4 - Each pixel is a grayscale sample, followed by an alpha sample.                                     // 4468\n\t\t\t *                                                                                                                  // 4469\n\t\t\t * Extract alpha to create two separate images, using the alpha as a sMask                                          // 4470\n\t\t\t */                                                                                                                 // 4471\n\t\t\tif([4,6].indexOf(img.colorType) !== -1) {                                                                           // 4472\n\t\t\t\t                                                                                                                   // 4473\n\t\t\t\t/*                                                                                                                 // 4474\n\t\t\t\t * processes 8 bit RGBA and grayscale + alpha images                                                               // 4475\n\t\t\t\t */                                                                                                                // 4476\n\t\t\t\tif(img.bits === 8) {                                                                                               // 4477\n\t\t\t\t                                                                                                                   // 4478\n\t\t\t\t        var pixels = img.pixelBitlength == 32 ? new Uint32Array(img.decodePixels().buffer) : img.pixelBitlength == 16 ? new Uint16Array(img.decodePixels().buffer) : new Uint8Array(img.decodePixels().buffer),\n\t\t\t\t\t\tlen = pixels.length,                                                                                             // 4480\n\t\t\t\t\t\timgData = new Uint8Array(len * img.colors),                                                                      // 4481\n\t\t\t\t\t\talphaData = new Uint8Array(len),                                                                                 // 4482\n\t\t\t\t\t\tpDiff = img.pixelBitlength - img.bits,                                                                           // 4483\n\t\t\t\t\t\ti = 0, n = 0, pixel, pbl;                                                                                        // 4484\n\t\t\t\t                                                                                                                   // 4485\n\t\t\t\t\tfor(; i < len; i++) {                                                                                             // 4486\n\t\t\t\t\t\tpixel = pixels[i];                                                                                               // 4487\n\t\t\t\t\t\tpbl = 0;                                                                                                         // 4488\n\t\t\t\t\t\t                                                                                                                 // 4489\n\t\t\t\t\t\twhile(pbl < pDiff) {                                                                                             // 4490\n\t\t\t\t\t\t\t                                                                                                                // 4491\n\t\t\t\t\t\t\timgData[n++] = ( pixel >>> pbl ) & 0xff;                                                                        // 4492\n\t\t\t\t\t\t\tpbl = pbl + img.bits;                                                                                           // 4493\n\t\t\t\t\t\t}                                                                                                                // 4494\n\t\t\t\t\t\t                                                                                                                 // 4495\n\t\t\t\t\t\talphaData[i] = ( pixel >>> pbl ) & 0xff;                                                                         // 4496\n\t\t\t\t\t}                                                                                                                 // 4497\n\t\t\t\t}                                                                                                                  // 4498\n\t\t\t\t                                                                                                                   // 4499\n\t\t\t\t/*                                                                                                                 // 4500\n\t\t\t\t * processes 16 bit RGBA and grayscale + alpha images                                                              // 4501\n\t\t\t\t */                                                                                                                // 4502\n\t\t\t\tif(img.bits === 16) {                                                                                              // 4503\n\t\t\t\t\t                                                                                                                  // 4504\n\t\t\t\t\tvar pixels = new Uint32Array(img.decodePixels().buffer),                                                          // 4505\n\t\t\t\t\t\tlen = pixels.length,                                                                                             // 4506\n\t\t\t\t\t\timgData = new Uint8Array((len * (32 / img.pixelBitlength) ) * img.colors),                                       // 4507\n\t\t\t\t\t\talphaData = new Uint8Array(len * (32 / img.pixelBitlength) ),                                                    // 4508\n\t\t\t\t\t\thasColors = img.colors > 1,                                                                                      // 4509\n\t\t\t\t\t\ti = 0, n = 0, a = 0, pixel;                                                                                      // 4510\n\t\t\t\t\t                                                                                                                  // 4511\n\t\t\t\t\twhile(i < len) {                                                                                                  // 4512\n\t\t\t\t\t\tpixel = pixels[i++];                                                                                             // 4513\n\t\t\t\t\t\t                                                                                                                 // 4514\n\t\t\t\t\t\timgData[n++] = (pixel >>> 0) & 0xFF;                                                                             // 4515\n\t\t\t\t\t\t                                                                                                                 // 4516\n\t\t\t\t\t\tif(hasColors) {                                                                                                  // 4517\n\t\t\t\t\t\t\timgData[n++] = (pixel >>> 16) & 0xFF;                                                                           // 4518\n\t\t\t\t\t\t\t                                                                                                                // 4519\n\t\t\t\t\t\t\tpixel = pixels[i++];                                                                                            // 4520\n\t\t\t\t\t\t\timgData[n++] = (pixel >>> 0) & 0xFF;                                                                            // 4521\n\t\t\t\t\t\t}                                                                                                                // 4522\n\t\t\t\t\t\t                                                                                                                 // 4523\n\t\t\t\t\t\talphaData[a++] = (pixel >>> 16) & 0xFF;                                                                          // 4524\n\t\t\t\t\t}                                                                                                                 // 4525\n\t\t\t\t\t                                                                                                                  // 4526\n\t\t\t\t\tbpc = 8;                                                                                                          // 4527\n\t\t\t\t}                                                                                                                  // 4528\n\t\t\t\t                                                                                                                   // 4529\n\t\t\t\tif(canCompress(compression)) {                                                                                     // 4530\n\t\t\t\t\t\t\t\t\t\t                                                                                                             // 4531\n\t\t\t\t\timageData = compressBytes(imgData, img.width * img.colors, img.colors, compression);                              // 4532\n\t\t\t\t\tsmask = compressBytes(alphaData, img.width, 1, compression);                                                      // 4533\n\t\t\t\t\t                                                                                                                  // 4534\n\t\t\t\t}else{                                                                                                             // 4535\n\t\t\t\t\t                                                                                                                  // 4536\n\t\t\t\t\timageData = imgData;                                                                                              // 4537\n\t\t\t\t\tsmask = alphaData;                                                                                                // 4538\n\t\t\t\t\tdecode = null;                                                                                                    // 4539\n\t\t\t\t}                                                                                                                  // 4540\n\t\t\t}                                                                                                                   // 4541\n\t\t\t                                                                                                                    // 4542\n\t\t\t/*                                                                                                                  // 4543\n\t\t\t * Indexed png. Each pixel is a palette index.                                                                      // 4544\n\t\t\t */                                                                                                                 // 4545\n\t\t\tif(img.colorType === 3) {                                                                                           // 4546\n\t\t\t\t                                                                                                                   // 4547\n\t\t\t\tcolorSpace = this.color_spaces.INDEXED;                                                                            // 4548\n\t\t\t\tpal = img.palette;                                                                                                 // 4549\n\t\t\t\t                                                                                                                   // 4550\n\t\t\t\tif(img.transparency.indexed) {                                                                                     // 4551\n\t\t\t\t\t                                                                                                                  // 4552\n\t\t\t\t\tvar trans = img.transparency.indexed;                                                                             // 4553\n\t\t\t\t\t                                                                                                                  // 4554\n\t\t\t\t\tvar total = 0,                                                                                                    // 4555\n\t\t\t\t\t\ti = 0,                                                                                                           // 4556\n\t\t\t\t\t\tlen = trans.length;                                                                                              // 4557\n                                                                                                                       // 4558\n\t\t\t\t\tfor(; i<len; ++i)                                                                                                 // 4559\n\t\t\t\t\t    total += trans[i];                                                                                            // 4560\n\t\t\t\t\t                                                                                                                  // 4561\n\t\t\t\t\ttotal = total / 255;                                                                                              // 4562\n\t\t\t\t\t                                                                                                                  // 4563\n\t\t\t\t\t/*                                                                                                                // 4564\n\t\t\t\t\t * a single color is specified as 100% transparent (0),                                                           // 4565\n\t\t\t\t\t * so we set trns to use a /Mask with that index                                                                  // 4566\n\t\t\t\t\t */                                                                                                               // 4567\n\t\t\t\t\tif(total === len - 1 && trans.indexOf(0) !== -1) {                                                                // 4568\n\t\t\t\t\t\ttrns = [trans.indexOf(0)];                                                                                       // 4569\n\t\t\t\t\t                                                                                                                  // 4570\n\t\t\t\t\t/*                                                                                                                // 4571\n\t\t\t\t\t * there's more than one colour within the palette that specifies                                                 // 4572\n\t\t\t\t\t * a transparency value less than 255, so we unroll the pixels to create an image sMask                           // 4573\n\t\t\t\t\t */                                                                                                               // 4574\n\t\t\t\t\t}else if(total !== len){                                                                                          // 4575\n\t\t\t\t\t\t                                                                                                                 // 4576\n\t\t\t\t\t\tvar pixels = img.decodePixels(),                                                                                 // 4577\n\t\t\t\t\t\t\talphaData = new Uint8Array(pixels.length),                                                                      // 4578\n\t\t\t\t\t\t\ti = 0,                                                                                                          // 4579\n\t\t\t\t\t\t\tlen = pixels.length;                                                                                            // 4580\n\t\t\t\t\t\t                                                                                                                 // 4581\n\t\t\t\t\t\tfor(; i < len; i++)                                                                                              // 4582\n\t\t\t\t\t\t\talphaData[i] = trans[pixels[i]];                                                                                // 4583\n\t\t\t\t\t\t                                                                                                                 // 4584\n\t\t\t\t\t\tsmask = compressBytes(alphaData, img.width, 1);                                                                  // 4585\n\t\t\t\t\t}                                                                                                                 // 4586\n\t\t\t\t}                                                                                                                  // 4587\n\t\t\t}                                                                                                                   // 4588\n\t\t\t                                                                                                                    // 4589\n\t\t\tif(decode === this.decode.FLATE_DECODE)                                                                             // 4590\n\t\t\t\tdp = '/Predictor 15 /Colors '+ colors +' /BitsPerComponent '+ bpc +' /Columns '+ img.width;                        // 4591\n\t\t\telse                                                                                                                // 4592\n\t\t\t\t//remove 'Predictor' as it applies to the type of png filter applied to its IDAT - we only apply with compression  // 4593\n\t\t\t\tdp = '/Colors '+ colors +' /BitsPerComponent '+ bpc +' /Columns '+ img.width;                                      // 4594\n\t\t\t                                                                                                                    // 4595\n\t\t\tif(this.isArrayBuffer(imageData) || this.isArrayBufferView(imageData))                                              // 4596\n\t\t\t\timageData = this.arrayBufferToBinaryString(imageData);                                                             // 4597\n\t\t\t                                                                                                                    // 4598\n\t\t\tif(smask && this.isArrayBuffer(smask) || this.isArrayBufferView(smask))                                             // 4599\n\t\t\t\tsmask = this.arrayBufferToBinaryString(smask);                                                                     // 4600\n\t\t\t                                                                                                                    // 4601\n\t\t\treturn this.createImageInfo(imageData, img.width, img.height, colorSpace,                                           // 4602\n\t\t\t\t\t\t\t\t\t\tbpc, decode, imageIndex, alias, dp, trns, pal, smask);                                                       // 4603\n\t\t}                                                                                                                    // 4604\n\t\t                                                                                                                     // 4605\n\t\tthrow new Error(\"Unsupported PNG image data, try using JPEG instead.\");                                              // 4606\n\t}                                                                                                                     // 4607\n                                                                                                                       // 4608\n})(jsPDF.API)                                                                                                          // 4609\n/** @preserve                                                                                                          // 4610\njsPDF Silly SVG plugin                                                                                                 // 4611\nCopyright (c) 2012 Willow Systems Corporation, willow-systems.com                                                      // 4612\n*/                                                                                                                     // 4613\n/**                                                                                                                    // 4614\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 4615\n * a copy of this software and associated documentation files (the                                                     // 4616\n * \"Software\"), to deal in the Software without restriction, including                                                 // 4617\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 4618\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 4619\n * permit persons to whom the Software is furnished to do so, subject to                                               // 4620\n * the following conditions:                                                                                           // 4621\n *                                                                                                                     // 4622\n * The above copyright notice and this permission notice shall be                                                      // 4623\n * included in all copies or substantial portions of the Software.                                                     // 4624\n *                                                                                                                     // 4625\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 4626\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 4627\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 4628\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 4629\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 4630\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 4631\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 4632\n * ====================================================================                                                // 4633\n */                                                                                                                    // 4634\n                                                                                                                       // 4635\n;(function(jsPDFAPI) {                                                                                                 // 4636\n'use strict'                                                                                                           // 4637\n                                                                                                                       // 4638\n/**                                                                                                                    // 4639\nParses SVG XML and converts only some of the SVG elements into                                                         // 4640\nPDF elements.                                                                                                          // 4641\n                                                                                                                       // 4642\nSupports:                                                                                                              // 4643\n paths                                                                                                                 // 4644\n                                                                                                                       // 4645\n@public                                                                                                                // 4646\n@function                                                                                                              // 4647\n@param                                                                                                                 // 4648\n@returns {Type}                                                                                                        // 4649\n*/                                                                                                                     // 4650\njsPDFAPI.addSVG = function(svgtext, x, y, w, h) {                                                                      // 4651\n\t// 'this' is _jsPDF object returned when jsPDF is inited (new jsPDF())                                                // 4652\n                                                                                                                       // 4653\n\tvar undef                                                                                                             // 4654\n                                                                                                                       // 4655\n\tif (x === undef || y === undef) {                                                                                     // 4656\n\t\tthrow new Error(\"addSVG needs values for 'x' and 'y'\");                                                              // 4657\n\t}                                                                                                                     // 4658\n                                                                                                                       // 4659\n    function InjectCSS(cssbody, document) {                                                                            // 4660\n        var styletag = document.createElement('style');                                                                // 4661\n        styletag.type = 'text/css';                                                                                    // 4662\n        if (styletag.styleSheet) {                                                                                     // 4663\n        \t// ie                                                                                                         // 4664\n            styletag.styleSheet.cssText = cssbody;                                                                     // 4665\n        } else {                                                                                                       // 4666\n        \t// others                                                                                                     // 4667\n            styletag.appendChild(document.createTextNode(cssbody));                                                    // 4668\n        }                                                                                                              // 4669\n        document.getElementsByTagName(\"head\")[0].appendChild(styletag);                                                // 4670\n    }                                                                                                                  // 4671\n                                                                                                                       // 4672\n\tfunction createWorkerNode(document){                                                                                  // 4673\n                                                                                                                       // 4674\n\t\tvar frameID = 'childframe' // Date.now().toString() + '_' + (Math.random() * 100).toString()                         // 4675\n\t\t, frame = document.createElement('iframe')                                                                           // 4676\n                                                                                                                       // 4677\n\t\tInjectCSS(                                                                                                           // 4678\n\t\t\t'.jsPDF_sillysvg_iframe {display:none;position:absolute;}'                                                          // 4679\n\t\t\t, document                                                                                                          // 4680\n\t\t)                                                                                                                    // 4681\n                                                                                                                       // 4682\n\t\tframe.name = frameID                                                                                                 // 4683\n\t\tframe.setAttribute(\"width\", 0)                                                                                       // 4684\n\t\tframe.setAttribute(\"height\", 0)                                                                                      // 4685\n\t\tframe.setAttribute(\"frameborder\", \"0\")                                                                               // 4686\n\t\tframe.setAttribute(\"scrolling\", \"no\")                                                                                // 4687\n\t\tframe.setAttribute(\"seamless\", \"seamless\")                                                                           // 4688\n\t\tframe.setAttribute(\"class\", \"jsPDF_sillysvg_iframe\")                                                                 // 4689\n\t\t                                                                                                                     // 4690\n\t\tdocument.body.appendChild(frame)                                                                                     // 4691\n                                                                                                                       // 4692\n\t\treturn frame                                                                                                         // 4693\n\t}                                                                                                                     // 4694\n                                                                                                                       // 4695\n\tfunction attachSVGToWorkerNode(svgtext, frame){                                                                       // 4696\n\t\tvar framedoc = ( frame.contentWindow || frame.contentDocument ).document                                             // 4697\n\t\tframedoc.write(svgtext)                                                                                              // 4698\n\t\tframedoc.close()                                                                                                     // 4699\n\t\treturn framedoc.getElementsByTagName('svg')[0]                                                                       // 4700\n\t}                                                                                                                     // 4701\n                                                                                                                       // 4702\n\tfunction convertPathToPDFLinesArgs(path){                                                                             // 4703\n\t\t'use strict'                                                                                                         // 4704\n\t\t// we will use 'lines' method call. it needs:                                                                        // 4705\n\t\t// - starting coordinate pair                                                                                        // 4706\n\t\t// - array of arrays of vector shifts (2-len for line, 6 len for bezier)                                             // 4707\n\t\t// - scale array [horizontal, vertical] ratios                                                                       // 4708\n\t\t// - style (stroke, fill, both)                                                                                      // 4709\n                                                                                                                       // 4710\n\t\tvar x = parseFloat(path[1])                                                                                          // 4711\n\t\t, y = parseFloat(path[2])                                                                                            // 4712\n\t\t, vectors = []                                                                                                       // 4713\n\t\t, position = 3                                                                                                       // 4714\n\t\t, len = path.length                                                                                                  // 4715\n                                                                                                                       // 4716\n\t\twhile (position < len){                                                                                              // 4717\n\t\t\tif (path[position] === 'c'){                                                                                        // 4718\n\t\t\t\tvectors.push([                                                                                                     // 4719\n\t\t\t\t\tparseFloat(path[position + 1])                                                                                    // 4720\n\t\t\t\t\t, parseFloat(path[position + 2])                                                                                  // 4721\n\t\t\t\t\t, parseFloat(path[position + 3])                                                                                  // 4722\n\t\t\t\t\t, parseFloat(path[position + 4])                                                                                  // 4723\n\t\t\t\t\t, parseFloat(path[position + 5])                                                                                  // 4724\n\t\t\t\t\t, parseFloat(path[position + 6])                                                                                  // 4725\n\t\t\t\t])                                                                                                                 // 4726\n\t\t\t\tposition += 7                                                                                                      // 4727\n\t\t\t} else if (path[position] === 'l') {                                                                                // 4728\n\t\t\t\tvectors.push([                                                                                                     // 4729\n\t\t\t\t\tparseFloat(path[position + 1])                                                                                    // 4730\n\t\t\t\t\t, parseFloat(path[position + 2])                                                                                  // 4731\n\t\t\t\t])                                                                                                                 // 4732\n\t\t\t\tposition += 3                                                                                                      // 4733\n\t\t\t} else {                                                                                                            // 4734\n\t\t\t\tposition += 1                                                                                                      // 4735\n\t\t\t}                                                                                                                   // 4736\n\t\t}                                                                                                                    // 4737\n\t\treturn [x,y,vectors]                                                                                                 // 4738\n\t}                                                                                                                     // 4739\n                                                                                                                       // 4740\n\tvar workernode = createWorkerNode(document)                                                                           // 4741\n\t, svgnode = attachSVGToWorkerNode(svgtext, workernode)                                                                // 4742\n\t, scale = [1,1]                                                                                                       // 4743\n\t, svgw = parseFloat(svgnode.getAttribute('width'))                                                                    // 4744\n\t, svgh = parseFloat(svgnode.getAttribute('height'))                                                                   // 4745\n                                                                                                                       // 4746\n\tif (svgw && svgh) {                                                                                                   // 4747\n\t\t// setting both w and h makes image stretch to size.                                                                 // 4748\n\t\t// this may distort the image, but fits your demanded size                                                           // 4749\n\t\tif (w && h) {                                                                                                        // 4750\n\t\t\tscale = [w / svgw, h / svgh]                                                                                        // 4751\n\t\t}                                                                                                                    // 4752\n\t\t// if only one is set, that value is set as max and SVG                                                              // 4753\n\t\t// is scaled proportionately.                                                                                        // 4754\n\t\telse if (w) {                                                                                                        // 4755\n\t\t\tscale = [w / svgw, w / svgw]                                                                                        // 4756\n\t\t} else if (h) {                                                                                                      // 4757\n\t\t\tscale = [h / svgh, h / svgh]                                                                                        // 4758\n\t\t}                                                                                                                    // 4759\n\t}                                                                                                                     // 4760\n                                                                                                                       // 4761\n\tvar i, l, tmp                                                                                                         // 4762\n\t, linesargs                                                                                                           // 4763\n\t, items = svgnode.childNodes                                                                                          // 4764\n\tfor (i = 0, l = items.length; i < l; i++) {                                                                           // 4765\n\t\ttmp = items[i]                                                                                                       // 4766\n\t\tif (tmp.tagName && tmp.tagName.toUpperCase() === 'PATH') {                                                           // 4767\n\t\t\tlinesargs = convertPathToPDFLinesArgs( tmp.getAttribute(\"d\").split(' ') )                                           // 4768\n\t\t\t// path start x coordinate                                                                                          // 4769\n\t\t\tlinesargs[0] = linesargs[0] * scale[0] + x // where x is upper left X of image                                      // 4770\n\t\t\t// path start y coordinate                                                                                          // 4771\n\t\t\tlinesargs[1] = linesargs[1] * scale[1] + y // where y is upper left Y of image                                      // 4772\n\t\t\t// the rest of lines are vectors. these will adjust with scale value auto.                                          // 4773\n\t\t\tthis.lines.call(                                                                                                    // 4774\n\t\t\t\tthis                                                                                                               // 4775\n\t\t\t\t, linesargs[2] // lines                                                                                            // 4776\n\t\t\t\t, linesargs[0] // starting x                                                                                       // 4777\n\t\t\t\t, linesargs[1] // starting y                                                                                       // 4778\n\t\t\t\t, scale                                                                                                            // 4779\n\t\t\t)                                                                                                                   // 4780\n\t\t}                                                                                                                    // 4781\n\t}                                                                                                                     // 4782\n                                                                                                                       // 4783\n\t// clean up                                                                                                           // 4784\n\t// workernode.parentNode.removeChild(workernode)                                                                      // 4785\n                                                                                                                       // 4786\n\treturn this                                                                                                           // 4787\n}                                                                                                                      // 4788\n                                                                                                                       // 4789\n})(jsPDF.API);                                                                                                         // 4790\n/** @preserve                                                                                                          // 4791\n * jsPDF split_text_to_size plugin - MIT license.                                                                      // 4792\n * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com                                                   // 4793\n *               2014 Diego Casorran, https://github.com/diegocr                                                       // 4794\n */                                                                                                                    // 4795\n/**                                                                                                                    // 4796\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 4797\n * a copy of this software and associated documentation files (the                                                     // 4798\n * \"Software\"), to deal in the Software without restriction, including                                                 // 4799\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 4800\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 4801\n * permit persons to whom the Software is furnished to do so, subject to                                               // 4802\n * the following conditions:                                                                                           // 4803\n *                                                                                                                     // 4804\n * The above copyright notice and this permission notice shall be                                                      // 4805\n * included in all copies or substantial portions of the Software.                                                     // 4806\n *                                                                                                                     // 4807\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 4808\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 4809\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 4810\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 4811\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 4812\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 4813\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 4814\n * ====================================================================                                                // 4815\n */                                                                                                                    // 4816\n                                                                                                                       // 4817\n;(function(API) {                                                                                                      // 4818\n'use strict'                                                                                                           // 4819\n                                                                                                                       // 4820\n/**                                                                                                                    // 4821\nReturns an array of length matching length of the 'word' string, with each                                             // 4822\ncell ocupied by the width of the char in that position.                                                                // 4823\n                                                                                                                       // 4824\n@function                                                                                                              // 4825\n@param word {String}                                                                                                   // 4826\n@param widths {Object}                                                                                                 // 4827\n@param kerning {Object}                                                                                                // 4828\n@returns {Array}                                                                                                       // 4829\n*/                                                                                                                     // 4830\nvar getCharWidthsArray = API.getCharWidthsArray = function(text, options){                                             // 4831\n                                                                                                                       // 4832\n\tif (!options) {                                                                                                       // 4833\n\t\toptions = {}                                                                                                         // 4834\n\t}                                                                                                                     // 4835\n                                                                                                                       // 4836\n\tvar widths = options.widths ? options.widths : this.internal.getFont().metadata.Unicode.widths                        // 4837\n\t, widthsFractionOf = widths.fof ? widths.fof : 1                                                                      // 4838\n\t, kerning = options.kerning ? options.kerning : this.internal.getFont().metadata.Unicode.kerning                      // 4839\n\t, kerningFractionOf = kerning.fof ? kerning.fof : 1                                                                   // 4840\n                                                                                                                       // 4841\n\t// console.log(\"widths, kergnings\", widths, kerning)                                                                  // 4842\n                                                                                                                       // 4843\n\tvar i, l                                                                                                              // 4844\n\t, char_code                                                                                                           // 4845\n\t, prior_char_code = 0 // for kerning                                                                                  // 4846\n\t, default_char_width = widths[0] || widthsFractionOf                                                                  // 4847\n\t, output = []                                                                                                         // 4848\n                                                                                                                       // 4849\n\tfor (i = 0, l = text.length; i < l; i++) {                                                                            // 4850\n\t\tchar_code = text.charCodeAt(i)                                                                                       // 4851\n\t\toutput.push(                                                                                                         // 4852\n\t\t\t( widths[char_code] || default_char_width ) / widthsFractionOf +                                                    // 4853\n\t\t\t( kerning[char_code] && kerning[char_code][prior_char_code] || 0 ) / kerningFractionOf                              // 4854\n\t\t)                                                                                                                    // 4855\n\t\tprior_char_code = char_code                                                                                          // 4856\n\t}                                                                                                                     // 4857\n                                                                                                                       // 4858\n\treturn output                                                                                                         // 4859\n}                                                                                                                      // 4860\nvar getArraySum = function(array){                                                                                     // 4861\n\tvar i = array.length                                                                                                  // 4862\n\t, output = 0                                                                                                          // 4863\n\twhile(i){                                                                                                             // 4864\n\t\t;i--;                                                                                                                // 4865\n\t\toutput += array[i]                                                                                                   // 4866\n\t}                                                                                                                     // 4867\n\treturn output                                                                                                         // 4868\n}                                                                                                                      // 4869\n/**                                                                                                                    // 4870\nReturns a widths of string in a given font, if the font size is set as 1 point.                                        // 4871\n                                                                                                                       // 4872\nIn other words, this is \"proportional\" value. For 1 unit of font size, the length                                      // 4873\nof the string will be that much.                                                                                       // 4874\n                                                                                                                       // 4875\nMultiply by font size to get actual width in *points*                                                                  // 4876\nThen divide by 72 to get inches or divide by (72/25.6) to get 'mm' etc.                                                // 4877\n                                                                                                                       // 4878\n@public                                                                                                                // 4879\n@function                                                                                                              // 4880\n@param                                                                                                                 // 4881\n@returns {Type}                                                                                                        // 4882\n*/                                                                                                                     // 4883\nvar getStringUnitWidth = API.getStringUnitWidth = function(text, options) {                                            // 4884\n\treturn getArraySum(getCharWidthsArray.call(this, text, options))                                                      // 4885\n}                                                                                                                      // 4886\n                                                                                                                       // 4887\n/**                                                                                                                    // 4888\nreturns array of lines                                                                                                 // 4889\n*/                                                                                                                     // 4890\nvar splitLongWord = function(word, widths_array, firstLineMaxLen, maxLen){                                             // 4891\n\tvar answer = []                                                                                                       // 4892\n                                                                                                                       // 4893\n\t// 1st, chop off the piece that can fit on the hanging line.                                                          // 4894\n\tvar i = 0                                                                                                             // 4895\n\t, l = word.length                                                                                                     // 4896\n\t, workingLen = 0                                                                                                      // 4897\n\twhile (i !== l && workingLen + widths_array[i] < firstLineMaxLen){                                                    // 4898\n\t\tworkingLen += widths_array[i]                                                                                        // 4899\n\t\t;i++;                                                                                                                // 4900\n\t}                                                                                                                     // 4901\n\t// this is first line.                                                                                                // 4902\n\tanswer.push(word.slice(0, i))                                                                                         // 4903\n                                                                                                                       // 4904\n\t// 2nd. Split the rest into maxLen pieces.                                                                            // 4905\n\tvar startOfLine = i                                                                                                   // 4906\n\tworkingLen = 0                                                                                                        // 4907\n\twhile (i !== l){                                                                                                      // 4908\n\t\tif (workingLen + widths_array[i] > maxLen) {                                                                         // 4909\n\t\t\tanswer.push(word.slice(startOfLine, i))                                                                             // 4910\n\t\t\tworkingLen = 0                                                                                                      // 4911\n\t\t\tstartOfLine = i                                                                                                     // 4912\n\t\t}                                                                                                                    // 4913\n\t\tworkingLen += widths_array[i]                                                                                        // 4914\n\t\t;i++;                                                                                                                // 4915\n\t}                                                                                                                     // 4916\n\tif (startOfLine !== i) {                                                                                              // 4917\n\t\tanswer.push(word.slice(startOfLine, i))                                                                              // 4918\n\t}                                                                                                                     // 4919\n                                                                                                                       // 4920\n\treturn answer                                                                                                         // 4921\n}                                                                                                                      // 4922\n                                                                                                                       // 4923\n// Note, all sizing inputs for this function must be in \"font measurement units\"                                       // 4924\n// By default, for PDF, it's \"point\".                                                                                  // 4925\nvar splitParagraphIntoLines = function(text, maxlen, options){                                                         // 4926\n\t// at this time works only on Western scripts, ones with space char                                                   // 4927\n\t// separating the words. Feel free to expand.                                                                         // 4928\n                                                                                                                       // 4929\n\tif (!options) {                                                                                                       // 4930\n\t\toptions = {}                                                                                                         // 4931\n\t}                                                                                                                     // 4932\n                                                                                                                       // 4933\n\tvar line = []                                                                                                         // 4934\n\t, lines = [line]                                                                                                      // 4935\n\t, line_length = options.textIndent || 0                                                                               // 4936\n\t, separator_length = 0                                                                                                // 4937\n\t, current_word_length = 0                                                                                             // 4938\n\t, word                                                                                                                // 4939\n\t, widths_array                                                                                                        // 4940\n\t, words = text.split(' ')                                                                                             // 4941\n\t, spaceCharWidth = getCharWidthsArray(' ', options)[0]                                                                // 4942\n\t, i, l, tmp, lineIndent                                                                                               // 4943\n                                                                                                                       // 4944\n\tif(options.lineIndent === -1) {                                                                                       // 4945\n\t\tlineIndent = words[0].length +2;                                                                                     // 4946\n\t} else {                                                                                                              // 4947\n\t\tlineIndent = options.lineIndent || 0;                                                                                // 4948\n\t}                                                                                                                     // 4949\n\tif(lineIndent) {                                                                                                      // 4950\n\t\tvar pad = Array(lineIndent).join(\" \"), wrds = [];                                                                    // 4951\n\t\twords.map(function(wrd) {                                                                                            // 4952\n\t\t\twrd = wrd.split(/\\s*\\n/);                                                                                           // 4953\n\t\t\tif(wrd.length > 1) {                                                                                                // 4954\n\t\t\t\twrds = wrds.concat(wrd.map(function(wrd, idx) {                                                                    // 4955\n\t\t\t\t\treturn (idx && wrd.length ? \"\\n\":\"\") + wrd;                                                                       // 4956\n\t\t\t\t}));                                                                                                               // 4957\n\t\t\t} else {                                                                                                            // 4958\n\t\t\t\twrds.push(wrd[0]);                                                                                                 // 4959\n\t\t\t}                                                                                                                   // 4960\n\t\t});                                                                                                                  // 4961\n\t\twords = wrds;                                                                                                        // 4962\n\t\tlineIndent = getStringUnitWidth(pad, options);                                                                       // 4963\n\t}                                                                                                                     // 4964\n                                                                                                                       // 4965\n\tfor (i = 0, l = words.length; i < l; i++) {                                                                           // 4966\n\t\tvar force = 0;                                                                                                       // 4967\n                                                                                                                       // 4968\n\t\tword = words[i]                                                                                                      // 4969\n\t\tif(lineIndent && word[0] == \"\\n\") {                                                                                  // 4970\n\t\t\tword = word.substr(1);                                                                                              // 4971\n\t\t\tforce = 1;                                                                                                          // 4972\n\t\t}                                                                                                                    // 4973\n\t\twidths_array = getCharWidthsArray(word, options)                                                                     // 4974\n\t\tcurrent_word_length = getArraySum(widths_array)                                                                      // 4975\n                                                                                                                       // 4976\n\t\tif (line_length + separator_length + current_word_length > maxlen || force) {                                        // 4977\n\t\t\tif (current_word_length > maxlen) {                                                                                 // 4978\n\t\t\t\t// this happens when you have space-less long URLs for example.                                                    // 4979\n\t\t\t\t// we just chop these to size. We do NOT insert hiphens                                                            // 4980\n\t\t\t\ttmp = splitLongWord(word, widths_array, maxlen - (line_length + separator_length), maxlen)                         // 4981\n\t\t\t\t// first line we add to existing line object                                                                       // 4982\n\t\t\t\tline.push(tmp.shift()) // it's ok to have extra space indicator there                                              // 4983\n\t\t\t\t// last line we make into new line object                                                                          // 4984\n\t\t\t\tline = [tmp.pop()]                                                                                                 // 4985\n\t\t\t\t// lines in the middle we apped to lines object as whole lines                                                     // 4986\n\t\t\t\twhile(tmp.length){                                                                                                 // 4987\n\t\t\t\t\tlines.push([tmp.shift()]) // single fragment occupies whole line                                                  // 4988\n\t\t\t\t}                                                                                                                  // 4989\n\t\t\t\tcurrent_word_length = getArraySum( widths_array.slice(word.length - line[0].length) )                              // 4990\n\t\t\t} else {                                                                                                            // 4991\n\t\t\t\t// just put it on a new line                                                                                       // 4992\n\t\t\t\tline = [word]                                                                                                      // 4993\n\t\t\t}                                                                                                                   // 4994\n                                                                                                                       // 4995\n\t\t\t// now we attach new line to lines                                                                                  // 4996\n\t\t\tlines.push(line)                                                                                                    // 4997\n\t\t\tline_length = current_word_length + lineIndent                                                                      // 4998\n\t\t\tseparator_length = spaceCharWidth                                                                                   // 4999\n                                                                                                                       // 5000\n\t\t} else {                                                                                                             // 5001\n\t\t\tline.push(word)                                                                                                     // 5002\n                                                                                                                       // 5003\n\t\t\tline_length += separator_length + current_word_length                                                               // 5004\n\t\t\tseparator_length = spaceCharWidth                                                                                   // 5005\n\t\t}                                                                                                                    // 5006\n\t}                                                                                                                     // 5007\n                                                                                                                       // 5008\n\tif(lineIndent) {                                                                                                      // 5009\n\t\tvar postProcess = function(ln, idx) {                                                                                // 5010\n\t\t\treturn (idx ? pad : '') + ln.join(\" \");                                                                             // 5011\n\t\t};                                                                                                                   // 5012\n\t} else {                                                                                                              // 5013\n\t\tvar postProcess = function(ln) { return ln.join(\" \")};                                                               // 5014\n\t}                                                                                                                     // 5015\n                                                                                                                       // 5016\n\treturn lines.map(postProcess);                                                                                        // 5017\n}                                                                                                                      // 5018\n                                                                                                                       // 5019\n/**                                                                                                                    // 5020\nSplits a given string into an array of strings. Uses 'size' value                                                      // 5021\n(in measurement units declared as default for the jsPDF instance)                                                      // 5022\nand the font's \"widths\" and \"Kerning\" tables, where availabe, to                                                       // 5023\ndetermine display length of a given string for a given font.                                                           // 5024\n                                                                                                                       // 5025\nWe use character's 100% of unit size (height) as width when Width                                                      // 5026\ntable or other default width is not available.                                                                         // 5027\n                                                                                                                       // 5028\n@public                                                                                                                // 5029\n@function                                                                                                              // 5030\n@param text {String} Unencoded, regular JavaScript (Unicode, UTF-16 / UCS-2) string.                                   // 5031\n@param size {Number} Nominal number, measured in units default to this instance of jsPDF.                              // 5032\n@param options {Object} Optional flags needed for chopper to do the right thing.                                       // 5033\n@returns {Array} with strings chopped to size.                                                                         // 5034\n*/                                                                                                                     // 5035\nAPI.splitTextToSize = function(text, maxlen, options) {                                                                // 5036\n\t'use strict'                                                                                                          // 5037\n                                                                                                                       // 5038\n\tif (!options) {                                                                                                       // 5039\n\t\toptions = {}                                                                                                         // 5040\n\t}                                                                                                                     // 5041\n                                                                                                                       // 5042\n\tvar fsize = options.fontSize || this.internal.getFontSize()                                                           // 5043\n\t, newOptions = (function(options){                                                                                    // 5044\n\t\tvar widths = {0:1}                                                                                                   // 5045\n\t\t, kerning = {}                                                                                                       // 5046\n                                                                                                                       // 5047\n\t\tif (!options.widths || !options.kerning) {                                                                           // 5048\n\t\t\tvar f = this.internal.getFont(options.fontName, options.fontStyle)                                                  // 5049\n\t\t\t, encoding = 'Unicode'                                                                                              // 5050\n\t\t\t// NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE                                                                          // 5051\n\t\t\t// Actual JavaScript-native String's 16bit char codes used.                                                         // 5052\n\t\t\t// no multi-byte logic here                                                                                         // 5053\n                                                                                                                       // 5054\n\t\t\tif (f.metadata[encoding]) {                                                                                         // 5055\n\t\t\t\treturn {                                                                                                           // 5056\n\t\t\t\t\twidths: f.metadata[encoding].widths || widths                                                                     // 5057\n\t\t\t\t\t, kerning: f.metadata[encoding].kerning || kerning                                                                // 5058\n\t\t\t\t}                                                                                                                  // 5059\n\t\t\t}                                                                                                                   // 5060\n\t\t} else {                                                                                                             // 5061\n\t\t\treturn \t{                                                                                                           // 5062\n\t\t\t\twidths: options.widths                                                                                             // 5063\n\t\t\t\t, kerning: options.kerning                                                                                         // 5064\n\t\t\t}                                                                                                                   // 5065\n\t\t}                                                                                                                    // 5066\n                                                                                                                       // 5067\n\t\t// then use default values                                                                                           // 5068\n\t\treturn \t{                                                                                                            // 5069\n\t\t\twidths: widths                                                                                                      // 5070\n\t\t\t, kerning: kerning                                                                                                  // 5071\n\t\t}                                                                                                                    // 5072\n\t}).call(this, options)                                                                                                // 5073\n                                                                                                                       // 5074\n\t// first we split on end-of-line chars                                                                                // 5075\n\tvar paragraphs                                                                                                        // 5076\n\tif(Array.isArray(text)) {                                                                                             // 5077\n\t\tparagraphs = text;                                                                                                   // 5078\n\t} else {                                                                                                              // 5079\n\t\tparagraphs = text.split(/\\r?\\n/);                                                                                    // 5080\n\t}                                                                                                                     // 5081\n                                                                                                                       // 5082\n\t// now we convert size (max length of line) into \"font size units\"                                                    // 5083\n\t// at present time, the \"font size unit\" is always 'point'                                                            // 5084\n\t// 'proportional' means, \"in proportion to font size\"                                                                 // 5085\n\tvar fontUnit_maxLen = 1.0 * this.internal.scaleFactor * maxlen / fsize                                                // 5086\n\t// at this time, fsize is always in \"points\" regardless of the default measurement unit of the doc.                   // 5087\n\t// this may change in the future?                                                                                     // 5088\n\t// until then, proportional_maxlen is likely to be in 'points'                                                        // 5089\n                                                                                                                       // 5090\n\t// If first line is to be indented (shorter or longer) than maxLen                                                    // 5091\n\t// we indicate that by using CSS-style \"text-indent\" option.                                                          // 5092\n\t// here it's in font units too (which is likely 'points')                                                             // 5093\n\t// it can be negative (which makes the first line longer than maxLen)                                                 // 5094\n\tnewOptions.textIndent = options.textIndent ?                                                                          // 5095\n\t\toptions.textIndent * 1.0 * this.internal.scaleFactor / fsize :                                                       // 5096\n\t\t0                                                                                                                    // 5097\n\tnewOptions.lineIndent = options.lineIndent;                                                                           // 5098\n                                                                                                                       // 5099\n\tvar i, l                                                                                                              // 5100\n\t, output = []                                                                                                         // 5101\n\tfor (i = 0, l = paragraphs.length; i < l; i++) {                                                                      // 5102\n\t\toutput = output.concat(                                                                                              // 5103\n\t\t\tsplitParagraphIntoLines(                                                                                            // 5104\n\t\t\t\tparagraphs[i]                                                                                                      // 5105\n\t\t\t\t, fontUnit_maxLen                                                                                                  // 5106\n\t\t\t\t, newOptions                                                                                                       // 5107\n\t\t\t)                                                                                                                   // 5108\n\t\t)                                                                                                                    // 5109\n\t}                                                                                                                     // 5110\n                                                                                                                       // 5111\n\treturn output                                                                                                         // 5112\n}                                                                                                                      // 5113\n                                                                                                                       // 5114\n})(jsPDF.API);                                                                                                         // 5115\n/** @preserve                                                                                                          // 5116\njsPDF standard_fonts_metrics plugin                                                                                    // 5117\nCopyright (c) 2012 Willow Systems Corporation, willow-systems.com                                                      // 5118\nMIT license.                                                                                                           // 5119\n*/                                                                                                                     // 5120\n/**                                                                                                                    // 5121\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 5122\n * a copy of this software and associated documentation files (the                                                     // 5123\n * \"Software\"), to deal in the Software without restriction, including                                                 // 5124\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 5125\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 5126\n * permit persons to whom the Software is furnished to do so, subject to                                               // 5127\n * the following conditions:                                                                                           // 5128\n *                                                                                                                     // 5129\n * The above copyright notice and this permission notice shall be                                                      // 5130\n * included in all copies or substantial portions of the Software.                                                     // 5131\n *                                                                                                                     // 5132\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 5133\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 5134\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 5135\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 5136\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 5137\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 5138\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 5139\n * ====================================================================                                                // 5140\n */                                                                                                                    // 5141\n                                                                                                                       // 5142\n;(function(API) {                                                                                                      // 5143\n'use strict'                                                                                                           // 5144\n                                                                                                                       // 5145\n/*                                                                                                                     // 5146\n# reference (Python) versions of 'compress' and 'uncompress'                                                           // 5147\n# only 'uncompress' function is featured lower as JavaScript                                                           // 5148\n# if you want to unit test \"roundtrip\", just transcribe the reference                                                  // 5149\n# 'compress' function from Python into JavaScript                                                                      // 5150\n                                                                                                                       // 5151\ndef compress(data):                                                                                                    // 5152\n                                                                                                                       // 5153\n\tkeys =   '0123456789abcdef'                                                                                           // 5154\n\tvalues = 'klmnopqrstuvwxyz'                                                                                           // 5155\n\tmapping = dict(zip(keys, values))                                                                                     // 5156\n\tvals = []                                                                                                             // 5157\n\tfor key in data.keys():                                                                                               // 5158\n\t\tvalue = data[key]                                                                                                    // 5159\n\t\ttry:                                                                                                                 // 5160\n\t\t\tkeystring = hex(key)[2:]                                                                                            // 5161\n\t\t\tkeystring = keystring[:-1] + mapping[keystring[-1:]]                                                                // 5162\n\t\texcept:                                                                                                              // 5163\n\t\t\tkeystring = key.join([\"'\",\"'\"])                                                                                     // 5164\n\t\t\t#print('Keystring is %s' % keystring)                                                                               // 5165\n                                                                                                                       // 5166\n\t\ttry:                                                                                                                 // 5167\n\t\t\tif value < 0:                                                                                                       // 5168\n\t\t\t\tvaluestring = hex(value)[3:]                                                                                       // 5169\n\t\t\t\tnumberprefix = '-'                                                                                                 // 5170\n\t\t\telse:                                                                                                               // 5171\n\t\t\t\tvaluestring = hex(value)[2:]                                                                                       // 5172\n\t\t\t\tnumberprefix = ''                                                                                                  // 5173\n\t\t\tvaluestring = numberprefix + valuestring[:-1] + mapping[valuestring[-1:]]                                           // 5174\n\t\texcept:                                                                                                              // 5175\n\t\t\tif type(value) == dict:                                                                                             // 5176\n\t\t\t\tvaluestring = compress(value)                                                                                      // 5177\n\t\t\telse:                                                                                                               // 5178\n\t\t\t\traise Exception(\"Don't know what to do with value type %s\" % type(value))                                          // 5179\n                                                                                                                       // 5180\n\t\tvals.append(keystring+valuestring)                                                                                   // 5181\n\t                                                                                                                      // 5182\n\treturn '{' + ''.join(vals) + '}'                                                                                      // 5183\n                                                                                                                       // 5184\ndef uncompress(data):                                                                                                  // 5185\n                                                                                                                       // 5186\n\tdecoded = '0123456789abcdef'                                                                                          // 5187\n\tencoded = 'klmnopqrstuvwxyz'                                                                                          // 5188\n\tmapping = dict(zip(encoded, decoded))                                                                                 // 5189\n                                                                                                                       // 5190\n\tsign = +1                                                                                                             // 5191\n\tstringmode = False                                                                                                    // 5192\n\tstringparts = []                                                                                                      // 5193\n                                                                                                                       // 5194\n\toutput = {}                                                                                                           // 5195\n                                                                                                                       // 5196\n\tactiveobject = output                                                                                                 // 5197\n\tparentchain = []                                                                                                      // 5198\n                                                                                                                       // 5199\n\tkeyparts = ''                                                                                                         // 5200\n\tvalueparts = ''                                                                                                       // 5201\n                                                                                                                       // 5202\n\tkey = None                                                                                                            // 5203\n                                                                                                                       // 5204\n\tending = set(encoded)                                                                                                 // 5205\n                                                                                                                       // 5206\n\ti = 1                                                                                                                 // 5207\n\tl = len(data) - 1 # stripping starting, ending {}                                                                     // 5208\n\twhile i != l: # stripping {}                                                                                          // 5209\n\t\t# -, {, }, ' are special.                                                                                            // 5210\n                                                                                                                       // 5211\n\t\tch = data[i]                                                                                                         // 5212\n\t\ti += 1                                                                                                               // 5213\n                                                                                                                       // 5214\n\t\tif ch == \"'\":                                                                                                        // 5215\n\t\t\tif stringmode:                                                                                                      // 5216\n\t\t\t\t# end of string mode                                                                                               // 5217\n\t\t\t\tstringmode = False                                                                                                 // 5218\n\t\t\t\tkey = ''.join(stringparts)                                                                                         // 5219\n\t\t\telse:                                                                                                               // 5220\n\t\t\t\t# start of string mode                                                                                             // 5221\n\t\t\t\tstringmode = True                                                                                                  // 5222\n\t\t\t\tstringparts = []                                                                                                   // 5223\n\t\telif stringmode == True:                                                                                             // 5224\n\t\t\t#print(\"Adding %s to stringpart\" % ch)                                                                              // 5225\n\t\t\tstringparts.append(ch)                                                                                              // 5226\n                                                                                                                       // 5227\n\t\telif ch == '{':                                                                                                      // 5228\n\t\t\t# start of object                                                                                                   // 5229\n\t\t\tparentchain.append( [activeobject, key] )                                                                           // 5230\n\t\t\tactiveobject = {}                                                                                                   // 5231\n\t\t\tkey = None                                                                                                          // 5232\n\t\t\t#DEBUG = True                                                                                                       // 5233\n\t\telif ch == '}':                                                                                                      // 5234\n\t\t\t# end of object                                                                                                     // 5235\n\t\t\tparent, key = parentchain.pop()                                                                                     // 5236\n\t\t\tparent[key] = activeobject                                                                                          // 5237\n\t\t\tkey = None                                                                                                          // 5238\n\t\t\tactiveobject = parent                                                                                               // 5239\n\t\t\t#DEBUG = False                                                                                                      // 5240\n                                                                                                                       // 5241\n\t\telif ch == '-':                                                                                                      // 5242\n\t\t\tsign = -1                                                                                                           // 5243\n\t\telse:                                                                                                                // 5244\n\t\t\t# must be number                                                                                                    // 5245\n\t\t\tif key == None:                                                                                                     // 5246\n\t\t\t\t#debug(\"In Key. It is '%s', ch is '%s'\" % (keyparts, ch))                                                          // 5247\n\t\t\t\tif ch in ending:                                                                                                   // 5248\n\t\t\t\t\t#debug(\"End of key\")                                                                                              // 5249\n\t\t\t\t\tkeyparts += mapping[ch]                                                                                           // 5250\n\t\t\t\t\tkey = int(keyparts, 16) * sign                                                                                    // 5251\n\t\t\t\t\tsign = +1                                                                                                         // 5252\n\t\t\t\t\tkeyparts = ''                                                                                                     // 5253\n\t\t\t\telse:                                                                                                              // 5254\n\t\t\t\t\tkeyparts += ch                                                                                                    // 5255\n\t\t\telse:                                                                                                               // 5256\n\t\t\t\t#debug(\"In value. It is '%s', ch is '%s'\" % (valueparts, ch))                                                      // 5257\n\t\t\t\tif ch in ending:                                                                                                   // 5258\n\t\t\t\t\t#debug(\"End of value\")                                                                                            // 5259\n\t\t\t\t\tvalueparts += mapping[ch]                                                                                         // 5260\n\t\t\t\t\tactiveobject[key] = int(valueparts, 16) * sign                                                                    // 5261\n\t\t\t\t\tsign = +1                                                                                                         // 5262\n\t\t\t\t\tkey = None                                                                                                        // 5263\n\t\t\t\t\tvalueparts = ''                                                                                                   // 5264\n\t\t\t\telse:                                                                                                              // 5265\n\t\t\t\t\tvalueparts += ch                                                                                                  // 5266\n                                                                                                                       // 5267\n\t\t\t#debug(activeobject)                                                                                                // 5268\n                                                                                                                       // 5269\n\treturn output                                                                                                         // 5270\n                                                                                                                       // 5271\n*/                                                                                                                     // 5272\n                                                                                                                       // 5273\n/**                                                                                                                    // 5274\nUncompresses data compressed into custom, base16-like format.                                                          // 5275\n@public                                                                                                                // 5276\n@function                                                                                                              // 5277\n@param                                                                                                                 // 5278\n@returns {Type}                                                                                                        // 5279\n*/                                                                                                                     // 5280\nvar uncompress = function(data){                                                                                       // 5281\n                                                                                                                       // 5282\n\tvar decoded = '0123456789abcdef'                                                                                      // 5283\n\t, encoded = 'klmnopqrstuvwxyz'                                                                                        // 5284\n\t, mapping = {}                                                                                                        // 5285\n                                                                                                                       // 5286\n\tfor (var i = 0; i < encoded.length; i++){                                                                             // 5287\n\t\tmapping[encoded[i]] = decoded[i]                                                                                     // 5288\n\t}                                                                                                                     // 5289\n                                                                                                                       // 5290\n\tvar undef                                                                                                             // 5291\n\t, output = {}                                                                                                         // 5292\n\t, sign = 1                                                                                                            // 5293\n\t, stringparts // undef. will be [] in string mode                                                                     // 5294\n\t                                                                                                                      // 5295\n\t, activeobject = output                                                                                               // 5296\n\t, parentchain = []                                                                                                    // 5297\n\t, parent_key_pair                                                                                                     // 5298\n\t, keyparts = ''                                                                                                       // 5299\n\t, valueparts = ''                                                                                                     // 5300\n\t, key // undef. will be Truthy when Key is resolved.                                                                  // 5301\n\t, datalen = data.length - 1 // stripping ending }                                                                     // 5302\n\t, ch                                                                                                                  // 5303\n                                                                                                                       // 5304\n\ti = 1 // stripping starting {                                                                                         // 5305\n\t                                                                                                                      // 5306\n\twhile (i != datalen){                                                                                                 // 5307\n\t\t// - { } ' are special.                                                                                              // 5308\n                                                                                                                       // 5309\n\t\tch = data[i]                                                                                                         // 5310\n\t\ti += 1                                                                                                               // 5311\n                                                                                                                       // 5312\n\t\tif (ch == \"'\"){                                                                                                      // 5313\n\t\t\tif (stringparts){                                                                                                   // 5314\n\t\t\t\t// end of string mode                                                                                              // 5315\n\t\t\t\tkey = stringparts.join('')                                                                                         // 5316\n\t\t\t\tstringparts = undef\t\t\t\t                                                                                            // 5317\n\t\t\t} else {                                                                                                            // 5318\n\t\t\t\t// start of string mode                                                                                            // 5319\n\t\t\t\tstringparts = []\t\t\t\t                                                                                               // 5320\n\t\t\t}                                                                                                                   // 5321\n\t\t} else if (stringparts){                                                                                             // 5322\n\t\t\tstringparts.push(ch)                                                                                                // 5323\n\t\t} else if (ch == '{'){                                                                                               // 5324\n\t\t\t// start of object                                                                                                  // 5325\n\t\t\tparentchain.push( [activeobject, key] )                                                                             // 5326\n\t\t\tactiveobject = {}                                                                                                   // 5327\n\t\t\tkey = undef                                                                                                         // 5328\n\t\t} else if (ch == '}'){                                                                                               // 5329\n\t\t\t// end of object                                                                                                    // 5330\n\t\t\tparent_key_pair = parentchain.pop()                                                                                 // 5331\n\t\t\tparent_key_pair[0][parent_key_pair[1]] = activeobject                                                               // 5332\n\t\t\tkey = undef                                                                                                         // 5333\n\t\t\tactiveobject = parent_key_pair[0]                                                                                   // 5334\n\t\t} else if (ch == '-'){                                                                                               // 5335\n\t\t\tsign = -1                                                                                                           // 5336\n\t\t} else {                                                                                                             // 5337\n\t\t\t// must be number                                                                                                   // 5338\n\t\t\tif (key === undef) {                                                                                                // 5339\n\t\t\t\tif (mapping.hasOwnProperty(ch)){                                                                                   // 5340\n\t\t\t\t\tkeyparts += mapping[ch]                                                                                           // 5341\n\t\t\t\t\tkey = parseInt(keyparts, 16) * sign                                                                               // 5342\n\t\t\t\t\tsign = +1                                                                                                         // 5343\n\t\t\t\t\tkeyparts = ''                                                                                                     // 5344\n\t\t\t\t} else {                                                                                                           // 5345\n\t\t\t\t\tkeyparts += ch                                                                                                    // 5346\n\t\t\t\t}                                                                                                                  // 5347\n\t\t\t} else {                                                                                                            // 5348\n\t\t\t\tif (mapping.hasOwnProperty(ch)){                                                                                   // 5349\n\t\t\t\t\tvalueparts += mapping[ch]                                                                                         // 5350\n\t\t\t\t\tactiveobject[key] = parseInt(valueparts, 16) * sign                                                               // 5351\n\t\t\t\t\tsign = +1                                                                                                         // 5352\n\t\t\t\t\tkey = undef                                                                                                       // 5353\n\t\t\t\t\tvalueparts = ''                                                                                                   // 5354\n\t\t\t\t} else {                                                                                                           // 5355\n\t\t\t\t\tvalueparts += ch\t\t\t\t\t                                                                                             // 5356\n\t\t\t\t}                                                                                                                  // 5357\n\t\t\t}                                                                                                                   // 5358\n\t\t}                                                                                                                    // 5359\n\t} // end while                                                                                                        // 5360\n                                                                                                                       // 5361\n\treturn output                                                                                                         // 5362\n}                                                                                                                      // 5363\n                                                                                                                       // 5364\n// encoding = 'Unicode'                                                                                                // 5365\n// NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE. NO clever BOM behavior                                                     // 5366\n// Actual 16bit char codes used.                                                                                       // 5367\n// no multi-byte logic here                                                                                            // 5368\n                                                                                                                       // 5369\n// Unicode characters to WinAnsiEncoding:                                                                              // 5370\n// {402: 131, 8211: 150, 8212: 151, 8216: 145, 8217: 146, 8218: 130, 8220: 147, 8221: 148, 8222: 132, 8224: 134, 8225: 135, 8226: 149, 8230: 133, 8364: 128, 8240:137, 8249: 139, 8250: 155, 710: 136, 8482: 153, 338: 140, 339: 156, 732: 152, 352: 138, 353: 154, 376: 159, 381: 142, 382: 158}\n// as you can see, all Unicode chars are outside of 0-255 range. No char code conflicts.                               // 5372\n// this means that you can give Win cp1252 encoded strings to jsPDF for rendering directly                             // 5373\n// as well as give strings with some (supported by these fonts) Unicode characters and                                 // 5374\n// these will be mapped to win cp1252                                                                                  // 5375\n// for example, you can send char code (cp1252) 0x80 or (unicode) 0x20AC, getting \"Euro\" glyph displayed in both cases.\n                                                                                                                       // 5377\nvar encodingBlock = {                                                                                                  // 5378\n\t'codePages': ['WinAnsiEncoding']                                                                                      // 5379\n\t, 'WinAnsiEncoding': uncompress(\"{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}\")\n}                                                                                                                      // 5381\n, encodings = {'Unicode':{                                                                                             // 5382\n\t'Courier': encodingBlock                                                                                              // 5383\n\t, 'Courier-Bold': encodingBlock                                                                                       // 5384\n\t, 'Courier-BoldOblique': encodingBlock                                                                                // 5385\n\t, 'Courier-Oblique': encodingBlock                                                                                    // 5386\n\t, 'Helvetica': encodingBlock                                                                                          // 5387\n\t, 'Helvetica-Bold': encodingBlock                                                                                     // 5388\n\t, 'Helvetica-BoldOblique': encodingBlock                                                                              // 5389\n\t, 'Helvetica-Oblique': encodingBlock                                                                                  // 5390\n\t, 'Times-Roman': encodingBlock                                                                                        // 5391\n\t, 'Times-Bold': encodingBlock                                                                                         // 5392\n\t, 'Times-BoldItalic': encodingBlock                                                                                   // 5393\n\t, 'Times-Italic': encodingBlock                                                                                       // 5394\n//\t, 'Symbol'                                                                                                          // 5395\n//\t, 'ZapfDingbats'                                                                                                    // 5396\n}}                                                                                                                     // 5397\n/**                                                                                                                    // 5398\nResources:                                                                                                             // 5399\nFont metrics data is reprocessed derivative of contents of                                                             // 5400\n\"Font Metrics for PDF Core 14 Fonts\" package, which exhibits the following copyright and license:                      // 5401\n                                                                                                                       // 5402\nCopyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated. All Rights Reserved.                      // 5403\n                                                                                                                       // 5404\nThis file and the 14 PostScript(R) AFM files it accompanies may be used,                                               // 5405\ncopied, and distributed for any purpose and without charge, with or without                                            // 5406\nmodification, provided that all copyright notices are retained; that the AFM                                           // 5407\nfiles are not distributed without this file; that all modifications to this                                            // 5408\nfile or any of the AFM files are prominently noted in the modified file(s);                                            // 5409\nand that this paragraph is not modified. Adobe Systems has no responsibility                                           // 5410\nor obligation to support the use of the AFM files.                                                                     // 5411\n                                                                                                                       // 5412\n*/                                                                                                                     // 5413\n, fontMetrics = {'Unicode':{                                                                                           // 5414\n\t// all sizing numbers are n/fontMetricsFractionOf = one font size unit                                                // 5415\n\t// this means that if fontMetricsFractionOf = 1000, and letter A's width is 476, it's                                 // 5416\n\t// width is 476/1000 or 47.6% of its height (regardless of font size)                                                 // 5417\n\t// At this time this value applies to \"widths\" and \"kerning\" numbers.                                                 // 5418\n                                                                                                                       // 5419\n\t// char code 0 represents \"default\" (average) width - use it for chars missing in this table.                         // 5420\n\t// key 'fof' represents the \"fontMetricsFractionOf\" value                                                             // 5421\n                                                                                                                       // 5422\n\t'Courier-Oblique': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\")                                            // 5423\n\t, 'Times-BoldItalic': uncompress(\"{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}\")\n\t, 'Helvetica-Bold': uncompress(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\")\n\t, 'Courier': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\")                                                  // 5426\n\t, 'Courier-BoldOblique': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\")                                      // 5427\n\t, 'Times-Bold': uncompress(\"{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}\")\n\t//, 'Symbol': uncompress(\"{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}\")\n\t, 'Helvetica': uncompress(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\")\n\t, 'Helvetica-BoldOblique': uncompress(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\")\n\t//, 'ZapfDingbats': uncompress(\"{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}\")                                       // 5432\n\t, 'Courier-Bold': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\")                                             // 5433\n\t, 'Times-Italic': uncompress(\"{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}\")\n\t, 'Times-Roman': uncompress(\"{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}\")\n\t, 'Helvetica-Oblique': uncompress(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\")\n}};                                                                                                                    // 5437\n                                                                                                                       // 5438\n/*                                                                                                                     // 5439\nThis event handler is fired when a new jsPDF object is initialized                                                     // 5440\nThis event handler appends metrics data to standard fonts within                                                       // 5441\nthat jsPDF instance. The metrics are mapped over Unicode character                                                     // 5442\ncodes, NOT CIDs or other codes matching the StandardEncoding table of the                                              // 5443\nstandard PDF fonts.                                                                                                    // 5444\nFuture:                                                                                                                // 5445\nAlso included is the encoding maping table, converting Unicode (UCS-2, UTF-16)                                         // 5446\nchar codes to StandardEncoding character codes. The encoding table is to be used                                       // 5447\nsomewhere around \"pdfEscape\" call.                                                                                     // 5448\n*/                                                                                                                     // 5449\n                                                                                                                       // 5450\nAPI.events.push([                                                                                                      // 5451\n\t'addFonts'                                                                                                            // 5452\n\t,function(fontManagementObjects) {                                                                                    // 5453\n\t\t// fontManagementObjects is {                                                                                        // 5454\n\t\t//\t'fonts':font_ID-keyed hash of font objects                                                                        // 5455\n\t\t//\t, 'dictionary': lookup object, linking [\"FontFamily\"]['Style'] to font ID                                         // 5456\n\t\t//}                                                                                                                  // 5457\n\t\tvar font                                                                                                             // 5458\n\t\t, fontID                                                                                                             // 5459\n\t\t, metrics                                                                                                            // 5460\n\t\t, unicode_section                                                                                                    // 5461\n\t\t, encoding = 'Unicode'                                                                                               // 5462\n\t\t, encodingBlock                                                                                                      // 5463\n                                                                                                                       // 5464\n\t\tfor (fontID in fontManagementObjects.fonts){                                                                         // 5465\n\t\t\tif (fontManagementObjects.fonts.hasOwnProperty(fontID)) {                                                           // 5466\n\t\t\t\tfont = fontManagementObjects.fonts[fontID]                                                                         // 5467\n                                                                                                                       // 5468\n\t\t\t\t// // we only ship 'Unicode' mappings and metrics. No need for loop.                                               // 5469\n\t\t\t\t// // still, leaving this for the future.                                                                          // 5470\n                                                                                                                       // 5471\n\t\t\t\t// for (encoding in fontMetrics){                                                                                  // 5472\n\t\t\t\t// \tif (fontMetrics.hasOwnProperty(encoding)) {                                                                    // 5473\n                                                                                                                       // 5474\n\t\t\t\t\t\tmetrics = fontMetrics[encoding][font.PostScriptName]                                                             // 5475\n\t\t\t\t\t\tif (metrics) {                                                                                                   // 5476\n\t\t\t\t\t\t\tif (font.metadata[encoding]) {                                                                                  // 5477\n\t\t\t\t\t\t\t\tunicode_section = font.metadata[encoding]                                                                      // 5478\n\t\t\t\t\t\t\t} else {                                                                                                        // 5479\n\t\t\t\t\t\t\t\tunicode_section = font.metadata[encoding] = {}                                                                 // 5480\n\t\t\t\t\t\t\t}                                                                                                               // 5481\n                                                                                                                       // 5482\n\t\t\t\t\t\t\tunicode_section.widths = metrics.widths                                                                         // 5483\n\t\t\t\t\t\t\tunicode_section.kerning = metrics.kerning                                                                       // 5484\n\t\t\t\t\t\t}                                                                                                                // 5485\n\t\t\t\t// \t}                                                                                                              // 5486\n\t\t\t\t// }                                                                                                               // 5487\n\t\t\t\t// for (encoding in encodings){                                                                                    // 5488\n\t\t\t\t// \tif (encodings.hasOwnProperty(encoding)) {                                                                      // 5489\n\t\t\t\t\t\tencodingBlock = encodings[encoding][font.PostScriptName]                                                         // 5490\n\t\t\t\t\t\tif (encodingBlock) {                                                                                             // 5491\n\t\t\t\t\t\t\tif (font.metadata[encoding]) {                                                                                  // 5492\n\t\t\t\t\t\t\t\tunicode_section = font.metadata[encoding]                                                                      // 5493\n\t\t\t\t\t\t\t} else {                                                                                                        // 5494\n\t\t\t\t\t\t\t\tunicode_section = font.metadata[encoding] = {}                                                                 // 5495\n\t\t\t\t\t\t\t}                                                                                                               // 5496\n                                                                                                                       // 5497\n\t\t\t\t\t\t\tunicode_section.encoding = encodingBlock                                                                        // 5498\n\t\t\t\t\t\t\tif (encodingBlock.codePages && encodingBlock.codePages.length) {                                                // 5499\n\t\t\t\t\t\t\t\tfont.encoding = encodingBlock.codePages[0]                                                                     // 5500\n\t\t\t\t\t\t\t}                                                                                                               // 5501\n\t\t\t\t\t\t}                                                                                                                // 5502\n\t\t\t\t// \t}                                                                                                              // 5503\n\t\t\t\t// }                                                                                                               // 5504\n\t\t\t}                                                                                                                   // 5505\n\t\t}                                                                                                                    // 5506\n\t}                                                                                                                     // 5507\n]) // end of adding event handler                                                                                      // 5508\n                                                                                                                       // 5509\n})(jsPDF.API);                                                                                                         // 5510\n/** ====================================================================                                               // 5511\n * jsPDF total_pages plugin                                                                                            // 5512\n * Copyright (c) 2013 Eduardo Menezes de Morais, eduardo.morais@usp.br                                                 // 5513\n *                                                                                                                     // 5514\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 5515\n * a copy of this software and associated documentation files (the                                                     // 5516\n * \"Software\"), to deal in the Software without restriction, including                                                 // 5517\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 5518\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 5519\n * permit persons to whom the Software is furnished to do so, subject to                                               // 5520\n * the following conditions:                                                                                           // 5521\n *                                                                                                                     // 5522\n * The above copyright notice and this permission notice shall be                                                      // 5523\n * included in all copies or substantial portions of the Software.                                                     // 5524\n *                                                                                                                     // 5525\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                     // 5526\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 5527\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                               // 5528\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                              // 5529\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                              // 5530\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                               // 5531\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                     // 5532\n * ====================================================================                                                // 5533\n */                                                                                                                    // 5534\n                                                                                                                       // 5535\n(function(jsPDFAPI) {                                                                                                  // 5536\n'use strict';                                                                                                          // 5537\n                                                                                                                       // 5538\njsPDFAPI.putTotalPages = function(pageExpression) {                                                                    // 5539\n\t'use strict';                                                                                                         // 5540\n        var replaceExpression = new RegExp(pageExpression, 'g');                                                       // 5541\n        for (var n = 1; n <= this.internal.getNumberOfPages(); n++) {                                                  // 5542\n            for (var i = 0; i < this.internal.pages[n].length; i++)                                                    // 5543\n               this.internal.pages[n][i] = this.internal.pages[n][i].replace(replaceExpression, this.internal.getNumberOfPages());\n        }                                                                                                              // 5545\n\treturn this;                                                                                                          // 5546\n};                                                                                                                     // 5547\n                                                                                                                       // 5548\n})(jsPDF.API);                                                                                                         // 5549\n/* Blob.js                                                                                                             // 5550\n * A Blob implementation.                                                                                              // 5551\n * 2014-07-24                                                                                                          // 5552\n *                                                                                                                     // 5553\n * By Eli Grey, http://eligrey.com                                                                                     // 5554\n * By Devin Samarin, https://github.com/dsamarin                                                                       // 5555\n * License: X11/MIT                                                                                                    // 5556\n *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md                                                     // 5557\n */                                                                                                                    // 5558\n                                                                                                                       // 5559\n/*global self, unescape */                                                                                             // 5560\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,                             // 5561\n  plusplus: true */                                                                                                    // 5562\n                                                                                                                       // 5563\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */                                              // 5564\n                                                                                                                       // 5565\n(function (view) {                                                                                                     // 5566\n\t\"use strict\";                                                                                                         // 5567\n                                                                                                                       // 5568\n\tview.URL = view.URL || view.webkitURL;                                                                                // 5569\n                                                                                                                       // 5570\n\tif (view.Blob && view.URL) {                                                                                          // 5571\n\t\ttry {                                                                                                                // 5572\n\t\t\tnew Blob;                                                                                                           // 5573\n\t\t\treturn;                                                                                                             // 5574\n\t\t} catch (e) {}                                                                                                       // 5575\n\t}                                                                                                                     // 5576\n                                                                                                                       // 5577\n\t// Internally we use a BlobBuilder implementation to base Blob off of                                                 // 5578\n\t// in order to support older browsers that only have BlobBuilder                                                      // 5579\n\tvar BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {              // 5580\n\t\tvar                                                                                                                  // 5581\n\t\t\t  get_class = function(object) {                                                                                    // 5582\n\t\t\t\treturn Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];                                      // 5583\n\t\t\t}                                                                                                                   // 5584\n\t\t\t, FakeBlobBuilder = function BlobBuilder() {                                                                        // 5585\n\t\t\t\tthis.data = [];                                                                                                    // 5586\n\t\t\t}                                                                                                                   // 5587\n\t\t\t, FakeBlob = function Blob(data, type, encoding) {                                                                  // 5588\n\t\t\t\tthis.data = data;                                                                                                  // 5589\n\t\t\t\tthis.size = data.length;                                                                                           // 5590\n\t\t\t\tthis.type = type;                                                                                                  // 5591\n\t\t\t\tthis.encoding = encoding;                                                                                          // 5592\n\t\t\t}                                                                                                                   // 5593\n\t\t\t, FBB_proto = FakeBlobBuilder.prototype                                                                             // 5594\n\t\t\t, FB_proto = FakeBlob.prototype                                                                                     // 5595\n\t\t\t, FileReaderSync = view.FileReaderSync                                                                              // 5596\n\t\t\t, FileException = function(type) {                                                                                  // 5597\n\t\t\t\tthis.code = this[this.name = type];                                                                                // 5598\n\t\t\t}                                                                                                                   // 5599\n\t\t\t, file_ex_codes = (                                                                                                 // 5600\n\t\t\t\t  \"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \"                                            // 5601\n\t\t\t\t+ \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\"                                                       // 5602\n\t\t\t).split(\" \")                                                                                                        // 5603\n\t\t\t, file_ex_code = file_ex_codes.length                                                                               // 5604\n\t\t\t, real_URL = view.URL || view.webkitURL || view                                                                     // 5605\n\t\t\t, real_create_object_URL = real_URL.createObjectURL                                                                 // 5606\n\t\t\t, real_revoke_object_URL = real_URL.revokeObjectURL                                                                 // 5607\n\t\t\t, URL = real_URL                                                                                                    // 5608\n\t\t\t, btoa = view.btoa                                                                                                  // 5609\n\t\t\t, atob = view.atob                                                                                                  // 5610\n                                                                                                                       // 5611\n\t\t\t, ArrayBuffer = view.ArrayBuffer                                                                                    // 5612\n\t\t\t, Uint8Array = view.Uint8Array                                                                                      // 5613\n                                                                                                                       // 5614\n\t\t\t, origin = /^[\\w-]+:\\/*\\[?[\\w\\.:-]+\\]?(?::[0-9]+)?/                                                                 // 5615\n\t\t;                                                                                                                    // 5616\n\t\tFakeBlob.fake = FB_proto.fake = true;                                                                                // 5617\n\t\twhile (file_ex_code--) {                                                                                             // 5618\n\t\t\tFileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;                                            // 5619\n\t\t}                                                                                                                    // 5620\n\t\t// Polyfill URL                                                                                                      // 5621\n\t\tif (!real_URL.createObjectURL) {                                                                                     // 5622\n\t\t\tURL = view.URL = function(uri) {                                                                                    // 5623\n\t\t\t\tvar                                                                                                                // 5624\n\t\t\t\t\t  uri_info = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")                                        // 5625\n\t\t\t\t\t, uri_origin                                                                                                      // 5626\n\t\t\t\t;                                                                                                                  // 5627\n\t\t\t\turi_info.href = uri;                                                                                               // 5628\n\t\t\t\tif (!(\"origin\" in uri_info)) {                                                                                     // 5629\n\t\t\t\t\tif (uri_info.protocol.toLowerCase() === \"data:\") {                                                                // 5630\n\t\t\t\t\t\turi_info.origin = null;                                                                                          // 5631\n\t\t\t\t\t} else {                                                                                                          // 5632\n\t\t\t\t\t\turi_origin = uri.match(origin);                                                                                  // 5633\n\t\t\t\t\t\turi_info.origin = uri_origin && uri_origin[1];                                                                   // 5634\n\t\t\t\t\t}                                                                                                                 // 5635\n\t\t\t\t}                                                                                                                  // 5636\n\t\t\t\treturn uri_info;                                                                                                   // 5637\n\t\t\t};                                                                                                                  // 5638\n\t\t}                                                                                                                    // 5639\n\t\tURL.createObjectURL = function(blob) {                                                                               // 5640\n\t\t\tvar                                                                                                                 // 5641\n\t\t\t\t  type = blob.type                                                                                                 // 5642\n\t\t\t\t, data_URI_header                                                                                                  // 5643\n\t\t\t;                                                                                                                   // 5644\n\t\t\tif (type === null) {                                                                                                // 5645\n\t\t\t\ttype = \"application/octet-stream\";                                                                                 // 5646\n\t\t\t}                                                                                                                   // 5647\n\t\t\tif (blob instanceof FakeBlob) {                                                                                     // 5648\n\t\t\t\tdata_URI_header = \"data:\" + type;                                                                                  // 5649\n\t\t\t\tif (blob.encoding === \"base64\") {                                                                                  // 5650\n\t\t\t\t\treturn data_URI_header + \";base64,\" + blob.data;                                                                  // 5651\n\t\t\t\t} else if (blob.encoding === \"URI\") {                                                                              // 5652\n\t\t\t\t\treturn data_URI_header + \",\" + decodeURIComponent(blob.data);                                                     // 5653\n\t\t\t\t} if (btoa) {                                                                                                      // 5654\n\t\t\t\t\treturn data_URI_header + \";base64,\" + btoa(blob.data);                                                            // 5655\n\t\t\t\t} else {                                                                                                           // 5656\n\t\t\t\t\treturn data_URI_header + \",\" + encodeURIComponent(blob.data);                                                     // 5657\n\t\t\t\t}                                                                                                                  // 5658\n\t\t\t} else if (real_create_object_URL) {                                                                                // 5659\n\t\t\t\treturn real_create_object_URL.call(real_URL, blob);                                                                // 5660\n\t\t\t}                                                                                                                   // 5661\n\t\t};                                                                                                                   // 5662\n\t\tURL.revokeObjectURL = function(object_URL) {                                                                         // 5663\n\t\t\tif (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {                                             // 5664\n\t\t\t\treal_revoke_object_URL.call(real_URL, object_URL);                                                                 // 5665\n\t\t\t}                                                                                                                   // 5666\n\t\t};                                                                                                                   // 5667\n\t\tFBB_proto.append = function(data/*, endings*/) {                                                                     // 5668\n\t\t\tvar bb = this.data;                                                                                                 // 5669\n\t\t\t// decode data to a binary string                                                                                   // 5670\n\t\t\tif (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {                                    // 5671\n\t\t\t\tvar                                                                                                                // 5672\n\t\t\t\t\t  str = \"\"                                                                                                        // 5673\n\t\t\t\t\t, buf = new Uint8Array(data)                                                                                      // 5674\n\t\t\t\t\t, i = 0                                                                                                           // 5675\n\t\t\t\t\t, buf_len = buf.length                                                                                            // 5676\n\t\t\t\t;                                                                                                                  // 5677\n\t\t\t\tfor (; i < buf_len; i++) {                                                                                         // 5678\n\t\t\t\t\tstr += String.fromCharCode(buf[i]);                                                                               // 5679\n\t\t\t\t}                                                                                                                  // 5680\n\t\t\t\tbb.push(str);                                                                                                      // 5681\n\t\t\t} else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {                                              // 5682\n\t\t\t\tif (FileReaderSync) {                                                                                              // 5683\n\t\t\t\t\tvar fr = new FileReaderSync;                                                                                      // 5684\n\t\t\t\t\tbb.push(fr.readAsBinaryString(data));                                                                             // 5685\n\t\t\t\t} else {                                                                                                           // 5686\n\t\t\t\t\t// async FileReader won't work as BlobBuilder is sync                                                             // 5687\n\t\t\t\t\tthrow new FileException(\"NOT_READABLE_ERR\");                                                                      // 5688\n\t\t\t\t}                                                                                                                  // 5689\n\t\t\t} else if (data instanceof FakeBlob) {                                                                              // 5690\n\t\t\t\tif (data.encoding === \"base64\" && atob) {                                                                          // 5691\n\t\t\t\t\tbb.push(atob(data.data));                                                                                         // 5692\n\t\t\t\t} else if (data.encoding === \"URI\") {                                                                              // 5693\n\t\t\t\t\tbb.push(decodeURIComponent(data.data));                                                                           // 5694\n\t\t\t\t} else if (data.encoding === \"raw\") {                                                                              // 5695\n\t\t\t\t\tbb.push(data.data);                                                                                               // 5696\n\t\t\t\t}                                                                                                                  // 5697\n\t\t\t} else {                                                                                                            // 5698\n\t\t\t\tif (typeof data !== \"string\") {                                                                                    // 5699\n\t\t\t\t\tdata += \"\"; // convert unsupported types to strings                                                               // 5700\n\t\t\t\t}                                                                                                                  // 5701\n\t\t\t\t// decode UTF-16 to binary string                                                                                  // 5702\n\t\t\t\tbb.push(unescape(encodeURIComponent(data)));                                                                       // 5703\n\t\t\t}                                                                                                                   // 5704\n\t\t};                                                                                                                   // 5705\n\t\tFBB_proto.getBlob = function(type) {                                                                                 // 5706\n\t\t\tif (!arguments.length) {                                                                                            // 5707\n\t\t\t\ttype = null;                                                                                                       // 5708\n\t\t\t}                                                                                                                   // 5709\n\t\t\treturn new FakeBlob(this.data.join(\"\"), type, \"raw\");                                                               // 5710\n\t\t};                                                                                                                   // 5711\n\t\tFBB_proto.toString = function() {                                                                                    // 5712\n\t\t\treturn \"[object BlobBuilder]\";                                                                                      // 5713\n\t\t};                                                                                                                   // 5714\n\t\tFB_proto.slice = function(start, end, type) {                                                                        // 5715\n\t\t\tvar args = arguments.length;                                                                                        // 5716\n\t\t\tif (args < 3) {                                                                                                     // 5717\n\t\t\t\ttype = null;                                                                                                       // 5718\n\t\t\t}                                                                                                                   // 5719\n\t\t\treturn new FakeBlob(                                                                                                // 5720\n\t\t\t\t  this.data.slice(start, args > 1 ? end : this.data.length)                                                        // 5721\n\t\t\t\t, type                                                                                                             // 5722\n\t\t\t\t, this.encoding                                                                                                    // 5723\n\t\t\t);                                                                                                                  // 5724\n\t\t};                                                                                                                   // 5725\n\t\tFB_proto.toString = function() {                                                                                     // 5726\n\t\t\treturn \"[object Blob]\";                                                                                             // 5727\n\t\t};                                                                                                                   // 5728\n\t\tFB_proto.close = function() {                                                                                        // 5729\n\t\t\tthis.size = 0;                                                                                                      // 5730\n\t\t\tdelete this.data;                                                                                                   // 5731\n\t\t};                                                                                                                   // 5732\n\t\treturn FakeBlobBuilder;                                                                                              // 5733\n\t}(view));                                                                                                             // 5734\n                                                                                                                       // 5735\n\tview.Blob = function(blobParts, options) {                                                                            // 5736\n\t\tvar type = options ? (options.type || \"\") : \"\";                                                                      // 5737\n\t\tvar builder = new BlobBuilder();                                                                                     // 5738\n\t\tif (blobParts) {                                                                                                     // 5739\n\t\t\tfor (var i = 0, len = blobParts.length; i < len; i++) {                                                             // 5740\n\t\t\t\tbuilder.append(blobParts[i]);                                                                                      // 5741\n\t\t\t}                                                                                                                   // 5742\n\t\t}                                                                                                                    // 5743\n\t\treturn builder.getBlob(type);                                                                                        // 5744\n\t};                                                                                                                    // 5745\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));            // 5746\n/* FileSaver.js                                                                                                        // 5747\n * A saveAs() FileSaver implementation.                                                                                // 5748\n * 2014-08-29                                                                                                          // 5749\n *                                                                                                                     // 5750\n * By Eli Grey, http://eligrey.com                                                                                     // 5751\n * License: X11/MIT                                                                                                    // 5752\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md                                                // 5753\n */                                                                                                                    // 5754\n                                                                                                                       // 5755\n/*global self */                                                                                                       // 5756\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */                  // 5757\n                                                                                                                       // 5758\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */                                    // 5759\n                                                                                                                       // 5760\nvar saveAs = saveAs                                                                                                    // 5761\n  // IE 10+ (native saveAs)                                                                                            // 5762\n  || (typeof navigator !== \"undefined\" &&                                                                              // 5763\n      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))                                        // 5764\n  // Everyone else                                                                                                     // 5765\n  || (function(view) {                                                                                                 // 5766\n\t\"use strict\";                                                                                                         // 5767\n\t// IE <10 is explicitly unsupported                                                                                   // 5768\n\tif (typeof navigator !== \"undefined\" &&                                                                               // 5769\n\t    /MSIE [1-9]\\./.test(navigator.userAgent)) {                                                                       // 5770\n\t\treturn;                                                                                                              // 5771\n\t}                                                                                                                     // 5772\n\tvar                                                                                                                   // 5773\n\t\t  doc = view.document                                                                                                // 5774\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet                                            // 5775\n\t\t, get_URL = function() {                                                                                             // 5776\n\t\t\treturn view.URL || view.webkitURL || view;                                                                          // 5777\n\t\t}                                                                                                                    // 5778\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")                                               // 5779\n\t\t, can_use_save_link = \"download\" in save_link                                                                        // 5780\n\t\t, click = function(node) {                                                                                           // 5781\n\t\t\tvar event = doc.createEvent(\"MouseEvents\");                                                                         // 5782\n\t\t\tevent.initMouseEvent(                                                                                               // 5783\n\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0                                                                          // 5784\n\t\t\t\t, false, false, false, false, 0, null                                                                              // 5785\n\t\t\t);                                                                                                                  // 5786\n\t\t\tnode.dispatchEvent(event);                                                                                          // 5787\n\t\t}                                                                                                                    // 5788\n\t\t, webkit_req_fs = view.webkitRequestFileSystem                                                                       // 5789\n\t\t, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem                                      // 5790\n\t\t, throw_outside = function(ex) {                                                                                     // 5791\n\t\t\t(view.setImmediate || view.setTimeout)(function() {                                                                 // 5792\n\t\t\t\tthrow ex;                                                                                                          // 5793\n\t\t\t}, 0);                                                                                                              // 5794\n\t\t}                                                                                                                    // 5795\n\t\t, force_saveable_type = \"application/octet-stream\"                                                                   // 5796\n\t\t, fs_min_size = 0                                                                                                    // 5797\n\t\t// See https://code.google.com/p/chromium/issues/detail?id=375297#c7 for                                             // 5798\n\t\t// the reasoning behind the timeout and revocation flow                                                              // 5799\n\t\t, arbitrary_revoke_timeout = 10                                                                                      // 5800\n\t\t, revoke = function(file) {                                                                                          // 5801\n\t\t\tvar revoker = function() {                                                                                          // 5802\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL                                                           // 5803\n\t\t\t\t\tget_URL().revokeObjectURL(file);                                                                                  // 5804\n\t\t\t\t} else { // file is a File                                                                                         // 5805\n\t\t\t\t\tfile.remove();                                                                                                    // 5806\n\t\t\t\t}                                                                                                                  // 5807\n\t\t\t};                                                                                                                  // 5808\n\t\t\tif (view.chrome) {                                                                                                  // 5809\n\t\t\t\trevoker();                                                                                                         // 5810\n\t\t\t} else {                                                                                                            // 5811\n\t\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);                                                                     // 5812\n\t\t\t}                                                                                                                   // 5813\n\t\t}                                                                                                                    // 5814\n\t\t, dispatch = function(filesaver, event_types, event) {                                                               // 5815\n\t\t\tevent_types = [].concat(event_types);                                                                               // 5816\n\t\t\tvar i = event_types.length;                                                                                         // 5817\n\t\t\twhile (i--) {                                                                                                       // 5818\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];                                                                   // 5819\n\t\t\t\tif (typeof listener === \"function\") {                                                                              // 5820\n\t\t\t\t\ttry {                                                                                                             // 5821\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);                                                                    // 5822\n\t\t\t\t\t} catch (ex) {                                                                                                    // 5823\n\t\t\t\t\t\tthrow_outside(ex);                                                                                               // 5824\n\t\t\t\t\t}                                                                                                                 // 5825\n\t\t\t\t}                                                                                                                  // 5826\n\t\t\t}                                                                                                                   // 5827\n\t\t}                                                                                                                    // 5828\n\t\t, FileSaver = function(blob, name) {                                                                                 // 5829\n\t\t\t// First try a.download, then web filesystem, then object URLs                                                      // 5830\n\t\t\tvar                                                                                                                 // 5831\n\t\t\t\t  filesaver = this                                                                                                 // 5832\n\t\t\t\t, type = blob.type                                                                                                 // 5833\n\t\t\t\t, blob_changed = false                                                                                             // 5834\n\t\t\t\t, object_url                                                                                                       // 5835\n\t\t\t\t, target_view                                                                                                      // 5836\n\t\t\t\t, dispatch_all = function() {                                                                                      // 5837\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));                                             // 5838\n\t\t\t\t}                                                                                                                  // 5839\n\t\t\t\t// on any filesys errors revert to saving with object URLs                                                         // 5840\n\t\t\t\t, fs_error = function() {                                                                                          // 5841\n\t\t\t\t\t// don't create more object URLs than needed                                                                      // 5842\n\t\t\t\t\tif (blob_changed || !object_url) {                                                                                // 5843\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);                                                                    // 5844\n\t\t\t\t\t}                                                                                                                 // 5845\n\t\t\t\t\tif (target_view) {                                                                                                // 5846\n\t\t\t\t\t\ttarget_view.location.href = object_url;                                                                          // 5847\n\t\t\t\t\t} else {                                                                                                          // 5848\n\t\t\t\t\t\tvar new_tab = view.open(object_url, \"_blank\");                                                                   // 5849\n\t\t\t\t\t\tif (new_tab == undefined && typeof safari !== \"undefined\") {                                                     // 5850\n\t\t\t\t\t\t\t//Apple do not allow window.open, see http://bit.ly/1kZffRI                                                     // 5851\n\t\t\t\t\t\t\tview.location.href = object_url                                                                                 // 5852\n\t\t\t\t\t\t}                                                                                                                // 5853\n\t\t\t\t\t}                                                                                                                 // 5854\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                                            // 5855\n\t\t\t\t\tdispatch_all();                                                                                                   // 5856\n\t\t\t\t\trevoke(object_url);                                                                                               // 5857\n\t\t\t\t}                                                                                                                  // 5858\n\t\t\t\t, abortable = function(func) {                                                                                     // 5859\n\t\t\t\t\treturn function() {                                                                                               // 5860\n\t\t\t\t\t\tif (filesaver.readyState !== filesaver.DONE) {                                                                   // 5861\n\t\t\t\t\t\t\treturn func.apply(this, arguments);                                                                             // 5862\n\t\t\t\t\t\t}                                                                                                                // 5863\n\t\t\t\t\t};                                                                                                                // 5864\n\t\t\t\t}                                                                                                                  // 5865\n\t\t\t\t, create_if_not_found = {create: true, exclusive: false}                                                           // 5866\n\t\t\t\t, slice                                                                                                            // 5867\n\t\t\t;                                                                                                                   // 5868\n\t\t\tfilesaver.readyState = filesaver.INIT;                                                                              // 5869\n\t\t\tif (!name) {                                                                                                        // 5870\n\t\t\t\tname = \"download\";                                                                                                 // 5871\n\t\t\t}                                                                                                                   // 5872\n\t\t\tif (can_use_save_link) {                                                                                            // 5873\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);                                                                      // 5874\n\t\t\t\tsave_link.href = object_url;                                                                                       // 5875\n\t\t\t\tsave_link.download = name;                                                                                         // 5876\n\t\t\t\tclick(save_link);                                                                                                  // 5877\n\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                                             // 5878\n\t\t\t\tdispatch_all();                                                                                                    // 5879\n\t\t\t\trevoke(object_url);                                                                                                // 5880\n\t\t\t\treturn;                                                                                                            // 5881\n\t\t\t}                                                                                                                   // 5882\n\t\t\t// Object and web filesystem URLs have a problem saving in Google Chrome when                                       // 5883\n\t\t\t// viewed in a tab, so I force save with application/octet-stream                                                   // 5884\n\t\t\t// http://code.google.com/p/chromium/issues/detail?id=91158                                                         // 5885\n\t\t\t// Update: Google errantly closed 91158, I submitted it again:                                                      // 5886\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=389642                                                       // 5887\n\t\t\tif (view.chrome && type && type !== force_saveable_type) {                                                          // 5888\n\t\t\t\tslice = blob.slice || blob.webkitSlice;                                                                            // 5889\n\t\t\t\tblob = slice.call(blob, 0, blob.size, force_saveable_type);                                                        // 5890\n\t\t\t\tblob_changed = true;                                                                                               // 5891\n\t\t\t}                                                                                                                   // 5892\n\t\t\t// Since I can't be sure that the guessed media type will trigger a download                                        // 5893\n\t\t\t// in WebKit, I append .download to the filename.                                                                   // 5894\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=65440                                                                    // 5895\n\t\t\tif (webkit_req_fs && name !== \"download\") {                                                                         // 5896\n\t\t\t\tname += \".download\";                                                                                               // 5897\n\t\t\t}                                                                                                                   // 5898\n\t\t\tif (type === force_saveable_type || webkit_req_fs) {                                                                // 5899\n\t\t\t\ttarget_view = view;                                                                                                // 5900\n\t\t\t}                                                                                                                   // 5901\n\t\t\tif (!req_fs) {                                                                                                      // 5902\n\t\t\t\tfs_error();                                                                                                        // 5903\n\t\t\t\treturn;                                                                                                            // 5904\n\t\t\t}                                                                                                                   // 5905\n\t\t\tfs_min_size += blob.size;                                                                                           // 5906\n\t\t\treq_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {                                                        // 5907\n\t\t\t\tfs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {                                       // 5908\n\t\t\t\t\tvar save = function() {                                                                                           // 5909\n\t\t\t\t\t\tdir.getFile(name, create_if_not_found, abortable(function(file) {                                                // 5910\n\t\t\t\t\t\t\tfile.createWriter(abortable(function(writer) {                                                                  // 5911\n\t\t\t\t\t\t\t\twriter.onwriteend = function(event) {                                                                          // 5912\n\t\t\t\t\t\t\t\t\ttarget_view.location.href = file.toURL();                                                                     // 5913\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                                        // 5914\n\t\t\t\t\t\t\t\t\tdispatch(filesaver, \"writeend\", event);                                                                       // 5915\n\t\t\t\t\t\t\t\t\trevoke(file);                                                                                                 // 5916\n\t\t\t\t\t\t\t\t};                                                                                                             // 5917\n\t\t\t\t\t\t\t\twriter.onerror = function() {                                                                                  // 5918\n\t\t\t\t\t\t\t\t\tvar error = writer.error;                                                                                     // 5919\n\t\t\t\t\t\t\t\t\tif (error.code !== error.ABORT_ERR) {                                                                         // 5920\n\t\t\t\t\t\t\t\t\t\tfs_error();                                                                                                  // 5921\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 5922\n\t\t\t\t\t\t\t\t};                                                                                                             // 5923\n\t\t\t\t\t\t\t\t\"writestart progress write abort\".split(\" \").forEach(function(event) {                                         // 5924\n\t\t\t\t\t\t\t\t\twriter[\"on\" + event] = filesaver[\"on\" + event];                                                               // 5925\n\t\t\t\t\t\t\t\t});                                                                                                            // 5926\n\t\t\t\t\t\t\t\twriter.write(blob);                                                                                            // 5927\n\t\t\t\t\t\t\t\tfilesaver.abort = function() {                                                                                 // 5928\n\t\t\t\t\t\t\t\t\twriter.abort();                                                                                               // 5929\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;                                                                        // 5930\n\t\t\t\t\t\t\t\t};                                                                                                             // 5931\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.WRITING;                                                                      // 5932\n\t\t\t\t\t\t\t}), fs_error);                                                                                                  // 5933\n\t\t\t\t\t\t}), fs_error);                                                                                                   // 5934\n\t\t\t\t\t};                                                                                                                // 5935\n\t\t\t\t\tdir.getFile(name, {create: false}, abortable(function(file) {                                                     // 5936\n\t\t\t\t\t\t// delete file if it already exists                                                                              // 5937\n\t\t\t\t\t\tfile.remove();                                                                                                   // 5938\n\t\t\t\t\t\tsave();                                                                                                          // 5939\n\t\t\t\t\t}), abortable(function(ex) {                                                                                      // 5940\n\t\t\t\t\t\tif (ex.code === ex.NOT_FOUND_ERR) {                                                                              // 5941\n\t\t\t\t\t\t\tsave();                                                                                                         // 5942\n\t\t\t\t\t\t} else {                                                                                                         // 5943\n\t\t\t\t\t\t\tfs_error();                                                                                                     // 5944\n\t\t\t\t\t\t}                                                                                                                // 5945\n\t\t\t\t\t}));                                                                                                              // 5946\n\t\t\t\t}), fs_error);                                                                                                     // 5947\n\t\t\t}), fs_error);                                                                                                      // 5948\n\t\t}                                                                                                                    // 5949\n\t\t, FS_proto = FileSaver.prototype                                                                                     // 5950\n\t\t, saveAs = function(blob, name) {                                                                                    // 5951\n\t\t\treturn new FileSaver(blob, name);                                                                                   // 5952\n\t\t}                                                                                                                    // 5953\n\t;                                                                                                                     // 5954\n\tFS_proto.abort = function() {                                                                                         // 5955\n\t\tvar filesaver = this;                                                                                                // 5956\n\t\tfilesaver.readyState = filesaver.DONE;                                                                               // 5957\n\t\tdispatch(filesaver, \"abort\");                                                                                        // 5958\n\t};                                                                                                                    // 5959\n\tFS_proto.readyState = FS_proto.INIT = 0;                                                                              // 5960\n\tFS_proto.WRITING = 1;                                                                                                 // 5961\n\tFS_proto.DONE = 2;                                                                                                    // 5962\n                                                                                                                       // 5963\n\tFS_proto.error =                                                                                                      // 5964\n\tFS_proto.onwritestart =                                                                                               // 5965\n\tFS_proto.onprogress =                                                                                                 // 5966\n\tFS_proto.onwrite =                                                                                                    // 5967\n\tFS_proto.onabort =                                                                                                    // 5968\n\tFS_proto.onerror =                                                                                                    // 5969\n\tFS_proto.onwriteend =                                                                                                 // 5970\n\t\tnull;                                                                                                                // 5971\n                                                                                                                       // 5972\n\treturn saveAs;                                                                                                        // 5973\n}(                                                                                                                     // 5974\n\t   typeof self !== \"undefined\" && self                                                                                // 5975\n\t|| typeof window !== \"undefined\" && window                                                                            // 5976\n\t|| this.content                                                                                                       // 5977\n));                                                                                                                    // 5978\n// `self` is undefined in Firefox for Android content script context                                                   // 5979\n// while `this` is nsIContentFrameMessageManager                                                                       // 5980\n// with an attribute `content` that corresponds to the window                                                          // 5981\n                                                                                                                       // 5982\nif (typeof module !== \"undefined\" && module !== null) {                                                                // 5983\n  module.exports = saveAs;                                                                                             // 5984\n} else if ((typeof define !== \"undefined\" && 0)) {                                                                     // 5985\n  define([], function() {                                                                                              // 5986\n    return saveAs;                                                                                                     // 5987\n  });                                                                                                                  // 5988\n}                                                                                                                      // 5989\n/*                                                                                                                     // 5990\n * Copyright (c) 2012 chick307 <chick307@gmail.com>                                                                    // 5991\n *                                                                                                                     // 5992\n * Licensed under the MIT License.                                                                                     // 5993\n * http://opensource.org/licenses/mit-license                                                                          // 5994\n */                                                                                                                    // 5995\n                                                                                                                       // 5996\nvoid function(global, callback) {                                                                                      // 5997\n\tif (typeof module === 'object') {                                                                                     // 5998\n\t\tmodule.exports = callback();                                                                                         // 5999\n\t} else if (0 === 'function') {                                                                                        // 6000\n\t\tdefine(callback);                                                                                                    // 6001\n\t} else {                                                                                                              // 6002\n\t\tglobal.adler32cs = callback();                                                                                       // 6003\n\t}                                                                                                                     // 6004\n}(jsPDF, function() {                                                                                                  // 6005\n\tvar _hasArrayBuffer = typeof ArrayBuffer === 'function' &&                                                            // 6006\n\t\ttypeof Uint8Array === 'function';                                                                                    // 6007\n                                                                                                                       // 6008\n\tvar _Buffer = null, _isBuffer = (function() {                                                                         // 6009\n\t\tif (!_hasArrayBuffer)                                                                                                // 6010\n\t\t\treturn function _isBuffer() { return false };                                                                       // 6011\n                                                                                                                       // 6012\n\t\ttry {                                                                                                                // 6013\n\t\t\tvar buffer = require('buffer');                                                                                     // 6014\n\t\t\tif (typeof buffer.Buffer === 'function')                                                                            // 6015\n\t\t\t\t_Buffer = buffer.Buffer;                                                                                           // 6016\n\t\t} catch (error) {}                                                                                                   // 6017\n                                                                                                                       // 6018\n\t\treturn function _isBuffer(value) {                                                                                   // 6019\n\t\t\treturn value instanceof ArrayBuffer ||                                                                              // 6020\n\t\t\t\t_Buffer !== null && value instanceof _Buffer;                                                                      // 6021\n\t\t};                                                                                                                   // 6022\n\t}());                                                                                                                 // 6023\n                                                                                                                       // 6024\n\tvar _utf8ToBinary = (function() {                                                                                     // 6025\n\t\tif (_Buffer !== null) {                                                                                              // 6026\n\t\t\treturn function _utf8ToBinary(utf8String) {                                                                         // 6027\n\t\t\t\treturn new _Buffer(utf8String, 'utf8').toString('binary');                                                         // 6028\n\t\t\t};                                                                                                                  // 6029\n\t\t} else {                                                                                                             // 6030\n\t\t\treturn function _utf8ToBinary(utf8String) {                                                                         // 6031\n\t\t\t\treturn unescape(encodeURIComponent(utf8String));                                                                   // 6032\n\t\t\t};                                                                                                                  // 6033\n\t\t}                                                                                                                    // 6034\n\t}());                                                                                                                 // 6035\n                                                                                                                       // 6036\n\tvar MOD = 65521;                                                                                                      // 6037\n                                                                                                                       // 6038\n\tvar _update = function _update(checksum, binaryString) {                                                              // 6039\n\t\tvar a = checksum & 0xFFFF, b = checksum >>> 16;                                                                      // 6040\n\t\tfor (var i = 0, length = binaryString.length; i < length; i++) {                                                     // 6041\n\t\t\ta = (a + (binaryString.charCodeAt(i) & 0xFF)) % MOD;                                                                // 6042\n\t\t\tb = (b + a) % MOD;                                                                                                  // 6043\n\t\t}                                                                                                                    // 6044\n\t\treturn (b << 16 | a) >>> 0;                                                                                          // 6045\n\t};                                                                                                                    // 6046\n                                                                                                                       // 6047\n\tvar _updateUint8Array = function _updateUint8Array(checksum, uint8Array) {                                            // 6048\n\t\tvar a = checksum & 0xFFFF, b = checksum >>> 16;                                                                      // 6049\n\t\tfor (var i = 0, length = uint8Array.length, x; i < length; i++) {                                                    // 6050\n\t\t\ta = (a + uint8Array[i]) % MOD;                                                                                      // 6051\n\t\t\tb = (b + a) % MOD;                                                                                                  // 6052\n\t\t}                                                                                                                    // 6053\n\t\treturn (b << 16 | a) >>> 0                                                                                           // 6054\n\t};                                                                                                                    // 6055\n                                                                                                                       // 6056\n\tvar exports = {};                                                                                                     // 6057\n                                                                                                                       // 6058\n\tvar Adler32 = exports.Adler32 = (function() {                                                                         // 6059\n\t\tvar ctor = function Adler32(checksum) {                                                                              // 6060\n\t\t\tif (!(this instanceof ctor)) {                                                                                      // 6061\n\t\t\t\tthrow new TypeError(                                                                                               // 6062\n\t\t\t\t\t'Constructor cannot called be as a function.');                                                                   // 6063\n\t\t\t}                                                                                                                   // 6064\n\t\t\tif (!isFinite(checksum = checksum == null ? 1 : +checksum)) {                                                       // 6065\n\t\t\t\tthrow new Error(                                                                                                   // 6066\n\t\t\t\t\t'First arguments needs to be a finite number.');                                                                  // 6067\n\t\t\t}                                                                                                                   // 6068\n\t\t\tthis.checksum = checksum >>> 0;                                                                                     // 6069\n\t\t};                                                                                                                   // 6070\n                                                                                                                       // 6071\n\t\tvar proto = ctor.prototype = {};                                                                                     // 6072\n\t\tproto.constructor = ctor;                                                                                            // 6073\n                                                                                                                       // 6074\n\t\tctor.from = function(from) {                                                                                         // 6075\n\t\t\tfrom.prototype = proto;                                                                                             // 6076\n\t\t\treturn from;                                                                                                        // 6077\n\t\t}(function from(binaryString) {                                                                                      // 6078\n\t\t\tif (!(this instanceof ctor)) {                                                                                      // 6079\n\t\t\t\tthrow new TypeError(                                                                                               // 6080\n\t\t\t\t\t'Constructor cannot called be as a function.');                                                                   // 6081\n\t\t\t}                                                                                                                   // 6082\n\t\t\tif (binaryString == null)                                                                                           // 6083\n\t\t\t\tthrow new Error('First argument needs to be a string.');                                                           // 6084\n\t\t\tthis.checksum = _update(1, binaryString.toString());                                                                // 6085\n\t\t});                                                                                                                  // 6086\n                                                                                                                       // 6087\n\t\tctor.fromUtf8 = function(fromUtf8) {                                                                                 // 6088\n\t\t\tfromUtf8.prototype = proto;                                                                                         // 6089\n\t\t\treturn fromUtf8;                                                                                                    // 6090\n\t\t}(function fromUtf8(utf8String) {                                                                                    // 6091\n\t\t\tif (!(this instanceof ctor)) {                                                                                      // 6092\n\t\t\t\tthrow new TypeError(                                                                                               // 6093\n\t\t\t\t\t'Constructor cannot called be as a function.');                                                                   // 6094\n\t\t\t}                                                                                                                   // 6095\n\t\t\tif (utf8String == null)                                                                                             // 6096\n\t\t\t\tthrow new Error('First argument needs to be a string.');                                                           // 6097\n\t\t\tvar binaryString = _utf8ToBinary(utf8String.toString());                                                            // 6098\n\t\t\tthis.checksum = _update(1, binaryString);                                                                           // 6099\n\t\t});                                                                                                                  // 6100\n                                                                                                                       // 6101\n\t\tif (_hasArrayBuffer) {                                                                                               // 6102\n\t\t\tctor.fromBuffer = function(fromBuffer) {                                                                            // 6103\n\t\t\t\tfromBuffer.prototype = proto;                                                                                      // 6104\n\t\t\t\treturn fromBuffer;                                                                                                 // 6105\n\t\t\t}(function fromBuffer(buffer) {                                                                                     // 6106\n\t\t\t\tif (!(this instanceof ctor)) {                                                                                     // 6107\n\t\t\t\t\tthrow new TypeError(                                                                                              // 6108\n\t\t\t\t\t\t'Constructor cannot called be as a function.');                                                                  // 6109\n\t\t\t\t}                                                                                                                  // 6110\n\t\t\t\tif (!_isBuffer(buffer))                                                                                            // 6111\n\t\t\t\t\tthrow new Error('First argument needs to be ArrayBuffer.');                                                       // 6112\n\t\t\t\tvar array = new Uint8Array(buffer);                                                                                // 6113\n\t\t\t\treturn this.checksum = _updateUint8Array(1, array);                                                                // 6114\n\t\t\t});                                                                                                                 // 6115\n\t\t}                                                                                                                    // 6116\n                                                                                                                       // 6117\n\t\tproto.update = function update(binaryString) {                                                                       // 6118\n\t\t\tif (binaryString == null)                                                                                           // 6119\n\t\t\t\tthrow new Error('First argument needs to be a string.');                                                           // 6120\n\t\t\tbinaryString = binaryString.toString();                                                                             // 6121\n\t\t\treturn this.checksum = _update(this.checksum, binaryString);                                                        // 6122\n\t\t};                                                                                                                   // 6123\n                                                                                                                       // 6124\n\t\tproto.updateUtf8 = function updateUtf8(utf8String) {                                                                 // 6125\n\t\t\tif (utf8String == null)                                                                                             // 6126\n\t\t\t\tthrow new Error('First argument needs to be a string.');                                                           // 6127\n\t\t\tvar binaryString = _utf8ToBinary(utf8String.toString());                                                            // 6128\n\t\t\treturn this.checksum = _update(this.checksum, binaryString);                                                        // 6129\n\t\t};                                                                                                                   // 6130\n                                                                                                                       // 6131\n\t\tif (_hasArrayBuffer) {                                                                                               // 6132\n\t\t\tproto.updateBuffer = function updateBuffer(buffer) {                                                                // 6133\n\t\t\t\tif (!_isBuffer(buffer))                                                                                            // 6134\n\t\t\t\t\tthrow new Error('First argument needs to be ArrayBuffer.');                                                       // 6135\n\t\t\t\tvar array = new Uint8Array(buffer);                                                                                // 6136\n\t\t\t\treturn this.checksum = _updateUint8Array(this.checksum, array);                                                    // 6137\n\t\t\t};                                                                                                                  // 6138\n\t\t}                                                                                                                    // 6139\n                                                                                                                       // 6140\n\t\tproto.clone = function clone() {                                                                                     // 6141\n\t\t\treturn new Adler32(this.checksum);                                                                                  // 6142\n\t\t};                                                                                                                   // 6143\n                                                                                                                       // 6144\n\t\treturn ctor;                                                                                                         // 6145\n\t}());                                                                                                                 // 6146\n                                                                                                                       // 6147\n\texports.from = function from(binaryString) {                                                                          // 6148\n\t\tif (binaryString == null)                                                                                            // 6149\n\t\t\tthrow new Error('First argument needs to be a string.');                                                            // 6150\n\t\treturn _update(1, binaryString.toString());                                                                          // 6151\n\t};                                                                                                                    // 6152\n                                                                                                                       // 6153\n\texports.fromUtf8 = function fromUtf8(utf8String) {                                                                    // 6154\n\t\tif (utf8String == null)                                                                                              // 6155\n\t\t\tthrow new Error('First argument needs to be a string.');                                                            // 6156\n\t\tvar binaryString = _utf8ToBinary(utf8String.toString());                                                             // 6157\n\t\treturn _update(1, binaryString);                                                                                     // 6158\n\t};                                                                                                                    // 6159\n                                                                                                                       // 6160\n\tif (_hasArrayBuffer) {                                                                                                // 6161\n\t\texports.fromBuffer = function fromBuffer(buffer) {                                                                   // 6162\n\t\t\tif (!_isBuffer(buffer))                                                                                             // 6163\n\t\t\t\tthrow new Error('First argument need to be ArrayBuffer.');                                                         // 6164\n\t\t\tvar array = new Uint8Array(buffer);                                                                                 // 6165\n\t\t\treturn _updateUint8Array(1, array);                                                                                 // 6166\n\t\t};                                                                                                                   // 6167\n\t}                                                                                                                     // 6168\n                                                                                                                       // 6169\n\treturn exports;                                                                                                       // 6170\n});                                                                                                                    // 6171\n/*                                                                                                                     // 6172\n Deflate.js - https://github.com/gildas-lormeau/zip.js                                                                 // 6173\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.                                                               // 6174\n                                                                                                                       // 6175\n Redistribution and use in source and binary forms, with or without                                                    // 6176\n modification, are permitted provided that the following conditions are met:                                           // 6177\n                                                                                                                       // 6178\n 1. Redistributions of source code must retain the above copyright notice,                                             // 6179\n this list of conditions and the following disclaimer.                                                                 // 6180\n                                                                                                                       // 6181\n 2. Redistributions in binary form must reproduce the above copyright                                                  // 6182\n notice, this list of conditions and the following disclaimer in                                                       // 6183\n the documentation and/or other materials provided with the distribution.                                              // 6184\n                                                                                                                       // 6185\n 3. The names of the authors may not be used to endorse or promote products                                            // 6186\n derived from this software without specific prior written permission.                                                 // 6187\n                                                                                                                       // 6188\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,                                          // 6189\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND                                          // 6190\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,                                            // 6191\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,                                         // 6192\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                                          // 6193\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,                                           // 6194\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF                                             // 6195\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING                                                  // 6196\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,                                          // 6197\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                                    // 6198\n */                                                                                                                    // 6199\n                                                                                                                       // 6200\n/*                                                                                                                     // 6201\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.                                                              // 6202\n * JZlib is based on zlib-1.1.3, so all credit should go authors                                                       // 6203\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)                                          // 6204\n * and contributors of zlib.                                                                                           // 6205\n */                                                                                                                    // 6206\n                                                                                                                       // 6207\nvar Deflater = (function(obj) {                                                                                        // 6208\n                                                                                                                       // 6209\n\t// Global                                                                                                             // 6210\n                                                                                                                       // 6211\n\tvar MAX_BITS = 15;                                                                                                    // 6212\n\tvar D_CODES = 30;                                                                                                     // 6213\n\tvar BL_CODES = 19;                                                                                                    // 6214\n                                                                                                                       // 6215\n\tvar LENGTH_CODES = 29;                                                                                                // 6216\n\tvar LITERALS = 256;                                                                                                   // 6217\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);                                                                          // 6218\n\tvar HEAP_SIZE = (2 * L_CODES + 1);                                                                                    // 6219\n                                                                                                                       // 6220\n\tvar END_BLOCK = 256;                                                                                                  // 6221\n                                                                                                                       // 6222\n\t// Bit length codes must not exceed MAX_BL_BITS bits                                                                  // 6223\n\tvar MAX_BL_BITS = 7;                                                                                                  // 6224\n                                                                                                                       // 6225\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)                                                      // 6226\n\tvar REP_3_6 = 16;                                                                                                     // 6227\n                                                                                                                       // 6228\n\t// repeat a zero length 3-10 times (3 bits of repeat count)                                                           // 6229\n\tvar REPZ_3_10 = 17;                                                                                                   // 6230\n                                                                                                                       // 6231\n\t// repeat a zero length 11-138 times (7 bits of repeat count)                                                         // 6232\n\tvar REPZ_11_138 = 18;                                                                                                 // 6233\n                                                                                                                       // 6234\n\t// The lengths of the bit length codes are sent in order of decreasing                                                // 6235\n\t// probability, to avoid transmitting the lengths for unused bit                                                      // 6236\n\t// length codes.                                                                                                      // 6237\n                                                                                                                       // 6238\n\tvar Buf_size = 8 * 2;                                                                                                 // 6239\n                                                                                                                       // 6240\n\t// JZlib version : \"1.0.2\"                                                                                            // 6241\n\tvar Z_DEFAULT_COMPRESSION = -1;                                                                                       // 6242\n                                                                                                                       // 6243\n\t// compression strategy                                                                                               // 6244\n\tvar Z_FILTERED = 1;                                                                                                   // 6245\n\tvar Z_HUFFMAN_ONLY = 2;                                                                                               // 6246\n\tvar Z_DEFAULT_STRATEGY = 0;                                                                                           // 6247\n                                                                                                                       // 6248\n\tvar Z_NO_FLUSH = 0;                                                                                                   // 6249\n\tvar Z_PARTIAL_FLUSH = 1;                                                                                              // 6250\n\tvar Z_FULL_FLUSH = 3;                                                                                                 // 6251\n\tvar Z_FINISH = 4;                                                                                                     // 6252\n                                                                                                                       // 6253\n\tvar Z_OK = 0;                                                                                                         // 6254\n\tvar Z_STREAM_END = 1;                                                                                                 // 6255\n\tvar Z_NEED_DICT = 2;                                                                                                  // 6256\n\tvar Z_STREAM_ERROR = -2;                                                                                              // 6257\n\tvar Z_DATA_ERROR = -3;                                                                                                // 6258\n\tvar Z_BUF_ERROR = -5;                                                                                                 // 6259\n                                                                                                                       // 6260\n\t// Tree                                                                                                               // 6261\n                                                                                                                       // 6262\n\t// see definition of array dist_code below                                                                            // 6263\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];           // 6277\n                                                                                                                       // 6278\n\tfunction Tree() {                                                                                                     // 6279\n\t\tvar that = this;                                                                                                     // 6280\n                                                                                                                       // 6281\n\t\t// dyn_tree; // the dynamic tree                                                                                     // 6282\n\t\t// max_code; // largest code with non zero frequency                                                                 // 6283\n\t\t// stat_desc; // the corresponding static tree                                                                       // 6284\n                                                                                                                       // 6285\n\t\t// Compute the optimal bit lengths for a tree and update the total bit                                               // 6286\n\t\t// length                                                                                                            // 6287\n\t\t// for the current block.                                                                                            // 6288\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and                                                 // 6289\n\t\t// above are the tree nodes sorted by increasing frequency.                                                          // 6290\n\t\t// OUT assertions: the field len is set to the optimal bit length, the                                               // 6291\n\t\t// array bl_count contains the frequencies for each bit length.                                                      // 6292\n\t\t// The length opt_len is updated; static_len is also updated if stree is                                             // 6293\n\t\t// not null.                                                                                                         // 6294\n\t\tfunction gen_bitlen(s) {                                                                                             // 6295\n\t\t\tvar tree = that.dyn_tree;                                                                                           // 6296\n\t\t\tvar stree = that.stat_desc.static_tree;                                                                             // 6297\n\t\t\tvar extra = that.stat_desc.extra_bits;                                                                              // 6298\n\t\t\tvar base = that.stat_desc.extra_base;                                                                               // 6299\n\t\t\tvar max_length = that.stat_desc.max_length;                                                                         // 6300\n\t\t\tvar h; // heap index                                                                                                // 6301\n\t\t\tvar n, m; // iterate over the tree elements                                                                         // 6302\n\t\t\tvar bits; // bit length                                                                                             // 6303\n\t\t\tvar xbits; // extra bits                                                                                            // 6304\n\t\t\tvar f; // frequency                                                                                                 // 6305\n\t\t\tvar overflow = 0; // number of elements with bit length too large                                                   // 6306\n                                                                                                                       // 6307\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)                                                                            // 6308\n\t\t\t\ts.bl_count[bits] = 0;                                                                                              // 6309\n                                                                                                                       // 6310\n\t\t\t// In a first pass, compute the optimal bit lengths (which may                                                      // 6311\n\t\t\t// overflow in the case of the bit length tree).                                                                    // 6312\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap                                                           // 6313\n                                                                                                                       // 6314\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {                                                                      // 6315\n\t\t\t\tn = s.heap[h];                                                                                                     // 6316\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;                                                                          // 6317\n\t\t\t\tif (bits > max_length) {                                                                                           // 6318\n\t\t\t\t\tbits = max_length;                                                                                                // 6319\n\t\t\t\t\toverflow++;                                                                                                       // 6320\n\t\t\t\t}                                                                                                                  // 6321\n\t\t\t\ttree[n * 2 + 1] = bits;                                                                                            // 6322\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed                                                              // 6323\n                                                                                                                       // 6324\n\t\t\t\tif (n > that.max_code)                                                                                             // 6325\n\t\t\t\t\tcontinue; // not a leaf node                                                                                      // 6326\n                                                                                                                       // 6327\n\t\t\t\ts.bl_count[bits]++;                                                                                                // 6328\n\t\t\t\txbits = 0;                                                                                                         // 6329\n\t\t\t\tif (n >= base)                                                                                                     // 6330\n\t\t\t\t\txbits = extra[n - base];                                                                                          // 6331\n\t\t\t\tf = tree[n * 2];                                                                                                   // 6332\n\t\t\t\ts.opt_len += f * (bits + xbits);                                                                                   // 6333\n\t\t\t\tif (stree)                                                                                                         // 6334\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);                                                                   // 6335\n\t\t\t}                                                                                                                   // 6336\n\t\t\tif (overflow === 0)                                                                                                 // 6337\n\t\t\t\treturn;                                                                                                            // 6338\n                                                                                                                       // 6339\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus                                                   // 6340\n\t\t\t// Find the first bit length which could increase:                                                                  // 6341\n\t\t\tdo {                                                                                                                // 6342\n\t\t\t\tbits = max_length - 1;                                                                                             // 6343\n\t\t\t\twhile (s.bl_count[bits] === 0)                                                                                     // 6344\n\t\t\t\t\tbits--;                                                                                                           // 6345\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree                                                                 // 6346\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother                                                // 6347\n\t\t\t\ts.bl_count[max_length]--;                                                                                          // 6348\n\t\t\t\t// The brother of the overflow item also moves one step up,                                                        // 6349\n\t\t\t\t// but this does not affect bl_count[max_length]                                                                   // 6350\n\t\t\t\toverflow -= 2;                                                                                                     // 6351\n\t\t\t} while (overflow > 0);                                                                                             // 6352\n                                                                                                                       // 6353\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {                                                                       // 6354\n\t\t\t\tn = s.bl_count[bits];                                                                                              // 6355\n\t\t\t\twhile (n !== 0) {                                                                                                  // 6356\n\t\t\t\t\tm = s.heap[--h];                                                                                                  // 6357\n\t\t\t\t\tif (m > that.max_code)                                                                                            // 6358\n\t\t\t\t\t\tcontinue;                                                                                                        // 6359\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {                                                                                    // 6360\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];                                                             // 6361\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;                                                                                          // 6362\n\t\t\t\t\t}                                                                                                                 // 6363\n\t\t\t\t\tn--;                                                                                                              // 6364\n\t\t\t\t}                                                                                                                  // 6365\n\t\t\t}                                                                                                                   // 6366\n\t\t}                                                                                                                    // 6367\n                                                                                                                       // 6368\n\t\t// Reverse the first len bits of a code, using straightforward code (a                                               // 6369\n\t\t// faster                                                                                                            // 6370\n\t\t// method would use a table)                                                                                         // 6371\n\t\t// IN assertion: 1 <= len <= 15                                                                                      // 6372\n\t\tfunction bi_reverse(code, // the value to invert                                                                     // 6373\n\t\tlen // its bit length                                                                                                // 6374\n\t\t) {                                                                                                                  // 6375\n\t\t\tvar res = 0;                                                                                                        // 6376\n\t\t\tdo {                                                                                                                // 6377\n\t\t\t\tres |= code & 1;                                                                                                   // 6378\n\t\t\t\tcode >>>= 1;                                                                                                       // 6379\n\t\t\t\tres <<= 1;                                                                                                         // 6380\n\t\t\t} while (--len > 0);                                                                                                // 6381\n\t\t\treturn res >>> 1;                                                                                                   // 6382\n\t\t}                                                                                                                    // 6383\n                                                                                                                       // 6384\n\t\t// Generate the codes for a given tree and bit counts (which need not be                                             // 6385\n\t\t// optimal).                                                                                                         // 6386\n\t\t// IN assertion: the array bl_count contains the bit length statistics for                                           // 6387\n\t\t// the given tree and the field len is set for all tree elements.                                                    // 6388\n\t\t// OUT assertion: the field code is set for all tree elements of non                                                 // 6389\n\t\t// zero code length.                                                                                                 // 6390\n\t\tfunction gen_codes(tree, // the tree to decorate                                                                     // 6391\n\t\tmax_code, // largest code with non zero frequency                                                                    // 6392\n\t\tbl_count // number of codes at each bit length                                                                       // 6393\n\t\t) {                                                                                                                  // 6394\n\t\t\tvar next_code = []; // next code value for each                                                                     // 6395\n\t\t\t// bit length                                                                                                       // 6396\n\t\t\tvar code = 0; // running code value                                                                                 // 6397\n\t\t\tvar bits; // bit index                                                                                              // 6398\n\t\t\tvar n; // code index                                                                                                // 6399\n\t\t\tvar len;                                                                                                            // 6400\n                                                                                                                       // 6401\n\t\t\t// The distribution counts are first used to generate the code values                                               // 6402\n\t\t\t// without bit reversal.                                                                                            // 6403\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {                                                                          // 6404\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);                                                       // 6405\n\t\t\t}                                                                                                                   // 6406\n                                                                                                                       // 6407\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code                                              // 6408\n\t\t\t// must be all ones.                                                                                                // 6409\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,                                                          // 6410\n\t\t\t// \"inconsistent bit counts\");                                                                                      // 6411\n\t\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));                                                          // 6412\n                                                                                                                       // 6413\n\t\t\tfor (n = 0; n <= max_code; n++) {                                                                                   // 6414\n\t\t\t\tlen = tree[n * 2 + 1];                                                                                             // 6415\n\t\t\t\tif (len === 0)                                                                                                     // 6416\n\t\t\t\t\tcontinue;                                                                                                         // 6417\n\t\t\t\t// Now reverse the bits                                                                                            // 6418\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);                                                                   // 6419\n\t\t\t}                                                                                                                   // 6420\n\t\t}                                                                                                                    // 6421\n                                                                                                                       // 6422\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.                                          // 6423\n\t\t// Update the total bit length for the current block.                                                                // 6424\n\t\t// IN assertion: the field freq is set for all tree elements.                                                        // 6425\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length                                         // 6426\n\t\t// and corresponding code. The length opt_len is updated; static_len is                                              // 6427\n\t\t// also updated if stree is not null. The field max_code is set.                                                     // 6428\n\t\tthat.build_tree = function(s) {                                                                                      // 6429\n\t\t\tvar tree = that.dyn_tree;                                                                                           // 6430\n\t\t\tvar stree = that.stat_desc.static_tree;                                                                             // 6431\n\t\t\tvar elems = that.stat_desc.elems;                                                                                   // 6432\n\t\t\tvar n, m; // iterate over heap elements                                                                             // 6433\n\t\t\tvar max_code = -1; // largest code with non zero frequency                                                          // 6434\n\t\t\tvar node; // new node being created                                                                                 // 6435\n                                                                                                                       // 6436\n\t\t\t// Construct the initial heap, with least frequent element in                                                       // 6437\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].                                                      // 6438\n\t\t\t// heap[0] is not used.                                                                                             // 6439\n\t\t\ts.heap_len = 0;                                                                                                     // 6440\n\t\t\ts.heap_max = HEAP_SIZE;                                                                                             // 6441\n                                                                                                                       // 6442\n\t\t\tfor (n = 0; n < elems; n++) {                                                                                       // 6443\n\t\t\t\tif (tree[n * 2] !== 0) {                                                                                           // 6444\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;                                                                              // 6445\n\t\t\t\t\ts.depth[n] = 0;                                                                                                   // 6446\n\t\t\t\t} else {                                                                                                           // 6447\n\t\t\t\t\ttree[n * 2 + 1] = 0;                                                                                              // 6448\n\t\t\t\t}                                                                                                                  // 6449\n\t\t\t}                                                                                                                   // 6450\n                                                                                                                       // 6451\n\t\t\t// The pkzip format requires that at least one distance code exists,                                                // 6452\n\t\t\t// and that at least one bit should be sent even if there is only one                                               // 6453\n\t\t\t// possible code. So to avoid special checks later on we force at least                                             // 6454\n\t\t\t// two codes of non zero frequency.                                                                                 // 6455\n\t\t\twhile (s.heap_len < 2) {                                                                                            // 6456\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;                                                       // 6457\n\t\t\t\ttree[node * 2] = 1;                                                                                                // 6458\n\t\t\t\ts.depth[node] = 0;                                                                                                 // 6459\n\t\t\t\ts.opt_len--;                                                                                                       // 6460\n\t\t\t\tif (stree)                                                                                                         // 6461\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];                                                                              // 6462\n\t\t\t\t// node is 0 or 1 so it does not have extra bits                                                                   // 6463\n\t\t\t}                                                                                                                   // 6464\n\t\t\tthat.max_code = max_code;                                                                                           // 6465\n                                                                                                                       // 6466\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,                                              // 6467\n\t\t\t// establish sub-heaps of increasing lengths:                                                                       // 6468\n                                                                                                                       // 6469\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)                                                                   // 6470\n\t\t\t\ts.pqdownheap(tree, n);                                                                                             // 6471\n                                                                                                                       // 6472\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two                                                 // 6473\n\t\t\t// frequent nodes.                                                                                                  // 6474\n                                                                                                                       // 6475\n\t\t\tnode = elems; // next internal node of the tree                                                                     // 6476\n\t\t\tdo {                                                                                                                // 6477\n\t\t\t\t// n = node of least frequency                                                                                     // 6478\n\t\t\t\tn = s.heap[1];                                                                                                     // 6479\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];                                                                                  // 6480\n\t\t\t\ts.pqdownheap(tree, 1);                                                                                             // 6481\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency                                                                 // 6482\n                                                                                                                       // 6483\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency                                                    // 6484\n\t\t\t\ts.heap[--s.heap_max] = m;                                                                                          // 6485\n                                                                                                                       // 6486\n\t\t\t\t// Create a new node father of n and m                                                                             // 6487\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);                                                                      // 6488\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;                                                              // 6489\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;                                                                          // 6490\n                                                                                                                       // 6491\n\t\t\t\t// and insert the new node in the heap                                                                             // 6492\n\t\t\t\ts.heap[1] = node++;                                                                                                // 6493\n\t\t\t\ts.pqdownheap(tree, 1);                                                                                             // 6494\n\t\t\t} while (s.heap_len >= 2);                                                                                          // 6495\n                                                                                                                       // 6496\n\t\t\ts.heap[--s.heap_max] = s.heap[1];                                                                                   // 6497\n                                                                                                                       // 6498\n\t\t\t// At this point, the fields freq and dad are set. We can now                                                       // 6499\n\t\t\t// generate the bit lengths.                                                                                        // 6500\n                                                                                                                       // 6501\n\t\t\tgen_bitlen(s);                                                                                                      // 6502\n                                                                                                                       // 6503\n\t\t\t// The field len is now set, we can generate the bit codes                                                          // 6504\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);                                                                         // 6505\n\t\t};                                                                                                                   // 6506\n                                                                                                                       // 6507\n\t}                                                                                                                     // 6508\n                                                                                                                       // 6509\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\n                                                                                                                       // 6517\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\n                                                                                                                       // 6519\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\n\t\t\t24576 ];                                                                                                            // 6521\n                                                                                                                       // 6522\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and                                           // 6523\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never                                          // 6524\n\t// used.                                                                                                              // 6525\n\tTree.d_code = function(dist) {                                                                                        // 6526\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);                                         // 6527\n\t};                                                                                                                    // 6528\n                                                                                                                       // 6529\n\t// extra bits for each length code                                                                                    // 6530\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];         // 6531\n                                                                                                                       // 6532\n\t// extra bits for each distance code                                                                                  // 6533\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n                                                                                                                       // 6535\n\t// extra bits for each bit length code                                                                                // 6536\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];                                      // 6537\n                                                                                                                       // 6538\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];                                 // 6539\n                                                                                                                       // 6540\n\t// StaticTree                                                                                                         // 6541\n                                                                                                                       // 6542\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {                                         // 6543\n\t\tvar that = this;                                                                                                     // 6544\n\t\tthat.static_tree = static_tree;                                                                                      // 6545\n\t\tthat.extra_bits = extra_bits;                                                                                        // 6546\n\t\tthat.extra_base = extra_base;                                                                                        // 6547\n\t\tthat.elems = elems;                                                                                                  // 6548\n\t\tthat.max_length = max_length;                                                                                        // 6549\n\t}                                                                                                                     // 6550\n                                                                                                                       // 6551\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\n\t\t\t99, 8, 227, 8 ];                                                                                                    // 6567\n                                                                                                                       // 6568\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];                                         // 6570\n                                                                                                                       // 6571\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n                                                                                                                       // 6573\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);           // 6574\n                                                                                                                       // 6575\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);                        // 6576\n                                                                                                                       // 6577\n\t// Deflate                                                                                                            // 6578\n                                                                                                                       // 6579\n\tvar MAX_MEM_LEVEL = 9;                                                                                                // 6580\n\tvar DEF_MEM_LEVEL = 8;                                                                                                // 6581\n                                                                                                                       // 6582\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {                                                // 6583\n\t\tvar that = this;                                                                                                     // 6584\n\t\tthat.good_length = good_length;                                                                                      // 6585\n\t\tthat.max_lazy = max_lazy;                                                                                            // 6586\n\t\tthat.nice_length = nice_length;                                                                                      // 6587\n\t\tthat.max_chain = max_chain;                                                                                          // 6588\n\t\tthat.func = func;                                                                                                    // 6589\n\t}                                                                                                                     // 6590\n                                                                                                                       // 6591\n\tvar STORED = 0;                                                                                                       // 6592\n\tvar FAST = 1;                                                                                                         // 6593\n\tvar SLOW = 2;                                                                                                         // 6594\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];                                       // 6597\n                                                                                                                       // 6598\n\tvar z_errmsg = [ \"need dictionary\", // Z_NEED_DICT                                                                    // 6599\n\t// 2                                                                                                                  // 6600\n\t\"stream end\", // Z_STREAM_END 1                                                                                       // 6601\n\t\"\", // Z_OK 0                                                                                                         // 6602\n\t\"\", // Z_ERRNO (-1)                                                                                                   // 6603\n\t\"stream error\", // Z_STREAM_ERROR (-2)                                                                                // 6604\n\t\"data error\", // Z_DATA_ERROR (-3)                                                                                    // 6605\n\t\"\", // Z_MEM_ERROR (-4)                                                                                               // 6606\n\t\"buffer error\", // Z_BUF_ERROR (-5)                                                                                   // 6607\n\t\"\",// Z_VERSION_ERROR (-6)                                                                                            // 6608\n\t\"\" ];                                                                                                                 // 6609\n                                                                                                                       // 6610\n\t// block not completed, need more input or more output                                                                // 6611\n\tvar NeedMore = 0;                                                                                                     // 6612\n                                                                                                                       // 6613\n\t// block flush performed                                                                                              // 6614\n\tvar BlockDone = 1;                                                                                                    // 6615\n                                                                                                                       // 6616\n\t// finish started, need only more output at next deflate                                                              // 6617\n\tvar FinishStarted = 2;                                                                                                // 6618\n                                                                                                                       // 6619\n\t// finish done, accept no more input or output                                                                        // 6620\n\tvar FinishDone = 3;                                                                                                   // 6621\n                                                                                                                       // 6622\n\t// preset dictionary flag in zlib header                                                                              // 6623\n\tvar PRESET_DICT = 0x20;                                                                                               // 6624\n                                                                                                                       // 6625\n\tvar INIT_STATE = 42;                                                                                                  // 6626\n\tvar BUSY_STATE = 113;                                                                                                 // 6627\n\tvar FINISH_STATE = 666;                                                                                               // 6628\n                                                                                                                       // 6629\n\t// The deflate compression method                                                                                     // 6630\n\tvar Z_DEFLATED = 8;                                                                                                   // 6631\n                                                                                                                       // 6632\n\tvar STORED_BLOCK = 0;                                                                                                 // 6633\n\tvar STATIC_TREES = 1;                                                                                                 // 6634\n\tvar DYN_TREES = 2;                                                                                                    // 6635\n                                                                                                                       // 6636\n\tvar MIN_MATCH = 3;                                                                                                    // 6637\n\tvar MAX_MATCH = 258;                                                                                                  // 6638\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);                                                                      // 6639\n                                                                                                                       // 6640\n\tfunction smaller(tree, n, m, depth) {                                                                                 // 6641\n\t\tvar tn2 = tree[n * 2];                                                                                               // 6642\n\t\tvar tm2 = tree[m * 2];                                                                                               // 6643\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));                                                          // 6644\n\t}                                                                                                                     // 6645\n                                                                                                                       // 6646\n\tfunction Deflate() {                                                                                                  // 6647\n                                                                                                                       // 6648\n\t\tvar that = this;                                                                                                     // 6649\n\t\tvar strm; // pointer back to this zlib stream                                                                        // 6650\n\t\tvar status; // as the name implies                                                                                   // 6651\n\t\t// pending_buf; // output still pending                                                                              // 6652\n\t\tvar pending_buf_size; // size of pending_buf                                                                         // 6653\n\t\t// pending_out; // next pending byte to output to the stream                                                         // 6654\n\t\t// pending; // nb of bytes in the pending buffer                                                                     // 6655\n\t\tvar method; // STORED (for zip only) or DEFLATED                                                                     // 6656\n\t\tvar last_flush; // value of flush param for previous deflate call                                                    // 6657\n                                                                                                                       // 6658\n\t\tvar w_size; // LZ77 window size (32K by default)                                                                     // 6659\n\t\tvar w_bits; // log2(w_size) (8..16)                                                                                  // 6660\n\t\tvar w_mask; // w_size - 1                                                                                            // 6661\n                                                                                                                       // 6662\n\t\tvar window;                                                                                                          // 6663\n\t\t// Sliding window. Input bytes are read into the second half of the window,                                          // 6664\n\t\t// and move to the first half later to keep a dictionary of at least wSize                                           // 6665\n\t\t// bytes. With this organization, matches are limited to a distance of                                               // 6666\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always                                                         // 6667\n\t\t// performed with a length multiple of the block size. Also, it limits                                               // 6668\n\t\t// the window size to 64K, which is quite useful on MSDOS.                                                           // 6669\n\t\t// To do: use the user input buffer as sliding window.                                                               // 6670\n                                                                                                                       // 6671\n\t\tvar window_size;                                                                                                     // 6672\n\t\t// Actual size of window: 2*wSize, except when the user input buffer                                                 // 6673\n\t\t// is directly used as sliding window.                                                                               // 6674\n                                                                                                                       // 6675\n\t\tvar prev;                                                                                                            // 6676\n\t\t// Link to older string with same hash index. To limit the size of this                                              // 6677\n\t\t// array to 64K, this link is maintained only for the last 32K strings.                                              // 6678\n\t\t// An index in this array is thus a window index modulo 32K.                                                         // 6679\n                                                                                                                       // 6680\n\t\tvar head; // Heads of the hash chains or NIL.                                                                        // 6681\n                                                                                                                       // 6682\n\t\tvar ins_h; // hash index of string to be inserted                                                                    // 6683\n\t\tvar hash_size; // number of elements in hash table                                                                   // 6684\n\t\tvar hash_bits; // log2(hash_size)                                                                                    // 6685\n\t\tvar hash_mask; // hash_size-1                                                                                        // 6686\n                                                                                                                       // 6687\n\t\t// Number of bits by which ins_h must be shifted at each input                                                       // 6688\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest                                                      // 6689\n\t\t// byte no longer takes part in the hash key, that is:                                                               // 6690\n\t\t// hash_shift * MIN_MATCH >= hash_bits                                                                               // 6691\n\t\tvar hash_shift;                                                                                                      // 6692\n                                                                                                                       // 6693\n\t\t// Window position at the beginning of the current output block. Gets                                                // 6694\n\t\t// negative when the window is moved backwards.                                                                      // 6695\n                                                                                                                       // 6696\n\t\tvar block_start;                                                                                                     // 6697\n                                                                                                                       // 6698\n\t\tvar match_length; // length of best match                                                                            // 6699\n\t\tvar prev_match; // previous match                                                                                    // 6700\n\t\tvar match_available; // set if previous match exists                                                                 // 6701\n\t\tvar strstart; // start of string to insert                                                                           // 6702\n\t\tvar match_start; // start of matching string                                                                         // 6703\n\t\tvar lookahead; // number of valid bytes ahead in window                                                              // 6704\n                                                                                                                       // 6705\n\t\t// Length of the best match at previous step. Matches not greater than this                                          // 6706\n\t\t// are discarded. This is used in the lazy match evaluation.                                                         // 6707\n\t\tvar prev_length;                                                                                                     // 6708\n                                                                                                                       // 6709\n\t\t// To speed up deflation, hash chains are never searched beyond this                                                 // 6710\n\t\t// length. A higher limit improves compression ratio but degrades the speed.                                         // 6711\n\t\tvar max_chain_length;                                                                                                // 6712\n                                                                                                                       // 6713\n\t\t// Attempt to find a better match only when the current match is strictly                                            // 6714\n\t\t// smaller than this value. This mechanism is used only for compression                                              // 6715\n\t\t// levels >= 4.                                                                                                      // 6716\n\t\tvar max_lazy_match;                                                                                                  // 6717\n                                                                                                                       // 6718\n\t\t// Insert new strings in the hash table only if the match length is not                                              // 6719\n\t\t// greater than this length. This saves time but degrades compression.                                               // 6720\n\t\t// max_insert_length is used only for compression levels <= 3.                                                       // 6721\n                                                                                                                       // 6722\n\t\tvar level; // compression level (1..9)                                                                               // 6723\n\t\tvar strategy; // favor or force Huffman coding                                                                       // 6724\n                                                                                                                       // 6725\n\t\t// Use a faster search when the previous match is longer than this                                                   // 6726\n\t\tvar good_match;                                                                                                      // 6727\n                                                                                                                       // 6728\n\t\t// Stop searching when current match exceeds this                                                                    // 6729\n\t\tvar nice_match;                                                                                                      // 6730\n                                                                                                                       // 6731\n\t\tvar dyn_ltree; // literal and length tree                                                                            // 6732\n\t\tvar dyn_dtree; // distance tree                                                                                      // 6733\n\t\tvar bl_tree; // Huffman tree for bit lengths                                                                         // 6734\n                                                                                                                       // 6735\n\t\tvar l_desc = new Tree(); // desc for literal tree                                                                    // 6736\n\t\tvar d_desc = new Tree(); // desc for distance tree                                                                   // 6737\n\t\tvar bl_desc = new Tree(); // desc for bit length tree                                                                // 6738\n                                                                                                                       // 6739\n\t\t// that.heap_len; // number of elements in the heap                                                                  // 6740\n\t\t// that.heap_max; // element of largest frequency                                                                    // 6741\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.                                           // 6742\n\t\t// The same heap array is used to build all trees.                                                                   // 6743\n                                                                                                                       // 6744\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency                                            // 6745\n\t\tthat.depth = [];                                                                                                     // 6746\n                                                                                                                       // 6747\n\t\tvar l_buf; // index for literals or lengths */                                                                       // 6748\n                                                                                                                       // 6749\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for                                                // 6750\n\t\t// limiting lit_bufsize to 64K:                                                                                      // 6751\n\t\t// - frequencies can be kept in 16 bit counters                                                                      // 6752\n\t\t// - if compression is not successful for the first block, all input                                                 // 6753\n\t\t// data is still in the window so we can still emit a stored block even                                              // 6754\n\t\t// when input comes from standard input. (This can also be done for                                                  // 6755\n\t\t// all blocks if lit_bufsize is not greater than 32K.)                                                               // 6756\n\t\t// - if compression is not successful for a file smaller than 64K, we can                                            // 6757\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).                                               // 6758\n\t\t// This is applicable only for zip (not gzip or zlib).                                                               // 6759\n\t\t// - creating new Huffman trees less frequently may not provide fast                                                 // 6760\n\t\t// adaptation to changes in the input data statistics. (Take for                                                     // 6761\n\t\t// example a binary file with poorly compressible code followed by                                                   // 6762\n\t\t// a highly compressible string table.) Smaller buffer sizes give                                                    // 6763\n\t\t// fast adaptation but have of course the overhead of transmitting                                                   // 6764\n\t\t// trees more frequently.                                                                                            // 6765\n\t\t// - I can't count above 4                                                                                           // 6766\n\t\tvar lit_bufsize;                                                                                                     // 6767\n                                                                                                                       // 6768\n\t\tvar last_lit; // running index in l_buf                                                                              // 6769\n                                                                                                                       // 6770\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have                                                  // 6771\n\t\t// the same number of elements. To use different lengths, an extra flag                                              // 6772\n\t\t// array would be necessary.                                                                                         // 6773\n                                                                                                                       // 6774\n\t\tvar d_buf; // index of pendig_buf                                                                                    // 6775\n                                                                                                                       // 6776\n\t\t// that.opt_len; // bit length of current block with optimal trees                                                   // 6777\n\t\t// that.static_len; // bit length of current block with static trees                                                 // 6778\n\t\tvar matches; // number of string matches in current block                                                            // 6779\n\t\tvar last_eob_len; // bit length of EOB code for last block                                                           // 6780\n                                                                                                                       // 6781\n\t\t// Output buffer. bits are inserted starting at the bottom (least                                                    // 6782\n\t\t// significant bits).                                                                                                // 6783\n\t\tvar bi_buf;                                                                                                          // 6784\n                                                                                                                       // 6785\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit                                                 // 6786\n\t\t// are always zero.                                                                                                  // 6787\n\t\tvar bi_valid;                                                                                                        // 6788\n                                                                                                                       // 6789\n\t\t// number of codes at each bit length for an optimal tree                                                            // 6790\n\t\tthat.bl_count = [];                                                                                                  // 6791\n                                                                                                                       // 6792\n\t\t// heap used to build the Huffman trees                                                                              // 6793\n\t\tthat.heap = [];                                                                                                      // 6794\n                                                                                                                       // 6795\n\t\tdyn_ltree = [];                                                                                                      // 6796\n\t\tdyn_dtree = [];                                                                                                      // 6797\n\t\tbl_tree = [];                                                                                                        // 6798\n                                                                                                                       // 6799\n\t\tfunction lm_init() {                                                                                                 // 6800\n\t\t\tvar i;                                                                                                              // 6801\n\t\t\twindow_size = 2 * w_size;                                                                                           // 6802\n                                                                                                                       // 6803\n\t\t\thead[hash_size - 1] = 0;                                                                                            // 6804\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {                                                                               // 6805\n\t\t\t\thead[i] = 0;                                                                                                       // 6806\n\t\t\t}                                                                                                                   // 6807\n                                                                                                                       // 6808\n\t\t\t// Set the default configuration parameters:                                                                        // 6809\n\t\t\tmax_lazy_match = config_table[level].max_lazy;                                                                      // 6810\n\t\t\tgood_match = config_table[level].good_length;                                                                       // 6811\n\t\t\tnice_match = config_table[level].nice_length;                                                                       // 6812\n\t\t\tmax_chain_length = config_table[level].max_chain;                                                                   // 6813\n                                                                                                                       // 6814\n\t\t\tstrstart = 0;                                                                                                       // 6815\n\t\t\tblock_start = 0;                                                                                                    // 6816\n\t\t\tlookahead = 0;                                                                                                      // 6817\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;                                                                         // 6818\n\t\t\tmatch_available = 0;                                                                                                // 6819\n\t\t\tins_h = 0;                                                                                                          // 6820\n\t\t}                                                                                                                    // 6821\n                                                                                                                       // 6822\n\t\tfunction init_block() {                                                                                              // 6823\n\t\t\tvar i;                                                                                                              // 6824\n\t\t\t// Initialize the trees.                                                                                            // 6825\n\t\t\tfor (i = 0; i < L_CODES; i++)                                                                                       // 6826\n\t\t\t\tdyn_ltree[i * 2] = 0;                                                                                              // 6827\n\t\t\tfor (i = 0; i < D_CODES; i++)                                                                                       // 6828\n\t\t\t\tdyn_dtree[i * 2] = 0;                                                                                              // 6829\n\t\t\tfor (i = 0; i < BL_CODES; i++)                                                                                      // 6830\n\t\t\t\tbl_tree[i * 2] = 0;                                                                                                // 6831\n                                                                                                                       // 6832\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;                                                                                       // 6833\n\t\t\tthat.opt_len = that.static_len = 0;                                                                                 // 6834\n\t\t\tlast_lit = matches = 0;                                                                                             // 6835\n\t\t}                                                                                                                    // 6836\n                                                                                                                       // 6837\n\t\t// Initialize the tree data structures for a new zlib stream.                                                        // 6838\n\t\tfunction tr_init() {                                                                                                 // 6839\n                                                                                                                       // 6840\n\t\t\tl_desc.dyn_tree = dyn_ltree;                                                                                        // 6841\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;                                                                        // 6842\n                                                                                                                       // 6843\n\t\t\td_desc.dyn_tree = dyn_dtree;                                                                                        // 6844\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;                                                                        // 6845\n                                                                                                                       // 6846\n\t\t\tbl_desc.dyn_tree = bl_tree;                                                                                         // 6847\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;                                                                      // 6848\n                                                                                                                       // 6849\n\t\t\tbi_buf = 0;                                                                                                         // 6850\n\t\t\tbi_valid = 0;                                                                                                       // 6851\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate                                                                   // 6852\n                                                                                                                       // 6853\n\t\t\t// Initialize the first block of the first file:                                                                    // 6854\n\t\t\tinit_block();                                                                                                       // 6855\n\t\t}                                                                                                                    // 6856\n                                                                                                                       // 6857\n\t\t// Restore the heap property by moving down the tree starting at node k,                                             // 6858\n\t\t// exchanging a node with the smallest of its two sons if necessary,                                                 // 6859\n\t\t// stopping                                                                                                          // 6860\n\t\t// when the heap property is re-established (each father smaller than its                                            // 6861\n\t\t// two sons).                                                                                                        // 6862\n\t\tthat.pqdownheap = function(tree, // the tree to restore                                                              // 6863\n\t\tk // node to move down                                                                                               // 6864\n\t\t) {                                                                                                                  // 6865\n\t\t\tvar heap = that.heap;                                                                                               // 6866\n\t\t\tvar v = heap[k];                                                                                                    // 6867\n\t\t\tvar j = k << 1; // left son of k                                                                                    // 6868\n\t\t\twhile (j <= that.heap_len) {                                                                                        // 6869\n\t\t\t\t// Set j to the smallest of the two sons:                                                                          // 6870\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {                                        // 6871\n\t\t\t\t\tj++;                                                                                                              // 6872\n\t\t\t\t}                                                                                                                  // 6873\n\t\t\t\t// Exit if v is smaller than both sons                                                                             // 6874\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))                                                                         // 6875\n\t\t\t\t\tbreak;                                                                                                            // 6876\n                                                                                                                       // 6877\n\t\t\t\t// Exchange v with the smallest son                                                                                // 6878\n\t\t\t\theap[k] = heap[j];                                                                                                 // 6879\n\t\t\t\tk = j;                                                                                                             // 6880\n\t\t\t\t// And continue down the tree, setting j to the left son of k                                                      // 6881\n\t\t\t\tj <<= 1;                                                                                                           // 6882\n\t\t\t}                                                                                                                   // 6883\n\t\t\theap[k] = v;                                                                                                        // 6884\n\t\t};                                                                                                                   // 6885\n                                                                                                                       // 6886\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes                                         // 6887\n\t\t// in the bit length tree.                                                                                           // 6888\n\t\tfunction scan_tree(tree,// the tree to be scanned                                                                    // 6889\n\t\tmax_code // and its largest code of non zero frequency                                                               // 6890\n\t\t) {                                                                                                                  // 6891\n\t\t\tvar n; // iterates over all tree elements                                                                           // 6892\n\t\t\tvar prevlen = -1; // last emitted length                                                                            // 6893\n\t\t\tvar curlen; // length of current code                                                                               // 6894\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code                                                               // 6895\n\t\t\tvar count = 0; // repeat count of the current code                                                                  // 6896\n\t\t\tvar max_count = 7; // max repeat count                                                                              // 6897\n\t\t\tvar min_count = 4; // min repeat count                                                                              // 6898\n                                                                                                                       // 6899\n\t\t\tif (nextlen === 0) {                                                                                                // 6900\n\t\t\t\tmax_count = 138;                                                                                                   // 6901\n\t\t\t\tmin_count = 3;                                                                                                     // 6902\n\t\t\t}                                                                                                                   // 6903\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard                                                                     // 6904\n                                                                                                                       // 6905\n\t\t\tfor (n = 0; n <= max_code; n++) {                                                                                   // 6906\n\t\t\t\tcurlen = nextlen;                                                                                                  // 6907\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];                                                                                   // 6908\n\t\t\t\tif (++count < max_count && curlen == nextlen) {                                                                    // 6909\n\t\t\t\t\tcontinue;                                                                                                         // 6910\n\t\t\t\t} else if (count < min_count) {                                                                                    // 6911\n\t\t\t\t\tbl_tree[curlen * 2] += count;                                                                                     // 6912\n\t\t\t\t} else if (curlen !== 0) {                                                                                         // 6913\n\t\t\t\t\tif (curlen != prevlen)                                                                                            // 6914\n\t\t\t\t\t\tbl_tree[curlen * 2]++;                                                                                           // 6915\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;                                                                                           // 6916\n\t\t\t\t} else if (count <= 10) {                                                                                          // 6917\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;                                                                                         // 6918\n\t\t\t\t} else {                                                                                                           // 6919\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;                                                                                       // 6920\n\t\t\t\t}                                                                                                                  // 6921\n\t\t\t\tcount = 0;                                                                                                         // 6922\n\t\t\t\tprevlen = curlen;                                                                                                  // 6923\n\t\t\t\tif (nextlen === 0) {                                                                                               // 6924\n\t\t\t\t\tmax_count = 138;                                                                                                  // 6925\n\t\t\t\t\tmin_count = 3;                                                                                                    // 6926\n\t\t\t\t} else if (curlen == nextlen) {                                                                                    // 6927\n\t\t\t\t\tmax_count = 6;                                                                                                    // 6928\n\t\t\t\t\tmin_count = 3;                                                                                                    // 6929\n\t\t\t\t} else {                                                                                                           // 6930\n\t\t\t\t\tmax_count = 7;                                                                                                    // 6931\n\t\t\t\t\tmin_count = 4;                                                                                                    // 6932\n\t\t\t\t}                                                                                                                  // 6933\n\t\t\t}                                                                                                                   // 6934\n\t\t}                                                                                                                    // 6935\n                                                                                                                       // 6936\n\t\t// Construct the Huffman tree for the bit lengths and return the index in                                            // 6937\n\t\t// bl_order of the last bit length code to send.                                                                     // 6938\n\t\tfunction build_bl_tree() {                                                                                           // 6939\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq                                                  // 6940\n                                                                                                                       // 6941\n\t\t\t// Determine the bit length frequencies for literal and distance trees                                              // 6942\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);                                                                              // 6943\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);                                                                              // 6944\n                                                                                                                       // 6945\n\t\t\t// Build the bit length tree:                                                                                       // 6946\n\t\t\tbl_desc.build_tree(that);                                                                                           // 6947\n\t\t\t// opt_len now includes the length of the tree representations, except                                              // 6948\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the                                                  // 6949\n\t\t\t// counts.                                                                                                          // 6950\n                                                                                                                       // 6951\n\t\t\t// Determine the number of bit length codes to send. The pkzip format                                               // 6952\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says                                             // 6953\n\t\t\t// 3 but the actual value used is 4.)                                                                               // 6954\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {                                                 // 6955\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)                                                             // 6956\n\t\t\t\t\tbreak;                                                                                                            // 6957\n\t\t\t}                                                                                                                   // 6958\n\t\t\t// Update opt_len to include the bit length tree and counts                                                         // 6959\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;                                                                  // 6960\n                                                                                                                       // 6961\n\t\t\treturn max_blindex;                                                                                                 // 6962\n\t\t}                                                                                                                    // 6963\n                                                                                                                       // 6964\n\t\t// Output a byte on the stream.                                                                                      // 6965\n\t\t// IN assertion: there is enough room in pending_buf.                                                                // 6966\n\t\tfunction put_byte(p) {                                                                                               // 6967\n\t\t\tthat.pending_buf[that.pending++] = p;                                                                               // 6968\n\t\t}                                                                                                                    // 6969\n                                                                                                                       // 6970\n\t\tfunction put_short(w) {                                                                                              // 6971\n\t\t\tput_byte(w & 0xff);                                                                                                 // 6972\n\t\t\tput_byte((w >>> 8) & 0xff);                                                                                         // 6973\n\t\t}                                                                                                                    // 6974\n                                                                                                                       // 6975\n\t\tfunction putShortMSB(b) {                                                                                            // 6976\n\t\t\tput_byte((b >> 8) & 0xff);                                                                                          // 6977\n\t\t\tput_byte((b & 0xff) & 0xff);                                                                                        // 6978\n\t\t}                                                                                                                    // 6979\n                                                                                                                       // 6980\n\t\tfunction send_bits(value, length) {                                                                                  // 6981\n\t\t\tvar val, len = length;                                                                                              // 6982\n\t\t\tif (bi_valid > Buf_size - len) {                                                                                    // 6983\n\t\t\t\tval = value;                                                                                                       // 6984\n\t\t\t\t// bi_buf |= (val << bi_valid);                                                                                    // 6985\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);                                                                            // 6986\n\t\t\t\tput_short(bi_buf);                                                                                                 // 6987\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);                                                                            // 6988\n\t\t\t\tbi_valid += len - Buf_size;                                                                                        // 6989\n\t\t\t} else {                                                                                                            // 6990\n\t\t\t\t// bi_buf |= (value) << bi_valid;                                                                                  // 6991\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);                                                                        // 6992\n\t\t\t\tbi_valid += len;                                                                                                   // 6993\n\t\t\t}                                                                                                                   // 6994\n\t\t}                                                                                                                    // 6995\n                                                                                                                       // 6996\n\t\tfunction send_code(c, tree) {                                                                                        // 6997\n\t\t\tvar c2 = c * 2;                                                                                                     // 6998\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);                                                                // 6999\n\t\t}                                                                                                                    // 7000\n                                                                                                                       // 7001\n\t\t// Send a literal or distance tree in compressed form, using the codes in                                            // 7002\n\t\t// bl_tree.                                                                                                          // 7003\n\t\tfunction send_tree(tree,// the tree to be sent                                                                       // 7004\n\t\tmax_code // and its largest code of non zero frequency                                                               // 7005\n\t\t) {                                                                                                                  // 7006\n\t\t\tvar n; // iterates over all tree elements                                                                           // 7007\n\t\t\tvar prevlen = -1; // last emitted length                                                                            // 7008\n\t\t\tvar curlen; // length of current code                                                                               // 7009\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code                                                               // 7010\n\t\t\tvar count = 0; // repeat count of the current code                                                                  // 7011\n\t\t\tvar max_count = 7; // max repeat count                                                                              // 7012\n\t\t\tvar min_count = 4; // min repeat count                                                                              // 7013\n                                                                                                                       // 7014\n\t\t\tif (nextlen === 0) {                                                                                                // 7015\n\t\t\t\tmax_count = 138;                                                                                                   // 7016\n\t\t\t\tmin_count = 3;                                                                                                     // 7017\n\t\t\t}                                                                                                                   // 7018\n                                                                                                                       // 7019\n\t\t\tfor (n = 0; n <= max_code; n++) {                                                                                   // 7020\n\t\t\t\tcurlen = nextlen;                                                                                                  // 7021\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];                                                                                   // 7022\n\t\t\t\tif (++count < max_count && curlen == nextlen) {                                                                    // 7023\n\t\t\t\t\tcontinue;                                                                                                         // 7024\n\t\t\t\t} else if (count < min_count) {                                                                                    // 7025\n\t\t\t\t\tdo {                                                                                                              // 7026\n\t\t\t\t\t\tsend_code(curlen, bl_tree);                                                                                      // 7027\n\t\t\t\t\t} while (--count !== 0);                                                                                          // 7028\n\t\t\t\t} else if (curlen !== 0) {                                                                                         // 7029\n\t\t\t\t\tif (curlen != prevlen) {                                                                                          // 7030\n\t\t\t\t\t\tsend_code(curlen, bl_tree);                                                                                      // 7031\n\t\t\t\t\t\tcount--;                                                                                                         // 7032\n\t\t\t\t\t}                                                                                                                 // 7033\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);                                                                                      // 7034\n\t\t\t\t\tsend_bits(count - 3, 2);                                                                                          // 7035\n\t\t\t\t} else if (count <= 10) {                                                                                          // 7036\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);                                                                                    // 7037\n\t\t\t\t\tsend_bits(count - 3, 3);                                                                                          // 7038\n\t\t\t\t} else {                                                                                                           // 7039\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);                                                                                  // 7040\n\t\t\t\t\tsend_bits(count - 11, 7);                                                                                         // 7041\n\t\t\t\t}                                                                                                                  // 7042\n\t\t\t\tcount = 0;                                                                                                         // 7043\n\t\t\t\tprevlen = curlen;                                                                                                  // 7044\n\t\t\t\tif (nextlen === 0) {                                                                                               // 7045\n\t\t\t\t\tmax_count = 138;                                                                                                  // 7046\n\t\t\t\t\tmin_count = 3;                                                                                                    // 7047\n\t\t\t\t} else if (curlen == nextlen) {                                                                                    // 7048\n\t\t\t\t\tmax_count = 6;                                                                                                    // 7049\n\t\t\t\t\tmin_count = 3;                                                                                                    // 7050\n\t\t\t\t} else {                                                                                                           // 7051\n\t\t\t\t\tmax_count = 7;                                                                                                    // 7052\n\t\t\t\t\tmin_count = 4;                                                                                                    // 7053\n\t\t\t\t}                                                                                                                  // 7054\n\t\t\t}                                                                                                                   // 7055\n\t\t}                                                                                                                    // 7056\n                                                                                                                       // 7057\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the                                          // 7058\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.                                          // 7059\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.                                                           // 7060\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {                                                                   // 7061\n\t\t\tvar rank; // index in bl_order                                                                                      // 7062\n                                                                                                                       // 7063\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt                                                    // 7064\n\t\t\tsend_bits(dcodes - 1, 5);                                                                                           // 7065\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt                                                       // 7066\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {                                                                            // 7067\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);                                                                // 7068\n\t\t\t}                                                                                                                   // 7069\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree                                                                   // 7070\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree                                                                  // 7071\n\t\t}                                                                                                                    // 7072\n                                                                                                                       // 7073\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.                                                               // 7074\n\t\tfunction bi_flush() {                                                                                                // 7075\n\t\t\tif (bi_valid == 16) {                                                                                               // 7076\n\t\t\t\tput_short(bi_buf);                                                                                                 // 7077\n\t\t\t\tbi_buf = 0;                                                                                                        // 7078\n\t\t\t\tbi_valid = 0;                                                                                                      // 7079\n\t\t\t} else if (bi_valid >= 8) {                                                                                         // 7080\n\t\t\t\tput_byte(bi_buf & 0xff);                                                                                           // 7081\n\t\t\t\tbi_buf >>>= 8;                                                                                                     // 7082\n\t\t\t\tbi_valid -= 8;                                                                                                     // 7083\n\t\t\t}                                                                                                                   // 7084\n\t\t}                                                                                                                    // 7085\n                                                                                                                       // 7086\n\t\t// Send one empty static block to give enough lookahead for inflate.                                                 // 7087\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.                                                      // 7088\n\t\t// The current inflate code requires 9 bits of lookahead. If the                                                     // 7089\n\t\t// last two codes for the previous block (real code plus EOB) were coded                                             // 7090\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode                                          // 7091\n\t\t// the last real code. In this case we send two empty static blocks instead                                          // 7092\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)                                         // 7093\n\t\t// To simplify the code, we assume the worst case of last real code encoded                                          // 7094\n\t\t// on one bit only.                                                                                                  // 7095\n\t\tfunction _tr_align() {                                                                                               // 7096\n\t\t\tsend_bits(STATIC_TREES << 1, 3);                                                                                    // 7097\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);                                                                      // 7098\n                                                                                                                       // 7099\n\t\t\tbi_flush();                                                                                                         // 7100\n                                                                                                                       // 7101\n\t\t\t// Of the 10 bits for the empty block, we have already sent                                                         // 7102\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before                                               // 7103\n\t\t\t// the EOB of the previous block) was thus at least one plus the length                                             // 7104\n\t\t\t// of the EOB plus what we have just sent of the empty static block.                                                // 7105\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {                                                                         // 7106\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);                                                                                   // 7107\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);                                                                     // 7108\n\t\t\t\tbi_flush();                                                                                                        // 7109\n\t\t\t}                                                                                                                   // 7110\n\t\t\tlast_eob_len = 7;                                                                                                   // 7111\n\t\t}                                                                                                                    // 7112\n                                                                                                                       // 7113\n\t\t// Save the match info and tally the frequency counts. Return true if                                                // 7114\n\t\t// the current block must be flushed.                                                                                // 7115\n\t\tfunction _tr_tally(dist, // distance of matched string                                                               // 7116\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)                                                          // 7117\n\t\t) {                                                                                                                  // 7118\n\t\t\tvar out_length, in_length, dcode;                                                                                   // 7119\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;                                                       // 7120\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;                                                           // 7121\n                                                                                                                       // 7122\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;                                                                     // 7123\n\t\t\tlast_lit++;                                                                                                         // 7124\n                                                                                                                       // 7125\n\t\t\tif (dist === 0) {                                                                                                   // 7126\n\t\t\t\t// lc is the unmatched char                                                                                        // 7127\n\t\t\t\tdyn_ltree[lc * 2]++;                                                                                               // 7128\n\t\t\t} else {                                                                                                            // 7129\n\t\t\t\tmatches++;                                                                                                         // 7130\n\t\t\t\t// Here, lc is the match length - MIN_MATCH                                                                        // 7131\n\t\t\t\tdist--; // dist = match distance - 1                                                                               // 7132\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;                                                           // 7133\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;                                                                                // 7134\n\t\t\t}                                                                                                                   // 7135\n                                                                                                                       // 7136\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {                                                                       // 7137\n\t\t\t\t// Compute an upper bound for the compressed length                                                                // 7138\n\t\t\t\tout_length = last_lit * 8;                                                                                         // 7139\n\t\t\t\tin_length = strstart - block_start;                                                                                // 7140\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {                                                                        // 7141\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);                                               // 7142\n\t\t\t\t}                                                                                                                  // 7143\n\t\t\t\tout_length >>>= 3;                                                                                                 // 7144\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))                                // 7145\n\t\t\t\t\treturn true;                                                                                                      // 7146\n\t\t\t}                                                                                                                   // 7147\n                                                                                                                       // 7148\n\t\t\treturn (last_lit == lit_bufsize - 1);                                                                               // 7149\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K                                                  // 7150\n\t\t\t// on 16 bit machines and because stored blocks are restricted to                                                   // 7151\n\t\t\t// 64K-1 bytes.                                                                                                     // 7152\n\t\t}                                                                                                                    // 7153\n                                                                                                                       // 7154\n\t\t// Send the block data compressed using the given Huffman trees                                                      // 7155\n\t\tfunction compress_block(ltree, dtree) {                                                                              // 7156\n\t\t\tvar dist; // distance of matched string                                                                             // 7157\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)                                                           // 7158\n\t\t\tvar lx = 0; // running index in l_buf                                                                               // 7159\n\t\t\tvar code; // the code to send                                                                                       // 7160\n\t\t\tvar extra; // number of extra bits to send                                                                          // 7161\n                                                                                                                       // 7162\n\t\t\tif (last_lit !== 0) {                                                                                               // 7163\n\t\t\t\tdo {                                                                                                               // 7164\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);        // 7165\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;                                                                       // 7166\n\t\t\t\t\tlx++;                                                                                                             // 7167\n                                                                                                                       // 7168\n\t\t\t\t\tif (dist === 0) {                                                                                                 // 7169\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte                                                                     // 7170\n\t\t\t\t\t} else {                                                                                                          // 7171\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH                                                                      // 7172\n\t\t\t\t\t\tcode = Tree._length_code[lc];                                                                                    // 7173\n                                                                                                                       // 7174\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length                                                        // 7175\n\t\t\t\t\t\t// code                                                                                                          // 7176\n\t\t\t\t\t\textra = Tree.extra_lbits[code];                                                                                  // 7177\n\t\t\t\t\t\tif (extra !== 0) {                                                                                               // 7178\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];                                                                                   // 7179\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits                                                             // 7180\n\t\t\t\t\t\t}                                                                                                                // 7181\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1                                                                    // 7182\n\t\t\t\t\t\tcode = Tree.d_code(dist);                                                                                        // 7183\n                                                                                                                       // 7184\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code                                                                // 7185\n\t\t\t\t\t\textra = Tree.extra_dbits[code];                                                                                  // 7186\n\t\t\t\t\t\tif (extra !== 0) {                                                                                               // 7187\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];                                                                                   // 7188\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits                                                         // 7189\n\t\t\t\t\t\t}                                                                                                                // 7190\n\t\t\t\t\t} // literal or match pair ?                                                                                      // 7191\n                                                                                                                       // 7192\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is                                                  // 7193\n\t\t\t\t\t// ok:                                                                                                            // 7194\n\t\t\t\t} while (lx < last_lit);                                                                                           // 7195\n\t\t\t}                                                                                                                   // 7196\n                                                                                                                       // 7197\n\t\t\tsend_code(END_BLOCK, ltree);                                                                                        // 7198\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];                                                                            // 7199\n\t\t}                                                                                                                    // 7200\n                                                                                                                       // 7201\n\t\t// Flush the bit buffer and align the output on a byte boundary                                                      // 7202\n\t\tfunction bi_windup() {                                                                                               // 7203\n\t\t\tif (bi_valid > 8) {                                                                                                 // 7204\n\t\t\t\tput_short(bi_buf);                                                                                                 // 7205\n\t\t\t} else if (bi_valid > 0) {                                                                                          // 7206\n\t\t\t\tput_byte(bi_buf & 0xff);                                                                                           // 7207\n\t\t\t}                                                                                                                   // 7208\n\t\t\tbi_buf = 0;                                                                                                         // 7209\n\t\t\tbi_valid = 0;                                                                                                       // 7210\n\t\t}                                                                                                                    // 7211\n                                                                                                                       // 7212\n\t\t// Copy a stored block, storing first the length and its                                                             // 7213\n\t\t// one's complement if requested.                                                                                    // 7214\n\t\tfunction copy_block(buf, // the input data                                                                           // 7215\n\t\tlen, // its length                                                                                                   // 7216\n\t\theader // true if block header must be written                                                                       // 7217\n\t\t) {                                                                                                                  // 7218\n\t\t\tbi_windup(); // align on byte boundary                                                                              // 7219\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate                                                                   // 7220\n                                                                                                                       // 7221\n\t\t\tif (header) {                                                                                                       // 7222\n\t\t\t\tput_short(len);                                                                                                    // 7223\n\t\t\t\tput_short(~len);                                                                                                   // 7224\n\t\t\t}                                                                                                                   // 7225\n                                                                                                                       // 7226\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);                                                // 7227\n\t\t\tthat.pending += len;                                                                                                // 7228\n\t\t}                                                                                                                    // 7229\n                                                                                                                       // 7230\n\t\t// Send a stored block                                                                                               // 7231\n\t\tfunction _tr_stored_block(buf, // input block                                                                        // 7232\n\t\tstored_len, // length of input block                                                                                 // 7233\n\t\teof // true if this is the last block for a file                                                                     // 7234\n\t\t) {                                                                                                                  // 7235\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type                                               // 7236\n\t\t\tcopy_block(buf, stored_len, true); // with header                                                                   // 7237\n\t\t}                                                                                                                    // 7238\n                                                                                                                       // 7239\n\t\t// Determine the best encoding for the current block: dynamic trees, static                                          // 7240\n\t\t// trees or store, and output the encoded block to the zip file.                                                     // 7241\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old                                                     // 7242\n\t\tstored_len, // length of input block                                                                                 // 7243\n\t\teof // true if this is the last block for a file                                                                     // 7244\n\t\t) {                                                                                                                  // 7245\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes                                                        // 7246\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq                                              // 7247\n                                                                                                                       // 7248\n\t\t\t// Build the Huffman trees unless a stored block is forced                                                          // 7249\n\t\t\tif (level > 0) {                                                                                                    // 7250\n\t\t\t\t// Construct the literal and distance trees                                                                        // 7251\n\t\t\t\tl_desc.build_tree(that);                                                                                           // 7252\n                                                                                                                       // 7253\n\t\t\t\td_desc.build_tree(that);                                                                                           // 7254\n                                                                                                                       // 7255\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths                                                 // 7256\n\t\t\t\t// of                                                                                                              // 7257\n\t\t\t\t// the compressed block data, excluding the tree representations.                                                  // 7258\n                                                                                                                       // 7259\n\t\t\t\t// Build the bit length tree for the above two trees, and get the                                                  // 7260\n\t\t\t\t// index                                                                                                           // 7261\n\t\t\t\t// in bl_order of the last bit length code to send.                                                                // 7262\n\t\t\t\tmax_blindex = build_bl_tree();                                                                                     // 7263\n                                                                                                                       // 7264\n\t\t\t\t// Determine the best encoding. Compute first the block length in                                                  // 7265\n\t\t\t\t// bytes                                                                                                           // 7266\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;                                                                           // 7267\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;                                                                     // 7268\n                                                                                                                       // 7269\n\t\t\t\tif (static_lenb <= opt_lenb)                                                                                       // 7270\n\t\t\t\t\topt_lenb = static_lenb;                                                                                           // 7271\n\t\t\t} else {                                                                                                            // 7272\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block                                                   // 7273\n\t\t\t}                                                                                                                   // 7274\n                                                                                                                       // 7275\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {                                                                    // 7276\n\t\t\t\t// 4: two words for the lengths                                                                                    // 7277\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.                                                  // 7278\n\t\t\t\t// Otherwise we can't have processed more than WSIZE input bytes                                                   // 7279\n\t\t\t\t// since                                                                                                           // 7280\n\t\t\t\t// the last block flush, because compression would have been                                                       // 7281\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to                                                    // 7282\n\t\t\t\t// transform a block into a stored block.                                                                          // 7283\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);                                                                            // 7284\n\t\t\t} else if (static_lenb == opt_lenb) {                                                                               // 7285\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);                                                                 // 7286\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);                                                  // 7287\n\t\t\t} else {                                                                                                            // 7288\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);                                                                    // 7289\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);                                         // 7290\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);                                                                              // 7291\n\t\t\t}                                                                                                                   // 7292\n                                                                                                                       // 7293\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB                                                   // 7294\n\t\t\t// and uLong implemented on 32 bits.                                                                                // 7295\n                                                                                                                       // 7296\n\t\t\tinit_block();                                                                                                       // 7297\n                                                                                                                       // 7298\n\t\t\tif (eof) {                                                                                                          // 7299\n\t\t\t\tbi_windup();                                                                                                       // 7300\n\t\t\t}                                                                                                                   // 7301\n\t\t}                                                                                                                    // 7302\n                                                                                                                       // 7303\n\t\tfunction flush_block_only(eof) {                                                                                     // 7304\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);                                  // 7305\n\t\t\tblock_start = strstart;                                                                                             // 7306\n\t\t\tstrm.flush_pending();                                                                                               // 7307\n\t\t}                                                                                                                    // 7308\n                                                                                                                       // 7309\n\t\t// Fill the window when the lookahead becomes insufficient.                                                          // 7310\n\t\t// Updates strstart and lookahead.                                                                                   // 7311\n\t\t//                                                                                                                   // 7312\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD                                                                           // 7313\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD                                                             // 7314\n\t\t// At least one byte has been read, or avail_in === 0; reads are                                                     // 7315\n\t\t// performed for at least two bytes (required for the zip translate_eol                                              // 7316\n\t\t// option -- not supported here).                                                                                    // 7317\n\t\tfunction fill_window() {                                                                                             // 7318\n\t\t\tvar n, m;                                                                                                           // 7319\n\t\t\tvar p;                                                                                                              // 7320\n\t\t\tvar more; // Amount of free space at the end of the window.                                                         // 7321\n                                                                                                                       // 7322\n\t\t\tdo {                                                                                                                // 7323\n\t\t\t\tmore = (window_size - lookahead - strstart);                                                                       // 7324\n                                                                                                                       // 7325\n\t\t\t\t// Deal with !@#$% 64K limit:                                                                                      // 7326\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {                                                             // 7327\n\t\t\t\t\tmore = w_size;                                                                                                    // 7328\n\t\t\t\t} else if (more == -1) {                                                                                           // 7329\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==                                                   // 7330\n\t\t\t\t\t// 0                                                                                                              // 7331\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)                                                               // 7332\n\t\t\t\t\tmore--;                                                                                                           // 7333\n                                                                                                                       // 7334\n\t\t\t\t\t// If the window is almost full and there is insufficient                                                         // 7335\n\t\t\t\t\t// lookahead,                                                                                                     // 7336\n\t\t\t\t\t// move the upper half to the lower one to make room in the                                                       // 7337\n\t\t\t\t\t// upper half.                                                                                                    // 7338\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {                                                          // 7339\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);                                                          // 7340\n                                                                                                                       // 7341\n\t\t\t\t\tmatch_start -= w_size;                                                                                            // 7342\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST                                                           // 7343\n\t\t\t\t\tblock_start -= w_size;                                                                                            // 7344\n                                                                                                                       // 7345\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values                                                      // 7346\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==                                                   // 7347\n\t\t\t\t\t// 0                                                                                                              // 7348\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level                                                   // 7349\n\t\t\t\t\t// > 0                                                                                                            // 7350\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of                                                   // 7351\n\t\t\t\t\t// zlib, so we don't care about this pathological case.)                                                          // 7352\n                                                                                                                       // 7353\n\t\t\t\t\tn = hash_size;                                                                                                    // 7354\n\t\t\t\t\tp = n;                                                                                                            // 7355\n\t\t\t\t\tdo {                                                                                                              // 7356\n\t\t\t\t\t\tm = (head[--p] & 0xffff);                                                                                        // 7357\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);                                                                        // 7358\n\t\t\t\t\t} while (--n !== 0);                                                                                              // 7359\n                                                                                                                       // 7360\n\t\t\t\t\tn = w_size;                                                                                                       // 7361\n\t\t\t\t\tp = n;                                                                                                            // 7362\n\t\t\t\t\tdo {                                                                                                              // 7363\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);                                                                                        // 7364\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);                                                                        // 7365\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but                                                         // 7366\n\t\t\t\t\t\t// its value will never be used.                                                                                 // 7367\n\t\t\t\t\t} while (--n !== 0);                                                                                              // 7368\n\t\t\t\t\tmore += w_size;                                                                                                   // 7369\n\t\t\t\t}                                                                                                                  // 7370\n                                                                                                                       // 7371\n\t\t\t\tif (strm.avail_in === 0)                                                                                           // 7372\n\t\t\t\t\treturn;                                                                                                           // 7373\n                                                                                                                       // 7374\n\t\t\t\t// If there was no sliding:                                                                                        // 7375\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&                                               // 7376\n\t\t\t\t// more == window_size - lookahead - strstart                                                                      // 7377\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)                                                 // 7378\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2                                                                            // 7379\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),                                                                // 7380\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&                                                                    // 7381\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.                                                 // 7382\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.                                                                 // 7383\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.                                                // 7384\n                                                                                                                       // 7385\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);                                                             // 7386\n\t\t\t\tlookahead += n;                                                                                                    // 7387\n                                                                                                                       // 7388\n\t\t\t\t// Initialize the hash value now that we have some input:                                                          // 7389\n\t\t\t\tif (lookahead >= MIN_MATCH) {                                                                                      // 7390\n\t\t\t\t\tins_h = window[strstart] & 0xff;                                                                                  // 7391\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;                                    // 7392\n\t\t\t\t}                                                                                                                  // 7393\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is                                                      // 7394\n\t\t\t\t// garbage,                                                                                                        // 7395\n\t\t\t\t// but this is not important since only literal bytes will be                                                      // 7396\n\t\t\t\t// emitted.                                                                                                        // 7397\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);                                                         // 7398\n\t\t}                                                                                                                    // 7399\n                                                                                                                       // 7400\n\t\t// Copy without compression as much as possible from the input stream,                                               // 7401\n\t\t// return                                                                                                            // 7402\n\t\t// the current block state.                                                                                          // 7403\n\t\t// This function does not insert new strings in the dictionary since                                                 // 7404\n\t\t// uncompressible data is probably not useful. This function is used                                                 // 7405\n\t\t// only for the level=0 compression option.                                                                          // 7406\n\t\t// NOTE: this function should be optimized to avoid extra copying from                                               // 7407\n\t\t// window to pending_buf.                                                                                            // 7408\n\t\tfunction deflate_stored(flush) {                                                                                     // 7409\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited                                                // 7410\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:                                                  // 7411\n                                                                                                                       // 7412\n\t\t\tvar max_block_size = 0xffff;                                                                                        // 7413\n\t\t\tvar max_start;                                                                                                      // 7414\n                                                                                                                       // 7415\n\t\t\tif (max_block_size > pending_buf_size - 5) {                                                                        // 7416\n\t\t\t\tmax_block_size = pending_buf_size - 5;                                                                             // 7417\n\t\t\t}                                                                                                                   // 7418\n                                                                                                                       // 7419\n\t\t\t// Copy as much as possible from input to output:                                                                   // 7420\n\t\t\twhile (true) {                                                                                                      // 7421\n\t\t\t\t// Fill the window as much as possible:                                                                            // 7422\n\t\t\t\tif (lookahead <= 1) {                                                                                              // 7423\n\t\t\t\t\tfill_window();                                                                                                    // 7424\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)                                                                       // 7425\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7426\n\t\t\t\t\tif (lookahead === 0)                                                                                              // 7427\n\t\t\t\t\t\tbreak; // flush the current block                                                                                // 7428\n\t\t\t\t}                                                                                                                  // 7429\n                                                                                                                       // 7430\n\t\t\t\tstrstart += lookahead;                                                                                             // 7431\n\t\t\t\tlookahead = 0;                                                                                                     // 7432\n                                                                                                                       // 7433\n\t\t\t\t// Emit a stored block if pending_buf will be full:                                                                // 7434\n\t\t\t\tmax_start = block_start + max_block_size;                                                                          // 7435\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {                                                                     // 7436\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine                                                   // 7437\n\t\t\t\t\tlookahead = (strstart - max_start);                                                                               // 7438\n\t\t\t\t\tstrstart = max_start;                                                                                             // 7439\n                                                                                                                       // 7440\n\t\t\t\t\tflush_block_only(false);                                                                                          // 7441\n\t\t\t\t\tif (strm.avail_out === 0)                                                                                         // 7442\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7443\n                                                                                                                       // 7444\n\t\t\t\t}                                                                                                                  // 7445\n                                                                                                                       // 7446\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become                                                 // 7447\n\t\t\t\t// negative and the data will be gone:                                                                             // 7448\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {                                                            // 7449\n\t\t\t\t\tflush_block_only(false);                                                                                          // 7450\n\t\t\t\t\tif (strm.avail_out === 0)                                                                                         // 7451\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7452\n\t\t\t\t}                                                                                                                  // 7453\n\t\t\t}                                                                                                                   // 7454\n                                                                                                                       // 7455\n\t\t\tflush_block_only(flush == Z_FINISH);                                                                                // 7456\n\t\t\tif (strm.avail_out === 0)                                                                                           // 7457\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;                                                             // 7458\n                                                                                                                       // 7459\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;                                                                  // 7460\n\t\t}                                                                                                                    // 7461\n                                                                                                                       // 7462\n\t\tfunction longest_match(cur_match) {                                                                                  // 7463\n\t\t\tvar chain_length = max_chain_length; // max hash chain length                                                       // 7464\n\t\t\tvar scan = strstart; // current string                                                                              // 7465\n\t\t\tvar match; // matched string                                                                                        // 7466\n\t\t\tvar len; // length of current match                                                                                 // 7467\n\t\t\tvar best_len = prev_length; // best match length so far                                                             // 7468\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;                          // 7469\n\t\t\tvar _nice_match = nice_match;                                                                                       // 7470\n                                                                                                                       // 7471\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,                                                      // 7472\n\t\t\t// we prevent matches with the string of window index 0.                                                            // 7473\n                                                                                                                       // 7474\n\t\t\tvar wmask = w_mask;                                                                                                 // 7475\n                                                                                                                       // 7476\n\t\t\tvar strend = strstart + MAX_MATCH;                                                                                  // 7477\n\t\t\tvar scan_end1 = window[scan + best_len - 1];                                                                        // 7478\n\t\t\tvar scan_end = window[scan + best_len];                                                                             // 7479\n                                                                                                                       // 7480\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of                                             // 7481\n\t\t\t// 16.                                                                                                              // 7482\n\t\t\t// It is easy to get rid of this optimization if necessary.                                                         // 7483\n                                                                                                                       // 7484\n\t\t\t// Do not waste too much time if we already have a good match:                                                      // 7485\n\t\t\tif (prev_length >= good_match) {                                                                                    // 7486\n\t\t\t\tchain_length >>= 2;                                                                                                // 7487\n\t\t\t}                                                                                                                   // 7488\n                                                                                                                       // 7489\n\t\t\t// Do not look for matches beyond the end of the input. This is                                                     // 7490\n\t\t\t// necessary                                                                                                        // 7491\n\t\t\t// to make deflate deterministic.                                                                                   // 7492\n\t\t\tif (_nice_match > lookahead)                                                                                        // 7493\n\t\t\t\t_nice_match = lookahead;                                                                                           // 7494\n                                                                                                                       // 7495\n\t\t\tdo {                                                                                                                // 7496\n\t\t\t\tmatch = cur_match;                                                                                                 // 7497\n                                                                                                                       // 7498\n\t\t\t\t// Skip to next match if the match length cannot increase                                                          // 7499\n\t\t\t\t// or if the match length is less than 2:                                                                          // 7500\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])                                                                          // 7502\n\t\t\t\t\tcontinue;                                                                                                         // 7503\n                                                                                                                       // 7504\n\t\t\t\t// The check at best_len-1 can be removed because it will be made                                                  // 7505\n\t\t\t\t// again later. (This heuristic is not always a win.)                                                              // 7506\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they                                                  // 7507\n\t\t\t\t// are always equal when the other bytes match, given that                                                         // 7508\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.                                                                // 7509\n\t\t\t\tscan += 2;                                                                                                         // 7510\n\t\t\t\tmatch++;                                                                                                           // 7511\n                                                                                                                       // 7512\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;                                                  // 7513\n\t\t\t\t// the 256th check will be made at strstart+258.                                                                   // 7514\n\t\t\t\tdo {                                                                                                               // 7515\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]   // 7517\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);                     // 7518\n                                                                                                                       // 7519\n\t\t\t\tlen = MAX_MATCH - (strend - scan);                                                                                 // 7520\n\t\t\t\tscan = strend - MAX_MATCH;                                                                                         // 7521\n                                                                                                                       // 7522\n\t\t\t\tif (len > best_len) {                                                                                              // 7523\n\t\t\t\t\tmatch_start = cur_match;                                                                                          // 7524\n\t\t\t\t\tbest_len = len;                                                                                                   // 7525\n\t\t\t\t\tif (len >= _nice_match)                                                                                           // 7526\n\t\t\t\t\t\tbreak;                                                                                                           // 7527\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];                                                                          // 7528\n\t\t\t\t\tscan_end = window[scan + best_len];                                                                               // 7529\n\t\t\t\t}                                                                                                                  // 7530\n                                                                                                                       // 7531\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);                         // 7532\n                                                                                                                       // 7533\n\t\t\tif (best_len <= lookahead)                                                                                          // 7534\n\t\t\t\treturn best_len;                                                                                                   // 7535\n\t\t\treturn lookahead;                                                                                                   // 7536\n\t\t}                                                                                                                    // 7537\n                                                                                                                       // 7538\n\t\t// Compress as much as possible from the input stream, return the current                                            // 7539\n\t\t// block state.                                                                                                      // 7540\n\t\t// This function does not perform lazy evaluation of matches and inserts                                             // 7541\n\t\t// new strings in the dictionary only for unmatched strings or for short                                             // 7542\n\t\t// matches. It is used only for the fast compression options.                                                        // 7543\n\t\tfunction deflate_fast(flush) {                                                                                       // 7544\n\t\t\t// short hash_head = 0; // head of the hash chain                                                                   // 7545\n\t\t\tvar hash_head = 0; // head of the hash chain                                                                        // 7546\n\t\t\tvar bflush; // set if current block must be flushed                                                                 // 7547\n                                                                                                                       // 7548\n\t\t\twhile (true) {                                                                                                      // 7549\n\t\t\t\t// Make sure that we always have enough lookahead, except                                                          // 7550\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes                                                           // 7551\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the                                                          // 7552\n\t\t\t\t// string following the next match.                                                                                // 7553\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {                                                                                   // 7554\n\t\t\t\t\tfill_window();                                                                                                    // 7555\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {                                                           // 7556\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7557\n\t\t\t\t\t}                                                                                                                 // 7558\n\t\t\t\t\tif (lookahead === 0)                                                                                              // 7559\n\t\t\t\t\t\tbreak; // flush the current block                                                                                // 7560\n\t\t\t\t}                                                                                                                  // 7561\n                                                                                                                       // 7562\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the                                                         // 7563\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:                                                    // 7564\n\t\t\t\tif (lookahead >= MIN_MATCH) {                                                                                      // 7565\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;                    // 7566\n                                                                                                                       // 7567\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];                                                                   // 7568\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);                                                                               // 7569\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];                                                                            // 7570\n\t\t\t\t\thead[ins_h] = strstart;                                                                                           // 7571\n\t\t\t\t}                                                                                                                  // 7572\n                                                                                                                       // 7573\n\t\t\t\t// Find the longest match, discarding those <= prev_length.                                                        // 7574\n\t\t\t\t// At this point we have always match_length < MIN_MATCH                                                           // 7575\n                                                                                                                       // 7576\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {                              // 7577\n\t\t\t\t\t// To simplify the code, we prevent matches with the string                                                       // 7578\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match                                                      // 7579\n\t\t\t\t\t// of the string with itself at the start of the input file).                                                     // 7580\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {                                                                                 // 7581\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);                                                                         // 7582\n\t\t\t\t\t}                                                                                                                 // 7583\n\t\t\t\t\t// longest_match() sets match_start                                                                               // 7584\n\t\t\t\t}                                                                                                                  // 7585\n\t\t\t\tif (match_length >= MIN_MATCH) {                                                                                   // 7586\n\t\t\t\t\t// check_match(strstart, match_start, match_length);                                                              // 7587\n                                                                                                                       // 7588\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);                                             // 7589\n                                                                                                                       // 7590\n\t\t\t\t\tlookahead -= match_length;                                                                                        // 7591\n                                                                                                                       // 7592\n\t\t\t\t\t// Insert new strings in the hash table only if the match length                                                  // 7593\n\t\t\t\t\t// is not too large. This saves time but degrades compression.                                                    // 7594\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {                                                   // 7595\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table                                                      // 7596\n\t\t\t\t\t\tdo {                                                                                                             // 7597\n\t\t\t\t\t\t\tstrstart++;                                                                                                     // 7598\n                                                                                                                       // 7599\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;                    // 7600\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];                                                                 // 7601\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);                                                                             // 7602\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];                                                                          // 7603\n\t\t\t\t\t\t\thead[ins_h] = strstart;                                                                                         // 7604\n                                                                                                                       // 7605\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are                                                         // 7606\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.                                                                                // 7607\n\t\t\t\t\t\t} while (--match_length !== 0);                                                                                  // 7608\n\t\t\t\t\t\tstrstart++;                                                                                                      // 7609\n\t\t\t\t\t} else {                                                                                                          // 7610\n\t\t\t\t\t\tstrstart += match_length;                                                                                        // 7611\n\t\t\t\t\t\tmatch_length = 0;                                                                                                // 7612\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;                                                                                 // 7613\n                                                                                                                       // 7614\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;                                   // 7615\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does                                                       // 7616\n\t\t\t\t\t\t// not                                                                                                           // 7617\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.                                                      // 7618\n\t\t\t\t\t}                                                                                                                 // 7619\n\t\t\t\t} else {                                                                                                           // 7620\n\t\t\t\t\t// No match, output a literal byte                                                                                // 7621\n                                                                                                                       // 7622\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);                                                                   // 7623\n\t\t\t\t\tlookahead--;                                                                                                      // 7624\n\t\t\t\t\tstrstart++;                                                                                                       // 7625\n\t\t\t\t}                                                                                                                  // 7626\n\t\t\t\tif (bflush) {                                                                                                      // 7627\n                                                                                                                       // 7628\n\t\t\t\t\tflush_block_only(false);                                                                                          // 7629\n\t\t\t\t\tif (strm.avail_out === 0)                                                                                         // 7630\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7631\n\t\t\t\t}                                                                                                                  // 7632\n\t\t\t}                                                                                                                   // 7633\n                                                                                                                       // 7634\n\t\t\tflush_block_only(flush == Z_FINISH);                                                                                // 7635\n\t\t\tif (strm.avail_out === 0) {                                                                                         // 7636\n\t\t\t\tif (flush == Z_FINISH)                                                                                             // 7637\n\t\t\t\t\treturn FinishStarted;                                                                                             // 7638\n\t\t\t\telse                                                                                                               // 7639\n\t\t\t\t\treturn NeedMore;                                                                                                  // 7640\n\t\t\t}                                                                                                                   // 7641\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;                                                                  // 7642\n\t\t}                                                                                                                    // 7643\n                                                                                                                       // 7644\n\t\t// Same as above, but achieves better compression. We use a lazy                                                     // 7645\n\t\t// evaluation for matches: a match is finally adopted only if there is                                               // 7646\n\t\t// no better match at the next window position.                                                                      // 7647\n\t\tfunction deflate_slow(flush) {                                                                                       // 7648\n\t\t\t// short hash_head = 0; // head of hash chain                                                                       // 7649\n\t\t\tvar hash_head = 0; // head of hash chain                                                                            // 7650\n\t\t\tvar bflush; // set if current block must be flushed                                                                 // 7651\n\t\t\tvar max_insert;                                                                                                     // 7652\n                                                                                                                       // 7653\n\t\t\t// Process the input block.                                                                                         // 7654\n\t\t\twhile (true) {                                                                                                      // 7655\n\t\t\t\t// Make sure that we always have enough lookahead, except                                                          // 7656\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes                                                           // 7657\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the                                                          // 7658\n\t\t\t\t// string following the next match.                                                                                // 7659\n                                                                                                                       // 7660\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {                                                                                   // 7661\n\t\t\t\t\tfill_window();                                                                                                    // 7662\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {                                                           // 7663\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7664\n\t\t\t\t\t}                                                                                                                 // 7665\n\t\t\t\t\tif (lookahead === 0)                                                                                              // 7666\n\t\t\t\t\t\tbreak; // flush the current block                                                                                // 7667\n\t\t\t\t}                                                                                                                  // 7668\n                                                                                                                       // 7669\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the                                                         // 7670\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:                                                    // 7671\n                                                                                                                       // 7672\n\t\t\t\tif (lookahead >= MIN_MATCH) {                                                                                      // 7673\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;                    // 7674\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];                                                                   // 7675\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);                                                                               // 7676\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];                                                                            // 7677\n\t\t\t\t\thead[ins_h] = strstart;                                                                                           // 7678\n\t\t\t\t}                                                                                                                  // 7679\n                                                                                                                       // 7680\n\t\t\t\t// Find the longest match, discarding those <= prev_length.                                                        // 7681\n\t\t\t\tprev_length = match_length;                                                                                        // 7682\n\t\t\t\tprev_match = match_start;                                                                                          // 7683\n\t\t\t\tmatch_length = MIN_MATCH - 1;                                                                                      // 7684\n                                                                                                                       // 7685\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string                                                       // 7687\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match                                                      // 7688\n\t\t\t\t\t// of the string with itself at the start of the input file).                                                     // 7689\n                                                                                                                       // 7690\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {                                                                                 // 7691\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);                                                                         // 7692\n\t\t\t\t\t}                                                                                                                 // 7693\n\t\t\t\t\t// longest_match() sets match_start                                                                               // 7694\n                                                                                                                       // 7695\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\n                                                                                                                       // 7697\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage                                                       // 7698\n\t\t\t\t\t\t// but we will ignore the current match anyway.                                                                  // 7699\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;                                                                                    // 7700\n\t\t\t\t\t}                                                                                                                 // 7701\n\t\t\t\t}                                                                                                                  // 7702\n                                                                                                                       // 7703\n\t\t\t\t// If there was a match at the previous step and the current                                                       // 7704\n\t\t\t\t// match is not better, output the previous match:                                                                 // 7705\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {                                                     // 7706\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;                                                                    // 7707\n\t\t\t\t\t// Do not insert strings in hash table beyond this.                                                               // 7708\n                                                                                                                       // 7709\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);                                                              // 7710\n                                                                                                                       // 7711\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);                                           // 7712\n                                                                                                                       // 7713\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.                                                   // 7714\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not                                                  // 7715\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in                                                     // 7716\n\t\t\t\t\t// the hash table.                                                                                                // 7717\n\t\t\t\t\tlookahead -= prev_length - 1;                                                                                     // 7718\n\t\t\t\t\tprev_length -= 2;                                                                                                 // 7719\n\t\t\t\t\tdo {                                                                                                              // 7720\n\t\t\t\t\t\tif (++strstart <= max_insert) {                                                                                  // 7721\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;                  // 7722\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];                                                                 // 7723\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);                                                                             // 7724\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];                                                                          // 7725\n\t\t\t\t\t\t\thead[ins_h] = strstart;                                                                                         // 7726\n\t\t\t\t\t\t}                                                                                                                // 7727\n\t\t\t\t\t} while (--prev_length !== 0);                                                                                    // 7728\n\t\t\t\t\tmatch_available = 0;                                                                                              // 7729\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;                                                                                     // 7730\n\t\t\t\t\tstrstart++;                                                                                                       // 7731\n                                                                                                                       // 7732\n\t\t\t\t\tif (bflush) {                                                                                                     // 7733\n\t\t\t\t\t\tflush_block_only(false);                                                                                         // 7734\n\t\t\t\t\t\tif (strm.avail_out === 0)                                                                                        // 7735\n\t\t\t\t\t\t\treturn NeedMore;                                                                                                // 7736\n\t\t\t\t\t}                                                                                                                 // 7737\n\t\t\t\t} else if (match_available !== 0) {                                                                                // 7738\n                                                                                                                       // 7739\n\t\t\t\t\t// If there was no match at the previous position, output a                                                       // 7740\n\t\t\t\t\t// single literal. If there was a match but the current match                                                     // 7741\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.                                                    // 7742\n                                                                                                                       // 7743\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);                                                               // 7744\n                                                                                                                       // 7745\n\t\t\t\t\tif (bflush) {                                                                                                     // 7746\n\t\t\t\t\t\tflush_block_only(false);                                                                                         // 7747\n\t\t\t\t\t}                                                                                                                 // 7748\n\t\t\t\t\tstrstart++;                                                                                                       // 7749\n\t\t\t\t\tlookahead--;                                                                                                      // 7750\n\t\t\t\t\tif (strm.avail_out === 0)                                                                                         // 7751\n\t\t\t\t\t\treturn NeedMore;                                                                                                 // 7752\n\t\t\t\t} else {                                                                                                           // 7753\n\t\t\t\t\t// There is no previous match to compare with, wait for                                                           // 7754\n\t\t\t\t\t// the next step to decide.                                                                                       // 7755\n                                                                                                                       // 7756\n\t\t\t\t\tmatch_available = 1;                                                                                              // 7757\n\t\t\t\t\tstrstart++;                                                                                                       // 7758\n\t\t\t\t\tlookahead--;                                                                                                      // 7759\n\t\t\t\t}                                                                                                                  // 7760\n\t\t\t}                                                                                                                   // 7761\n                                                                                                                       // 7762\n\t\t\tif (match_available !== 0) {                                                                                        // 7763\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);                                                                // 7764\n\t\t\t\tmatch_available = 0;                                                                                               // 7765\n\t\t\t}                                                                                                                   // 7766\n\t\t\tflush_block_only(flush == Z_FINISH);                                                                                // 7767\n                                                                                                                       // 7768\n\t\t\tif (strm.avail_out === 0) {                                                                                         // 7769\n\t\t\t\tif (flush == Z_FINISH)                                                                                             // 7770\n\t\t\t\t\treturn FinishStarted;                                                                                             // 7771\n\t\t\t\telse                                                                                                               // 7772\n\t\t\t\t\treturn NeedMore;                                                                                                  // 7773\n\t\t\t}                                                                                                                   // 7774\n                                                                                                                       // 7775\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;                                                                  // 7776\n\t\t}                                                                                                                    // 7777\n                                                                                                                       // 7778\n\t\tfunction deflateReset(strm) {                                                                                        // 7779\n\t\t\tstrm.total_in = strm.total_out = 0;                                                                                 // 7780\n\t\t\tstrm.msg = null; //                                                                                                 // 7781\n\t\t\t                                                                                                                    // 7782\n\t\t\tthat.pending = 0;                                                                                                   // 7783\n\t\t\tthat.pending_out = 0;                                                                                               // 7784\n                                                                                                                       // 7785\n\t\t\tstatus = BUSY_STATE;                                                                                                // 7786\n                                                                                                                       // 7787\n\t\t\tlast_flush = Z_NO_FLUSH;                                                                                            // 7788\n                                                                                                                       // 7789\n\t\t\ttr_init();                                                                                                          // 7790\n\t\t\tlm_init();                                                                                                          // 7791\n\t\t\treturn Z_OK;                                                                                                        // 7792\n\t\t}                                                                                                                    // 7793\n                                                                                                                       // 7794\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {                                      // 7795\n\t\t\tif (!_method)                                                                                                       // 7796\n\t\t\t\t_method = Z_DEFLATED;                                                                                              // 7797\n\t\t\tif (!memLevel)                                                                                                      // 7798\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;                                                                                          // 7799\n\t\t\tif (!_strategy)                                                                                                     // 7800\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;                                                                                    // 7801\n                                                                                                                       // 7802\n\t\t\t// byte[] my_version=ZLIB_VERSION;                                                                                  // 7803\n                                                                                                                       // 7804\n\t\t\t//                                                                                                                  // 7805\n\t\t\t// if (!version || version[0] != my_version[0]                                                                      // 7806\n\t\t\t// || stream_size != sizeof(z_stream)) {                                                                            // 7807\n\t\t\t// return Z_VERSION_ERROR;                                                                                          // 7808\n\t\t\t// }                                                                                                                // 7809\n                                                                                                                       // 7810\n\t\t\tstrm.msg = null;                                                                                                    // 7811\n                                                                                                                       // 7812\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)                                                                                // 7813\n\t\t\t\t_level = 6;                                                                                                        // 7814\n                                                                                                                       // 7815\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {                                                                                  // 7817\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 7818\n\t\t\t}                                                                                                                   // 7819\n                                                                                                                       // 7820\n\t\t\tstrm.dstate = that;                                                                                                 // 7821\n                                                                                                                       // 7822\n\t\t\tw_bits = bits;                                                                                                      // 7823\n\t\t\tw_size = 1 << w_bits;                                                                                               // 7824\n\t\t\tw_mask = w_size - 1;                                                                                                // 7825\n                                                                                                                       // 7826\n\t\t\thash_bits = memLevel + 7;                                                                                           // 7827\n\t\t\thash_size = 1 << hash_bits;                                                                                         // 7828\n\t\t\thash_mask = hash_size - 1;                                                                                          // 7829\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);                                                   // 7830\n                                                                                                                       // 7831\n\t\t\twindow = new Uint8Array(w_size * 2);                                                                                // 7832\n\t\t\tprev = [];                                                                                                          // 7833\n\t\t\thead = [];                                                                                                          // 7834\n                                                                                                                       // 7835\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default                                                       // 7836\n                                                                                                                       // 7837\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average                                             // 7838\n\t\t\t// output size for (length,distance) codes is <= 24 bits.                                                           // 7839\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);                                                                 // 7840\n\t\t\tpending_buf_size = lit_bufsize * 4;                                                                                 // 7841\n                                                                                                                       // 7842\n\t\t\td_buf = Math.floor(lit_bufsize / 2);                                                                                // 7843\n\t\t\tl_buf = (1 + 2) * lit_bufsize;                                                                                      // 7844\n                                                                                                                       // 7845\n\t\t\tlevel = _level;                                                                                                     // 7846\n                                                                                                                       // 7847\n\t\t\tstrategy = _strategy;                                                                                               // 7848\n\t\t\tmethod = _method & 0xff;                                                                                            // 7849\n                                                                                                                       // 7850\n\t\t\treturn deflateReset(strm);                                                                                          // 7851\n\t\t};                                                                                                                   // 7852\n                                                                                                                       // 7853\n\t\tthat.deflateEnd = function() {                                                                                       // 7854\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {                                       // 7855\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 7856\n\t\t\t}                                                                                                                   // 7857\n\t\t\t// Deallocate in reverse order of allocations:                                                                      // 7858\n\t\t\tthat.pending_buf = null;                                                                                            // 7859\n\t\t\thead = null;                                                                                                        // 7860\n\t\t\tprev = null;                                                                                                        // 7861\n\t\t\twindow = null;                                                                                                      // 7862\n\t\t\t// free                                                                                                             // 7863\n\t\t\tthat.dstate = null;                                                                                                 // 7864\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;                                                                  // 7865\n\t\t};                                                                                                                   // 7866\n                                                                                                                       // 7867\n\t\tthat.deflateParams = function(strm, _level, _strategy) {                                                             // 7868\n\t\t\tvar err = Z_OK;                                                                                                     // 7869\n                                                                                                                       // 7870\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {                                                                              // 7871\n\t\t\t\t_level = 6;                                                                                                        // 7872\n\t\t\t}                                                                                                                   // 7873\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {                                      // 7874\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 7875\n\t\t\t}                                                                                                                   // 7876\n                                                                                                                       // 7877\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {                                 // 7878\n\t\t\t\t// Flush the last buffer:                                                                                          // 7879\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);                                                                               // 7880\n\t\t\t}                                                                                                                   // 7881\n                                                                                                                       // 7882\n\t\t\tif (level != _level) {                                                                                              // 7883\n\t\t\t\tlevel = _level;                                                                                                    // 7884\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;                                                                     // 7885\n\t\t\t\tgood_match = config_table[level].good_length;                                                                      // 7886\n\t\t\t\tnice_match = config_table[level].nice_length;                                                                      // 7887\n\t\t\t\tmax_chain_length = config_table[level].max_chain;                                                                  // 7888\n\t\t\t}                                                                                                                   // 7889\n\t\t\tstrategy = _strategy;                                                                                               // 7890\n\t\t\treturn err;                                                                                                         // 7891\n\t\t};                                                                                                                   // 7892\n                                                                                                                       // 7893\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {                                                 // 7894\n\t\t\tvar length = dictLength;                                                                                            // 7895\n\t\t\tvar n, index = 0;                                                                                                   // 7896\n                                                                                                                       // 7897\n\t\t\tif (!dictionary || status != INIT_STATE)                                                                            // 7898\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 7899\n                                                                                                                       // 7900\n\t\t\tif (length < MIN_MATCH)                                                                                             // 7901\n\t\t\t\treturn Z_OK;                                                                                                       // 7902\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {                                                                              // 7903\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;                                                                                   // 7904\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary                                                     // 7905\n\t\t\t}                                                                                                                   // 7906\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);                                                          // 7907\n                                                                                                                       // 7908\n\t\t\tstrstart = length;                                                                                                  // 7909\n\t\t\tblock_start = length;                                                                                               // 7910\n                                                                                                                       // 7911\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).                                            // 7912\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next                                              // 7913\n\t\t\t// call of fill_window.                                                                                             // 7914\n                                                                                                                       // 7915\n\t\t\tins_h = window[0] & 0xff;                                                                                           // 7916\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;                                                 // 7917\n                                                                                                                       // 7918\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {                                                                         // 7919\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;                            // 7920\n\t\t\t\tprev[n & w_mask] = head[ins_h];                                                                                    // 7921\n\t\t\t\thead[ins_h] = n;                                                                                                   // 7922\n\t\t\t}                                                                                                                   // 7923\n\t\t\treturn Z_OK;                                                                                                        // 7924\n\t\t};                                                                                                                   // 7925\n                                                                                                                       // 7926\n\t\tthat.deflate = function(_strm, flush) {                                                                              // 7927\n\t\t\tvar i, header, level_flags, old_flush, bstate;                                                                      // 7928\n                                                                                                                       // 7929\n\t\t\tif (flush > Z_FINISH || flush < 0) {                                                                                // 7930\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 7931\n\t\t\t}                                                                                                                   // 7932\n                                                                                                                       // 7933\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) { // 7934\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];                                                              // 7935\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 7936\n\t\t\t}                                                                                                                   // 7937\n\t\t\tif (_strm.avail_out === 0) {                                                                                        // 7938\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];                                                                 // 7939\n\t\t\t\treturn Z_BUF_ERROR;                                                                                                // 7940\n\t\t\t}                                                                                                                   // 7941\n                                                                                                                       // 7942\n\t\t\tstrm = _strm; // just in case                                                                                       // 7943\n\t\t\told_flush = last_flush;                                                                                             // 7944\n\t\t\tlast_flush = flush;                                                                                                 // 7945\n                                                                                                                       // 7946\n\t\t\t// Write the zlib header                                                                                            // 7947\n\t\t\tif (status == INIT_STATE) {                                                                                         // 7948\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;                                                                  // 7949\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;                                                                           // 7950\n                                                                                                                       // 7951\n\t\t\t\tif (level_flags > 3)                                                                                               // 7952\n\t\t\t\t\tlevel_flags = 3;                                                                                                  // 7953\n\t\t\t\theader |= (level_flags << 6);                                                                                      // 7954\n\t\t\t\tif (strstart !== 0)                                                                                                // 7955\n\t\t\t\t\theader |= PRESET_DICT;                                                                                            // 7956\n\t\t\t\theader += 31 - (header % 31);                                                                                      // 7957\n                                                                                                                       // 7958\n\t\t\t\tstatus = BUSY_STATE;                                                                                               // 7959\n\t\t\t\tputShortMSB(header);                                                                                               // 7960\n\t\t\t}                                                                                                                   // 7961\n                                                                                                                       // 7962\n\t\t\t// Flush as much pending output as possible                                                                         // 7963\n\t\t\tif (that.pending !== 0) {                                                                                           // 7964\n\t\t\t\tstrm.flush_pending();                                                                                              // 7965\n\t\t\t\tif (strm.avail_out === 0) {                                                                                        // 7966\n\t\t\t\t\t// console.log(\" avail_out==0\");                                                                                  // 7967\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with                                                        // 7968\n\t\t\t\t\t// more output space, but possibly with both pending and                                                          // 7969\n\t\t\t\t\t// avail_in equal to zero. There won't be anything to do,                                                         // 7970\n\t\t\t\t\t// but this is not an error situation so make sure we                                                             // 7971\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:                                                        // 7972\n\t\t\t\t\tlast_flush = -1;                                                                                                  // 7973\n\t\t\t\t\treturn Z_OK;                                                                                                      // 7974\n\t\t\t\t}                                                                                                                  // 7975\n                                                                                                                       // 7976\n\t\t\t\t// Make sure there is something to do and avoid duplicate                                                          // 7977\n\t\t\t\t// consecutive                                                                                                     // 7978\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep                                                  // 7979\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.                                                                 // 7980\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {                                        // 7981\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];                                                                  // 7982\n\t\t\t\treturn Z_BUF_ERROR;                                                                                                // 7983\n\t\t\t}                                                                                                                   // 7984\n                                                                                                                       // 7985\n\t\t\t// User must not provide more input after the first FINISH:                                                         // 7986\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {                                                                // 7987\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];                                                                 // 7988\n\t\t\t\treturn Z_BUF_ERROR;                                                                                                // 7989\n\t\t\t}                                                                                                                   // 7990\n                                                                                                                       // 7991\n\t\t\t// Start a new block or continue the current one.                                                                   // 7992\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {                    // 7993\n\t\t\t\tbstate = -1;                                                                                                       // 7994\n\t\t\t\tswitch (config_table[level].func) {                                                                                // 7995\n\t\t\t\tcase STORED:                                                                                                       // 7996\n\t\t\t\t\tbstate = deflate_stored(flush);                                                                                   // 7997\n\t\t\t\t\tbreak;                                                                                                            // 7998\n\t\t\t\tcase FAST:                                                                                                         // 7999\n\t\t\t\t\tbstate = deflate_fast(flush);                                                                                     // 8000\n\t\t\t\t\tbreak;                                                                                                            // 8001\n\t\t\t\tcase SLOW:                                                                                                         // 8002\n\t\t\t\t\tbstate = deflate_slow(flush);                                                                                     // 8003\n\t\t\t\t\tbreak;                                                                                                            // 8004\n\t\t\t\tdefault:                                                                                                           // 8005\n\t\t\t\t}                                                                                                                  // 8006\n                                                                                                                       // 8007\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {                                                             // 8008\n\t\t\t\t\tstatus = FINISH_STATE;                                                                                            // 8009\n\t\t\t\t}                                                                                                                  // 8010\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {                                                               // 8011\n\t\t\t\t\tif (strm.avail_out === 0) {                                                                                       // 8012\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above                                                         // 8013\n\t\t\t\t\t}                                                                                                                 // 8014\n\t\t\t\t\treturn Z_OK;                                                                                                      // 8015\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call                                                       // 8016\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure                                                    // 8017\n\t\t\t\t\t// that the flush is complete. So we don't have to output an                                                      // 8018\n\t\t\t\t\t// empty block here, this will be done at next call. This also                                                    // 8019\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most                                                   // 8020\n\t\t\t\t\t// one empty block.                                                                                               // 8021\n\t\t\t\t}                                                                                                                  // 8022\n                                                                                                                       // 8023\n\t\t\t\tif (bstate == BlockDone) {                                                                                         // 8024\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {                                                                                   // 8025\n\t\t\t\t\t\t_tr_align();                                                                                                     // 8026\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH                                                                              // 8027\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);                                                                                   // 8028\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized                                                         // 8029\n\t\t\t\t\t\t// as a special marker by inflate_sync().                                                                        // 8030\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {                                                                                     // 8031\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;                                                                                 // 8032\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)                                                                           // 8033\n\t\t\t\t\t\t\t\t// forget history                                                                                              // 8034\n\t\t\t\t\t\t\t\thead[i] = 0;                                                                                                   // 8035\n\t\t\t\t\t\t}                                                                                                                // 8036\n\t\t\t\t\t}                                                                                                                 // 8037\n\t\t\t\t\tstrm.flush_pending();                                                                                             // 8038\n\t\t\t\t\tif (strm.avail_out === 0) {                                                                                       // 8039\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above                                                      // 8040\n\t\t\t\t\t\treturn Z_OK;                                                                                                     // 8041\n\t\t\t\t\t}                                                                                                                 // 8042\n\t\t\t\t}                                                                                                                  // 8043\n\t\t\t}                                                                                                                   // 8044\n                                                                                                                       // 8045\n\t\t\tif (flush != Z_FINISH)                                                                                              // 8046\n\t\t\t\treturn Z_OK;                                                                                                       // 8047\n\t\t\treturn Z_STREAM_END;                                                                                                // 8048\n\t\t};                                                                                                                   // 8049\n\t}                                                                                                                     // 8050\n                                                                                                                       // 8051\n\t// ZStream                                                                                                            // 8052\n                                                                                                                       // 8053\n\tfunction ZStream() {                                                                                                  // 8054\n\t\tvar that = this;                                                                                                     // 8055\n\t\tthat.next_in_index = 0;                                                                                              // 8056\n\t\tthat.next_out_index = 0;                                                                                             // 8057\n\t\t// that.next_in; // next input byte                                                                                  // 8058\n\t\tthat.avail_in = 0; // number of bytes available at next_in                                                           // 8059\n\t\tthat.total_in = 0; // total nb of input bytes read so far                                                            // 8060\n\t\t// that.next_out; // next output byte should be put there                                                            // 8061\n\t\tthat.avail_out = 0; // remaining free space at next_out                                                              // 8062\n\t\tthat.total_out = 0; // total nb of bytes output so far                                                               // 8063\n\t\t// that.msg;                                                                                                         // 8064\n\t\t// that.dstate;                                                                                                      // 8065\n\t}                                                                                                                     // 8066\n                                                                                                                       // 8067\n\tZStream.prototype = {                                                                                                 // 8068\n\t\tdeflateInit : function(level, bits) {                                                                                // 8069\n\t\t\tvar that = this;                                                                                                    // 8070\n\t\t\tthat.dstate = new Deflate();                                                                                        // 8071\n\t\t\tif (!bits)                                                                                                          // 8072\n\t\t\t\tbits = MAX_BITS;                                                                                                   // 8073\n\t\t\treturn that.dstate.deflateInit(that, level, bits);                                                                  // 8074\n\t\t},                                                                                                                   // 8075\n                                                                                                                       // 8076\n\t\tdeflate : function(flush) {                                                                                          // 8077\n\t\t\tvar that = this;                                                                                                    // 8078\n\t\t\tif (!that.dstate) {                                                                                                 // 8079\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 8080\n\t\t\t}                                                                                                                   // 8081\n\t\t\treturn that.dstate.deflate(that, flush);                                                                            // 8082\n\t\t},                                                                                                                   // 8083\n                                                                                                                       // 8084\n\t\tdeflateEnd : function() {                                                                                            // 8085\n\t\t\tvar that = this;                                                                                                    // 8086\n\t\t\tif (!that.dstate)                                                                                                   // 8087\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 8088\n\t\t\tvar ret = that.dstate.deflateEnd();                                                                                 // 8089\n\t\t\tthat.dstate = null;                                                                                                 // 8090\n\t\t\treturn ret;                                                                                                         // 8091\n\t\t},                                                                                                                   // 8092\n                                                                                                                       // 8093\n\t\tdeflateParams : function(level, strategy) {                                                                          // 8094\n\t\t\tvar that = this;                                                                                                    // 8095\n\t\t\tif (!that.dstate)                                                                                                   // 8096\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 8097\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);                                                            // 8098\n\t\t},                                                                                                                   // 8099\n                                                                                                                       // 8100\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {                                                            // 8101\n\t\t\tvar that = this;                                                                                                    // 8102\n\t\t\tif (!that.dstate)                                                                                                   // 8103\n\t\t\t\treturn Z_STREAM_ERROR;                                                                                             // 8104\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);                                              // 8105\n\t\t},                                                                                                                   // 8106\n                                                                                                                       // 8107\n\t\t// Read a new buffer from the current input stream, update the                                                       // 8108\n\t\t// total number of bytes read. All deflate() input goes through                                                      // 8109\n\t\t// this function so some applications may wish to modify it to avoid                                                 // 8110\n\t\t// allocating a large strm->next_in buffer and copying from it.                                                      // 8111\n\t\t// (See also flush_pending()).                                                                                       // 8112\n\t\tread_buf : function(buf, start, size) {                                                                              // 8113\n\t\t\tvar that = this;                                                                                                    // 8114\n\t\t\tvar len = that.avail_in;                                                                                            // 8115\n\t\t\tif (len > size)                                                                                                     // 8116\n\t\t\t\tlen = size;                                                                                                        // 8117\n\t\t\tif (len === 0)                                                                                                      // 8118\n\t\t\t\treturn 0;                                                                                                          // 8119\n\t\t\tthat.avail_in -= len;                                                                                               // 8120\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);                                // 8121\n\t\t\tthat.next_in_index += len;                                                                                          // 8122\n\t\t\tthat.total_in += len;                                                                                               // 8123\n\t\t\treturn len;                                                                                                         // 8124\n\t\t},                                                                                                                   // 8125\n                                                                                                                       // 8126\n\t\t// Flush as much pending output as possible. All deflate() output goes                                               // 8127\n\t\t// through this function so some applications may wish to modify it                                                  // 8128\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.                                            // 8129\n\t\t// (See also read_buf()).                                                                                            // 8130\n\t\tflush_pending : function() {                                                                                         // 8131\n\t\t\tvar that = this;                                                                                                    // 8132\n\t\t\tvar len = that.dstate.pending;                                                                                      // 8133\n                                                                                                                       // 8134\n\t\t\tif (len > that.avail_out)                                                                                           // 8135\n\t\t\t\tlen = that.avail_out;                                                                                              // 8136\n\t\t\tif (len === 0)                                                                                                      // 8137\n\t\t\t\treturn;                                                                                                            // 8138\n                                                                                                                       // 8139\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index     // 8140\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n\t\t\t// len)) {                                                                                                          // 8142\n\t\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n\t\t\t// that.next_out_index + \", \" + len);                                                                               // 8144\n\t\t\t// console.log(\"avail_out=\" + that.avail_out);                                                                      // 8145\n\t\t\t// }                                                                                                                // 8146\n                                                                                                                       // 8147\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n                                                                                                                       // 8149\n\t\t\tthat.next_out_index += len;                                                                                         // 8150\n\t\t\tthat.dstate.pending_out += len;                                                                                     // 8151\n\t\t\tthat.total_out += len;                                                                                              // 8152\n\t\t\tthat.avail_out -= len;                                                                                              // 8153\n\t\t\tthat.dstate.pending -= len;                                                                                         // 8154\n\t\t\tif (that.dstate.pending === 0) {                                                                                    // 8155\n\t\t\t\tthat.dstate.pending_out = 0;                                                                                       // 8156\n\t\t\t}                                                                                                                   // 8157\n\t\t}                                                                                                                    // 8158\n\t};                                                                                                                    // 8159\n                                                                                                                       // 8160\n\t// Deflater                                                                                                           // 8161\n                                                                                                                       // 8162\n\treturn function Deflater(level) {                                                                                     // 8163\n\t\tvar that = this;                                                                                                     // 8164\n\t\tvar z = new ZStream();                                                                                               // 8165\n\t\tvar bufsize = 512;                                                                                                   // 8166\n\t\tvar flush = Z_NO_FLUSH;                                                                                              // 8167\n\t\tvar buf = new Uint8Array(bufsize);                                                                                   // 8168\n                                                                                                                       // 8169\n\t\tif (typeof level == \"undefined\")                                                                                     // 8170\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;                                                                                      // 8171\n\t\tz.deflateInit(level);                                                                                                // 8172\n\t\tz.next_out = buf;                                                                                                    // 8173\n                                                                                                                       // 8174\n\t\tthat.append = function(data, onprogress) {                                                                           // 8175\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;                                       // 8176\n\t\t\tif (!data.length)                                                                                                   // 8177\n\t\t\t\treturn;                                                                                                            // 8178\n\t\t\tz.next_in_index = 0;                                                                                                // 8179\n\t\t\tz.next_in = data;                                                                                                   // 8180\n\t\t\tz.avail_in = data.length;                                                                                           // 8181\n\t\t\tdo {                                                                                                                // 8182\n\t\t\t\tz.next_out_index = 0;                                                                                              // 8183\n\t\t\t\tz.avail_out = bufsize;                                                                                             // 8184\n\t\t\t\terr = z.deflate(flush);                                                                                            // 8185\n\t\t\t\tif (err != Z_OK)                                                                                                   // 8186\n\t\t\t\t\tthrow \"deflating: \" + z.msg;                                                                                      // 8187\n\t\t\t\tif (z.next_out_index)                                                                                              // 8188\n\t\t\t\t\tif (z.next_out_index == bufsize)                                                                                  // 8189\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));                                                                               // 8190\n\t\t\t\t\telse                                                                                                              // 8191\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));                                                 // 8192\n\t\t\t\tbufferSize += z.next_out_index;                                                                                    // 8193\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {                                           // 8194\n\t\t\t\t\tonprogress(z.next_in_index);                                                                                      // 8195\n\t\t\t\t\tlastIndex = z.next_in_index;                                                                                      // 8196\n\t\t\t\t}                                                                                                                  // 8197\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);                                                                      // 8198\n\t\t\tarray = new Uint8Array(bufferSize);                                                                                 // 8199\n\t\t\tbuffers.forEach(function(chunk) {                                                                                   // 8200\n\t\t\t\tarray.set(chunk, bufferIndex);                                                                                     // 8201\n\t\t\t\tbufferIndex += chunk.length;                                                                                       // 8202\n\t\t\t});                                                                                                                 // 8203\n\t\t\treturn array;                                                                                                       // 8204\n\t\t};                                                                                                                   // 8205\n\t\tthat.flush = function() {                                                                                            // 8206\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;                                                      // 8207\n\t\t\tdo {                                                                                                                // 8208\n\t\t\t\tz.next_out_index = 0;                                                                                              // 8209\n\t\t\t\tz.avail_out = bufsize;                                                                                             // 8210\n\t\t\t\terr = z.deflate(Z_FINISH);                                                                                         // 8211\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)                                                                            // 8212\n\t\t\t\t\tthrow \"deflating: \" + z.msg;                                                                                      // 8213\n\t\t\t\tif (bufsize - z.avail_out > 0)                                                                                     // 8214\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));                                                  // 8215\n\t\t\t\tbufferSize += z.next_out_index;                                                                                    // 8216\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);                                                                      // 8217\n\t\t\tz.deflateEnd();                                                                                                     // 8218\n\t\t\tarray = new Uint8Array(bufferSize);                                                                                 // 8219\n\t\t\tbuffers.forEach(function(chunk) {                                                                                   // 8220\n\t\t\t\tarray.set(chunk, bufferIndex);                                                                                     // 8221\n\t\t\t\tbufferIndex += chunk.length;                                                                                       // 8222\n\t\t\t});                                                                                                                 // 8223\n\t\t\treturn array;                                                                                                       // 8224\n\t\t};                                                                                                                   // 8225\n\t};                                                                                                                    // 8226\n})(this);                                                                                                              // 8227\n// Generated by CoffeeScript 1.4.0                                                                                     // 8228\n                                                                                                                       // 8229\n/*                                                                                                                     // 8230\n# PNG.js                                                                                                               // 8231\n# Copyright (c) 2011 Devon Govett                                                                                      // 8232\n# MIT LICENSE                                                                                                          // 8233\n#                                                                                                                      // 8234\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this                                 // 8235\n# software and associated documentation files (the \"Software\"), to deal in the Software                                // 8236\n# without restriction, including without limitation the rights to use, copy, modify, merge,                            // 8237\n# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons                           // 8238\n# to whom the Software is furnished to do so, subject to the following conditions:                                     // 8239\n#                                                                                                                      // 8240\n# The above copyright notice and this permission notice shall be included in all copies or                             // 8241\n# substantial portions of the Software.                                                                                // 8242\n#                                                                                                                      // 8243\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING                        // 8244\n# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                           // 8245\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                         // 8246\n# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                       // 8247\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                              // 8248\n*/                                                                                                                     // 8249\n                                                                                                                       // 8250\n                                                                                                                       // 8251\n(function(global) {                                                                                                    // 8252\n  var PNG;                                                                                                             // 8253\n                                                                                                                       // 8254\n  PNG = (function() {                                                                                                  // 8255\n    var APNG_BLEND_OP_OVER, APNG_BLEND_OP_SOURCE, APNG_DISPOSE_OP_BACKGROUND, APNG_DISPOSE_OP_NONE, APNG_DISPOSE_OP_PREVIOUS, makeImage, scratchCanvas, scratchCtx;\n                                                                                                                       // 8257\n    PNG.load = function(url, canvas, callback) {                                                                       // 8258\n      var xhr,                                                                                                         // 8259\n        _this = this;                                                                                                  // 8260\n      if (typeof canvas === 'function') {                                                                              // 8261\n        callback = canvas;                                                                                             // 8262\n      }                                                                                                                // 8263\n      xhr = new XMLHttpRequest;                                                                                        // 8264\n      xhr.open(\"GET\", url, true);                                                                                      // 8265\n      xhr.responseType = \"arraybuffer\";                                                                                // 8266\n      xhr.onload = function() {                                                                                        // 8267\n        var data, png;                                                                                                 // 8268\n        data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);                                             // 8269\n        png = new PNG(data);                                                                                           // 8270\n        if (typeof (canvas != null ? canvas.getContext : void 0) === 'function') {                                     // 8271\n          png.render(canvas);                                                                                          // 8272\n        }                                                                                                              // 8273\n        return typeof callback === \"function\" ? callback(png) : void 0;                                                // 8274\n      };                                                                                                               // 8275\n      return xhr.send(null);                                                                                           // 8276\n    };                                                                                                                 // 8277\n                                                                                                                       // 8278\n    APNG_DISPOSE_OP_NONE = 0;                                                                                          // 8279\n                                                                                                                       // 8280\n    APNG_DISPOSE_OP_BACKGROUND = 1;                                                                                    // 8281\n                                                                                                                       // 8282\n    APNG_DISPOSE_OP_PREVIOUS = 2;                                                                                      // 8283\n                                                                                                                       // 8284\n    APNG_BLEND_OP_SOURCE = 0;                                                                                          // 8285\n                                                                                                                       // 8286\n    APNG_BLEND_OP_OVER = 1;                                                                                            // 8287\n                                                                                                                       // 8288\n    function PNG(data) {                                                                                               // 8289\n      var chunkSize, colors, palLen, delayDen, delayNum, frame, i, index, key, section, palShort, text, _i, _j, _ref;  // 8290\n      this.data = data;                                                                                                // 8291\n      this.pos = 8;                                                                                                    // 8292\n      this.palette = [];                                                                                               // 8293\n      this.imgData = [];                                                                                               // 8294\n      this.transparency = {};                                                                                          // 8295\n      this.animation = null;                                                                                           // 8296\n      this.text = {};                                                                                                  // 8297\n      frame = null;                                                                                                    // 8298\n      while (true) {                                                                                                   // 8299\n        chunkSize = this.readUInt32();                                                                                 // 8300\n        section = ((function() {                                                                                       // 8301\n          var _i, _results;                                                                                            // 8302\n          _results = [];                                                                                               // 8303\n          for (i = _i = 0; _i < 4; i = ++_i) {                                                                         // 8304\n            _results.push(String.fromCharCode(this.data[this.pos++]));                                                 // 8305\n          }                                                                                                            // 8306\n          return _results;                                                                                             // 8307\n        }).call(this)).join('');                                                                                       // 8308\n        switch (section) {                                                                                             // 8309\n          case 'IHDR':                                                                                                 // 8310\n            this.width = this.readUInt32();                                                                            // 8311\n            this.height = this.readUInt32();                                                                           // 8312\n            this.bits = this.data[this.pos++];                                                                         // 8313\n            this.colorType = this.data[this.pos++];                                                                    // 8314\n            this.compressionMethod = this.data[this.pos++];                                                            // 8315\n            this.filterMethod = this.data[this.pos++];                                                                 // 8316\n            this.interlaceMethod = this.data[this.pos++];                                                              // 8317\n            break;                                                                                                     // 8318\n          case 'acTL':                                                                                                 // 8319\n            this.animation = {                                                                                         // 8320\n              numFrames: this.readUInt32(),                                                                            // 8321\n              numPlays: this.readUInt32() || Infinity,                                                                 // 8322\n              frames: []                                                                                               // 8323\n            };                                                                                                         // 8324\n            break;                                                                                                     // 8325\n          case 'PLTE':                                                                                                 // 8326\n            this.palette = this.read(chunkSize);                                                                       // 8327\n            break;                                                                                                     // 8328\n          case 'fcTL':                                                                                                 // 8329\n            if (frame) {                                                                                               // 8330\n              this.animation.frames.push(frame);                                                                       // 8331\n            }                                                                                                          // 8332\n            this.pos += 4;                                                                                             // 8333\n            frame = {                                                                                                  // 8334\n              width: this.readUInt32(),                                                                                // 8335\n              height: this.readUInt32(),                                                                               // 8336\n              xOffset: this.readUInt32(),                                                                              // 8337\n              yOffset: this.readUInt32()                                                                               // 8338\n            };                                                                                                         // 8339\n            delayNum = this.readUInt16();                                                                              // 8340\n            delayDen = this.readUInt16() || 100;                                                                       // 8341\n            frame.delay = 1000 * delayNum / delayDen;                                                                  // 8342\n            frame.disposeOp = this.data[this.pos++];                                                                   // 8343\n            frame.blendOp = this.data[this.pos++];                                                                     // 8344\n            frame.data = [];                                                                                           // 8345\n            break;                                                                                                     // 8346\n          case 'IDAT':                                                                                                 // 8347\n          case 'fdAT':                                                                                                 // 8348\n            if (section === 'fdAT') {                                                                                  // 8349\n              this.pos += 4;                                                                                           // 8350\n              chunkSize -= 4;                                                                                          // 8351\n            }                                                                                                          // 8352\n            data = (frame != null ? frame.data : void 0) || this.imgData;                                              // 8353\n            for (i = _i = 0; 0 <= chunkSize ? _i < chunkSize : _i > chunkSize; i = 0 <= chunkSize ? ++_i : --_i) {     // 8354\n              data.push(this.data[this.pos++]);                                                                        // 8355\n            }                                                                                                          // 8356\n            break;                                                                                                     // 8357\n          case 'tRNS':                                                                                                 // 8358\n            this.transparency = {};                                                                                    // 8359\n            switch (this.colorType) {                                                                                  // 8360\n              case 3:                                                                                                  // 8361\n            \tpalLen = this.palette.length/3;                                                                           // 8362\n                this.transparency.indexed = this.read(chunkSize);                                                      // 8363\n                if(this.transparency.indexed.length > palLen)                                                          // 8364\n                \tthrow new Error('More transparent colors than palette size');                                         // 8365\n                /*                                                                                                     // 8366\n                 * According to the PNG spec trns should be increased to the same size as palette if shorter           // 8367\n                 */                                                                                                    // 8368\n                //palShort = 255 - this.transparency.indexed.length;                                                   // 8369\n                palShort = palLen - this.transparency.indexed.length;                                                  // 8370\n                if (palShort > 0) {                                                                                    // 8371\n                  for (i = _j = 0; 0 <= palShort ? _j < palShort : _j > palShort; i = 0 <= palShort ? ++_j : --_j) {   // 8372\n                    this.transparency.indexed.push(255);                                                               // 8373\n                  }                                                                                                    // 8374\n                }                                                                                                      // 8375\n                break;                                                                                                 // 8376\n              case 0:                                                                                                  // 8377\n                this.transparency.grayscale = this.read(chunkSize)[0];                                                 // 8378\n                break;                                                                                                 // 8379\n              case 2:                                                                                                  // 8380\n                this.transparency.rgb = this.read(chunkSize);                                                          // 8381\n            }                                                                                                          // 8382\n            break;                                                                                                     // 8383\n          case 'tEXt':                                                                                                 // 8384\n            text = this.read(chunkSize);                                                                               // 8385\n            index = text.indexOf(0);                                                                                   // 8386\n            key = String.fromCharCode.apply(String, text.slice(0, index));                                             // 8387\n            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));                                 // 8388\n            break;                                                                                                     // 8389\n          case 'IEND':                                                                                                 // 8390\n            if (frame) {                                                                                               // 8391\n              this.animation.frames.push(frame);                                                                       // 8392\n            }                                                                                                          // 8393\n            this.colors = (function() {                                                                                // 8394\n              switch (this.colorType) {                                                                                // 8395\n                case 0:                                                                                                // 8396\n                case 3:                                                                                                // 8397\n                case 4:                                                                                                // 8398\n                  return 1;                                                                                            // 8399\n                case 2:                                                                                                // 8400\n                case 6:                                                                                                // 8401\n                  return 3;                                                                                            // 8402\n              }                                                                                                        // 8403\n            }).call(this);                                                                                             // 8404\n            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;                                        // 8405\n            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);                                                     // 8406\n            this.pixelBitlength = this.bits * colors;                                                                  // 8407\n            this.colorSpace = (function() {                                                                            // 8408\n              switch (this.colors) {                                                                                   // 8409\n                case 1:                                                                                                // 8410\n                  return 'DeviceGray';                                                                                 // 8411\n                case 3:                                                                                                // 8412\n                  return 'DeviceRGB';                                                                                  // 8413\n              }                                                                                                        // 8414\n            }).call(this);                                                                                             // 8415\n            this.imgData = new Uint8Array(this.imgData);                                                               // 8416\n            return;                                                                                                    // 8417\n          default:                                                                                                     // 8418\n            this.pos += chunkSize;                                                                                     // 8419\n        }                                                                                                              // 8420\n        this.pos += 4;                                                                                                 // 8421\n        if (this.pos > this.data.length) {                                                                             // 8422\n          throw new Error(\"Incomplete or corrupt PNG file\");                                                           // 8423\n        }                                                                                                              // 8424\n      }                                                                                                                // 8425\n      return;                                                                                                          // 8426\n    }                                                                                                                  // 8427\n                                                                                                                       // 8428\n    PNG.prototype.read = function(bytes) {                                                                             // 8429\n      var i, _i, _results;                                                                                             // 8430\n      _results = [];                                                                                                   // 8431\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {                           // 8432\n        _results.push(this.data[this.pos++]);                                                                          // 8433\n      }                                                                                                                // 8434\n      return _results;                                                                                                 // 8435\n    };                                                                                                                 // 8436\n                                                                                                                       // 8437\n    PNG.prototype.readUInt32 = function() {                                                                            // 8438\n      var b1, b2, b3, b4;                                                                                              // 8439\n      b1 = this.data[this.pos++] << 24;                                                                                // 8440\n      b2 = this.data[this.pos++] << 16;                                                                                // 8441\n      b3 = this.data[this.pos++] << 8;                                                                                 // 8442\n      b4 = this.data[this.pos++];                                                                                      // 8443\n      return b1 | b2 | b3 | b4;                                                                                        // 8444\n    };                                                                                                                 // 8445\n                                                                                                                       // 8446\n    PNG.prototype.readUInt16 = function() {                                                                            // 8447\n      var b1, b2;                                                                                                      // 8448\n      b1 = this.data[this.pos++] << 8;                                                                                 // 8449\n      b2 = this.data[this.pos++];                                                                                      // 8450\n      return b1 | b2;                                                                                                  // 8451\n    };                                                                                                                 // 8452\n                                                                                                                       // 8453\n    PNG.prototype.decodePixels = function(data) {                                                                      // 8454\n      var abyte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;\n      if (data == null) {                                                                                              // 8456\n        data = this.imgData;                                                                                           // 8457\n      }                                                                                                                // 8458\n      if (data.length === 0) {                                                                                         // 8459\n        return new Uint8Array(0);                                                                                      // 8460\n      }                                                                                                                // 8461\n      data = new FlateStream(data);                                                                                    // 8462\n      data = data.getBytes();                                                                                          // 8463\n      pixelBytes = this.pixelBitlength / 8;                                                                            // 8464\n      scanlineLength = pixelBytes * this.width;                                                                        // 8465\n      pixels = new Uint8Array(scanlineLength * this.height);                                                           // 8466\n      length = data.length;                                                                                            // 8467\n      row = 0;                                                                                                         // 8468\n      pos = 0;                                                                                                         // 8469\n      c = 0;                                                                                                           // 8470\n      while (pos < length) {                                                                                           // 8471\n        switch (data[pos++]) {                                                                                         // 8472\n          case 0:                                                                                                      // 8473\n            for (i = _i = 0; _i < scanlineLength; i = _i += 1) {                                                       // 8474\n              pixels[c++] = data[pos++];                                                                               // 8475\n            }                                                                                                          // 8476\n            break;                                                                                                     // 8477\n          case 1:                                                                                                      // 8478\n            for (i = _j = 0; _j < scanlineLength; i = _j += 1) {                                                       // 8479\n              abyte = data[pos++];                                                                                     // 8480\n              left = i < pixelBytes ? 0 : pixels[c - pixelBytes];                                                      // 8481\n              pixels[c++] = (abyte + left) % 256;                                                                      // 8482\n            }                                                                                                          // 8483\n            break;                                                                                                     // 8484\n          case 2:                                                                                                      // 8485\n            for (i = _k = 0; _k < scanlineLength; i = _k += 1) {                                                       // 8486\n              abyte = data[pos++];                                                                                     // 8487\n              col = (i - (i % pixelBytes)) / pixelBytes;                                                               // 8488\n              upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];                 // 8489\n              pixels[c++] = (upper + abyte) % 256;                                                                     // 8490\n            }                                                                                                          // 8491\n            break;                                                                                                     // 8492\n          case 3:                                                                                                      // 8493\n            for (i = _l = 0; _l < scanlineLength; i = _l += 1) {                                                       // 8494\n              abyte = data[pos++];                                                                                     // 8495\n              col = (i - (i % pixelBytes)) / pixelBytes;                                                               // 8496\n              left = i < pixelBytes ? 0 : pixels[c - pixelBytes];                                                      // 8497\n              upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];                 // 8498\n              pixels[c++] = (abyte + Math.floor((left + upper) / 2)) % 256;                                            // 8499\n            }                                                                                                          // 8500\n            break;                                                                                                     // 8501\n          case 4:                                                                                                      // 8502\n            for (i = _m = 0; _m < scanlineLength; i = _m += 1) {                                                       // 8503\n              abyte = data[pos++];                                                                                     // 8504\n              col = (i - (i % pixelBytes)) / pixelBytes;                                                               // 8505\n              left = i < pixelBytes ? 0 : pixels[c - pixelBytes];                                                      // 8506\n              if (row === 0) {                                                                                         // 8507\n                upper = upperLeft = 0;                                                                                 // 8508\n              } else {                                                                                                 // 8509\n                upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];                      // 8510\n                upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];     // 8511\n              }                                                                                                        // 8512\n              p = left + upper - upperLeft;                                                                            // 8513\n              pa = Math.abs(p - left);                                                                                 // 8514\n              pb = Math.abs(p - upper);                                                                                // 8515\n              pc = Math.abs(p - upperLeft);                                                                            // 8516\n              if (pa <= pb && pa <= pc) {                                                                              // 8517\n                paeth = left;                                                                                          // 8518\n              } else if (pb <= pc) {                                                                                   // 8519\n                paeth = upper;                                                                                         // 8520\n              } else {                                                                                                 // 8521\n                paeth = upperLeft;                                                                                     // 8522\n              }                                                                                                        // 8523\n              pixels[c++] = (abyte + paeth) % 256;                                                                     // 8524\n            }                                                                                                          // 8525\n            break;                                                                                                     // 8526\n          default:                                                                                                     // 8527\n            throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);                                             // 8528\n        }                                                                                                              // 8529\n        row++;                                                                                                         // 8530\n      }                                                                                                                // 8531\n      return pixels;                                                                                                   // 8532\n    };                                                                                                                 // 8533\n                                                                                                                       // 8534\n    PNG.prototype.decodePalette = function() {                                                                         // 8535\n      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;                                              // 8536\n      palette = this.palette;                                                                                          // 8537\n      transparency = this.transparency.indexed || [];                                                                  // 8538\n      ret = new Uint8Array((transparency.length || 0) + palette.length);                                               // 8539\n      pos = 0;                                                                                                         // 8540\n      length = palette.length;                                                                                         // 8541\n      c = 0;                                                                                                           // 8542\n      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {                                                // 8543\n        ret[pos++] = palette[i];                                                                                       // 8544\n        ret[pos++] = palette[i + 1];                                                                                   // 8545\n        ret[pos++] = palette[i + 2];                                                                                   // 8546\n        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;                                                // 8547\n      }                                                                                                                // 8548\n      return ret;                                                                                                      // 8549\n    };                                                                                                                 // 8550\n                                                                                                                       // 8551\n    PNG.prototype.copyToImageData = function(imageData, pixels) {                                                      // 8552\n      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;                                               // 8553\n      colors = this.colors;                                                                                            // 8554\n      palette = null;                                                                                                  // 8555\n      alpha = this.hasAlphaChannel;                                                                                    // 8556\n      if (this.palette.length) {                                                                                       // 8557\n        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();          // 8558\n        colors = 4;                                                                                                    // 8559\n        alpha = true;                                                                                                  // 8560\n      }                                                                                                                // 8561\n      data = imageData.data || imageData;                                                                              // 8562\n      length = data.length;                                                                                            // 8563\n      input = palette || pixels;                                                                                       // 8564\n      i = j = 0;                                                                                                       // 8565\n      if (colors === 1) {                                                                                              // 8566\n        while (i < length) {                                                                                           // 8567\n          k = palette ? pixels[i / 4] * 4 : j;                                                                         // 8568\n          v = input[k++];                                                                                              // 8569\n          data[i++] = v;                                                                                               // 8570\n          data[i++] = v;                                                                                               // 8571\n          data[i++] = v;                                                                                               // 8572\n          data[i++] = alpha ? input[k++] : 255;                                                                        // 8573\n          j = k;                                                                                                       // 8574\n        }                                                                                                              // 8575\n      } else {                                                                                                         // 8576\n        while (i < length) {                                                                                           // 8577\n          k = palette ? pixels[i / 4] * 4 : j;                                                                         // 8578\n          data[i++] = input[k++];                                                                                      // 8579\n          data[i++] = input[k++];                                                                                      // 8580\n          data[i++] = input[k++];                                                                                      // 8581\n          data[i++] = alpha ? input[k++] : 255;                                                                        // 8582\n          j = k;                                                                                                       // 8583\n        }                                                                                                              // 8584\n      }                                                                                                                // 8585\n    };                                                                                                                 // 8586\n                                                                                                                       // 8587\n    PNG.prototype.decode = function() {                                                                                // 8588\n      var ret;                                                                                                         // 8589\n      ret = new Uint8Array(this.width * this.height * 4);                                                              // 8590\n      this.copyToImageData(ret, this.decodePixels());                                                                  // 8591\n      return ret;                                                                                                      // 8592\n    };                                                                                                                 // 8593\n                                                                                                                       // 8594\n    try {                                                                                                              // 8595\n        scratchCanvas = global.document.createElement('canvas');                                                       // 8596\n        scratchCtx = scratchCanvas.getContext('2d');                                                                   // 8597\n    } catch(e) {                                                                                                       // 8598\n        return -1;                                                                                                     // 8599\n    }                                                                                                                  // 8600\n                                                                                                                       // 8601\n    makeImage = function(imageData) {                                                                                  // 8602\n      var img;                                                                                                         // 8603\n      scratchCtx.width = imageData.width;                                                                              // 8604\n      scratchCtx.height = imageData.height;                                                                            // 8605\n      scratchCtx.clearRect(0, 0, imageData.width, imageData.height);                                                   // 8606\n      scratchCtx.putImageData(imageData, 0, 0);                                                                        // 8607\n      img = new Image;                                                                                                 // 8608\n      img.src = scratchCanvas.toDataURL();                                                                             // 8609\n      return img;                                                                                                      // 8610\n    };                                                                                                                 // 8611\n                                                                                                                       // 8612\n    PNG.prototype.decodeFrames = function(ctx) {                                                                       // 8613\n      var frame, i, imageData, pixels, _i, _len, _ref, _results;                                                       // 8614\n      if (!this.animation) {                                                                                           // 8615\n        return;                                                                                                        // 8616\n      }                                                                                                                // 8617\n      _ref = this.animation.frames;                                                                                    // 8618\n      _results = [];                                                                                                   // 8619\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {                                                      // 8620\n        frame = _ref[i];                                                                                               // 8621\n        imageData = ctx.createImageData(frame.width, frame.height);                                                    // 8622\n        pixels = this.decodePixels(new Uint8Array(frame.data));                                                        // 8623\n        this.copyToImageData(imageData, pixels);                                                                       // 8624\n        frame.imageData = imageData;                                                                                   // 8625\n        _results.push(frame.image = makeImage(imageData));                                                             // 8626\n      }                                                                                                                // 8627\n      return _results;                                                                                                 // 8628\n    };                                                                                                                 // 8629\n                                                                                                                       // 8630\n    PNG.prototype.renderFrame = function(ctx, number) {                                                                // 8631\n      var frame, frames, prev;                                                                                         // 8632\n      frames = this.animation.frames;                                                                                  // 8633\n      frame = frames[number];                                                                                          // 8634\n      prev = frames[number - 1];                                                                                       // 8635\n      if (number === 0) {                                                                                              // 8636\n        ctx.clearRect(0, 0, this.width, this.height);                                                                  // 8637\n      }                                                                                                                // 8638\n      if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_BACKGROUND) {                                   // 8639\n        ctx.clearRect(prev.xOffset, prev.yOffset, prev.width, prev.height);                                            // 8640\n      } else if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_PREVIOUS) {                              // 8641\n        ctx.putImageData(prev.imageData, prev.xOffset, prev.yOffset);                                                  // 8642\n      }                                                                                                                // 8643\n      if (frame.blendOp === APNG_BLEND_OP_SOURCE) {                                                                    // 8644\n        ctx.clearRect(frame.xOffset, frame.yOffset, frame.width, frame.height);                                        // 8645\n      }                                                                                                                // 8646\n      return ctx.drawImage(frame.image, frame.xOffset, frame.yOffset);                                                 // 8647\n    };                                                                                                                 // 8648\n                                                                                                                       // 8649\n    PNG.prototype.animate = function(ctx) {                                                                            // 8650\n      var doFrame, frameNumber, frames, numFrames, numPlays, _ref,                                                     // 8651\n        _this = this;                                                                                                  // 8652\n      frameNumber = 0;                                                                                                 // 8653\n      _ref = this.animation, numFrames = _ref.numFrames, frames = _ref.frames, numPlays = _ref.numPlays;               // 8654\n      return (doFrame = function() {                                                                                   // 8655\n        var f, frame;                                                                                                  // 8656\n        f = frameNumber++ % numFrames;                                                                                 // 8657\n        frame = frames[f];                                                                                             // 8658\n        _this.renderFrame(ctx, f);                                                                                     // 8659\n        if (numFrames > 1 && frameNumber / numFrames < numPlays) {                                                     // 8660\n          return _this.animation._timeout = setTimeout(doFrame, frame.delay);                                          // 8661\n        }                                                                                                              // 8662\n      })();                                                                                                            // 8663\n    };                                                                                                                 // 8664\n                                                                                                                       // 8665\n    PNG.prototype.stopAnimation = function() {                                                                         // 8666\n      var _ref;                                                                                                        // 8667\n      return clearTimeout((_ref = this.animation) != null ? _ref._timeout : void 0);                                   // 8668\n    };                                                                                                                 // 8669\n                                                                                                                       // 8670\n    PNG.prototype.render = function(canvas) {                                                                          // 8671\n      var ctx, data;                                                                                                   // 8672\n      if (canvas._png) {                                                                                               // 8673\n        canvas._png.stopAnimation();                                                                                   // 8674\n      }                                                                                                                // 8675\n      canvas._png = this;                                                                                              // 8676\n      canvas.width = this.width;                                                                                       // 8677\n      canvas.height = this.height;                                                                                     // 8678\n      ctx = canvas.getContext(\"2d\");                                                                                   // 8679\n      if (this.animation) {                                                                                            // 8680\n        this.decodeFrames(ctx);                                                                                        // 8681\n        return this.animate(ctx);                                                                                      // 8682\n      } else {                                                                                                         // 8683\n        data = ctx.createImageData(this.width, this.height);                                                           // 8684\n        this.copyToImageData(data, this.decodePixels());                                                               // 8685\n        return ctx.putImageData(data, 0, 0);                                                                           // 8686\n      }                                                                                                                // 8687\n    };                                                                                                                 // 8688\n                                                                                                                       // 8689\n    return PNG;                                                                                                        // 8690\n                                                                                                                       // 8691\n  })();                                                                                                                // 8692\n                                                                                                                       // 8693\n  global.PNG = PNG;                                                                                                    // 8694\n                                                                                                                       // 8695\n})(typeof window !== \"undefined\" && window || this);                                                                   // 8696\n/*                                                                                                                     // 8697\n * Extracted from pdf.js                                                                                               // 8698\n * https://github.com/andreasgal/pdf.js                                                                                // 8699\n *                                                                                                                     // 8700\n * Copyright (c) 2011 Mozilla Foundation                                                                               // 8701\n *                                                                                                                     // 8702\n * Contributors: Andreas Gal <gal@mozilla.com>                                                                         // 8703\n *               Chris G Jones <cjones@mozilla.com>                                                                    // 8704\n *               Shaon Barman <shaon.barman@gmail.com>                                                                 // 8705\n *               Vivien Nicolas <21@vingtetun.org>                                                                     // 8706\n *               Justin D'Arcangelo <justindarc@gmail.com>                                                             // 8707\n *               Yury Delendik                                                                                         // 8708\n *                                                                                                                     // 8709\n * Permission is hereby granted, free of charge, to any person obtaining a                                             // 8710\n * copy of this software and associated documentation files (the \"Software\"),                                          // 8711\n * to deal in the Software without restriction, including without limitation                                           // 8712\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,                                            // 8713\n * and/or sell copies of the Software, and to permit persons to whom the                                               // 8714\n * Software is furnished to do so, subject to the following conditions:                                                // 8715\n *                                                                                                                     // 8716\n * The above copyright notice and this permission notice shall be included in                                          // 8717\n * all copies or substantial portions of the Software.                                                                 // 8718\n *                                                                                                                     // 8719\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                          // 8720\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                            // 8721\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL                                             // 8722\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                          // 8723\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING                                             // 8724\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER                                                 // 8725\n * DEALINGS IN THE SOFTWARE.                                                                                           // 8726\n */                                                                                                                    // 8727\n                                                                                                                       // 8728\nvar DecodeStream = (function() {                                                                                       // 8729\n  function constructor() {                                                                                             // 8730\n    this.pos = 0;                                                                                                      // 8731\n    this.bufferLength = 0;                                                                                             // 8732\n    this.eof = false;                                                                                                  // 8733\n    this.buffer = null;                                                                                                // 8734\n  }                                                                                                                    // 8735\n                                                                                                                       // 8736\n  constructor.prototype = {                                                                                            // 8737\n    ensureBuffer: function decodestream_ensureBuffer(requested) {                                                      // 8738\n      var buffer = this.buffer;                                                                                        // 8739\n      var current = buffer ? buffer.byteLength : 0;                                                                    // 8740\n      if (requested < current)                                                                                         // 8741\n        return buffer;                                                                                                 // 8742\n      var size = 512;                                                                                                  // 8743\n      while (size < requested)                                                                                         // 8744\n        size <<= 1;                                                                                                    // 8745\n      var buffer2 = new Uint8Array(size);                                                                              // 8746\n      for (var i = 0; i < current; ++i)                                                                                // 8747\n        buffer2[i] = buffer[i];                                                                                        // 8748\n      return this.buffer = buffer2;                                                                                    // 8749\n    },                                                                                                                 // 8750\n    getByte: function decodestream_getByte() {                                                                         // 8751\n      var pos = this.pos;                                                                                              // 8752\n      while (this.bufferLength <= pos) {                                                                               // 8753\n        if (this.eof)                                                                                                  // 8754\n          return null;                                                                                                 // 8755\n        this.readBlock();                                                                                              // 8756\n      }                                                                                                                // 8757\n      return this.buffer[this.pos++];                                                                                  // 8758\n    },                                                                                                                 // 8759\n    getBytes: function decodestream_getBytes(length) {                                                                 // 8760\n      var pos = this.pos;                                                                                              // 8761\n                                                                                                                       // 8762\n      if (length) {                                                                                                    // 8763\n        this.ensureBuffer(pos + length);                                                                               // 8764\n        var end = pos + length;                                                                                        // 8765\n                                                                                                                       // 8766\n        while (!this.eof && this.bufferLength < end)                                                                   // 8767\n          this.readBlock();                                                                                            // 8768\n                                                                                                                       // 8769\n        var bufEnd = this.bufferLength;                                                                                // 8770\n        if (end > bufEnd)                                                                                              // 8771\n          end = bufEnd;                                                                                                // 8772\n      } else {                                                                                                         // 8773\n        while (!this.eof)                                                                                              // 8774\n          this.readBlock();                                                                                            // 8775\n                                                                                                                       // 8776\n        var end = this.bufferLength;                                                                                   // 8777\n      }                                                                                                                // 8778\n                                                                                                                       // 8779\n      this.pos = end;                                                                                                  // 8780\n      return this.buffer.subarray(pos, end);                                                                           // 8781\n    },                                                                                                                 // 8782\n    lookChar: function decodestream_lookChar() {                                                                       // 8783\n      var pos = this.pos;                                                                                              // 8784\n      while (this.bufferLength <= pos) {                                                                               // 8785\n        if (this.eof)                                                                                                  // 8786\n          return null;                                                                                                 // 8787\n        this.readBlock();                                                                                              // 8788\n      }                                                                                                                // 8789\n      return String.fromCharCode(this.buffer[this.pos]);                                                               // 8790\n    },                                                                                                                 // 8791\n    getChar: function decodestream_getChar() {                                                                         // 8792\n      var pos = this.pos;                                                                                              // 8793\n      while (this.bufferLength <= pos) {                                                                               // 8794\n        if (this.eof)                                                                                                  // 8795\n          return null;                                                                                                 // 8796\n        this.readBlock();                                                                                              // 8797\n      }                                                                                                                // 8798\n      return String.fromCharCode(this.buffer[this.pos++]);                                                             // 8799\n    },                                                                                                                 // 8800\n    makeSubStream: function decodestream_makeSubstream(start, length, dict) {                                          // 8801\n      var end = start + length;                                                                                        // 8802\n      while (this.bufferLength <= end && !this.eof)                                                                    // 8803\n        this.readBlock();                                                                                              // 8804\n      return new Stream(this.buffer, start, length, dict);                                                             // 8805\n    },                                                                                                                 // 8806\n    skip: function decodestream_skip(n) {                                                                              // 8807\n      if (!n)                                                                                                          // 8808\n        n = 1;                                                                                                         // 8809\n      this.pos += n;                                                                                                   // 8810\n    },                                                                                                                 // 8811\n    reset: function decodestream_reset() {                                                                             // 8812\n      this.pos = 0;                                                                                                    // 8813\n    }                                                                                                                  // 8814\n  };                                                                                                                   // 8815\n                                                                                                                       // 8816\n  return constructor;                                                                                                  // 8817\n})();                                                                                                                  // 8818\n                                                                                                                       // 8819\nvar FlateStream = (function() {                                                                                        // 8820\n  if (typeof Uint32Array === 'undefined') {                                                                            // 8821\n    return undefined;                                                                                                  // 8822\n  }                                                                                                                    // 8823\n  var codeLenCodeMap = new Uint32Array([                                                                               // 8824\n    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15                                                   // 8825\n  ]);                                                                                                                  // 8826\n                                                                                                                       // 8827\n  var lengthDecode = new Uint32Array([                                                                                 // 8828\n    0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,                                            // 8829\n    0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,                                            // 8830\n    0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,                                            // 8831\n    0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102                                                      // 8832\n  ]);                                                                                                                  // 8833\n                                                                                                                       // 8834\n  var distDecode = new Uint32Array([                                                                                   // 8835\n    0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,                                            // 8836\n    0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,                                            // 8837\n    0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,                                            // 8838\n    0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001                                                               // 8839\n  ]);                                                                                                                  // 8840\n                                                                                                                       // 8841\n  var fixedLitCodeTab = [new Uint32Array([                                                                             // 8842\n    0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,                                            // 8843\n    0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,                                            // 8844\n    0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,                                            // 8845\n    0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,                                            // 8846\n    0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,                                            // 8847\n    0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,                                            // 8848\n    0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,                                            // 8849\n    0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,                                            // 8850\n    0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,                                            // 8851\n    0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,                                            // 8852\n    0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,                                            // 8853\n    0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,                                            // 8854\n    0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,                                            // 8855\n    0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,                                            // 8856\n    0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,                                            // 8857\n    0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,                                            // 8858\n    0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,                                            // 8859\n    0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,                                            // 8860\n    0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,                                            // 8861\n    0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,                                            // 8862\n    0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,                                            // 8863\n    0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,                                            // 8864\n    0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,                                            // 8865\n    0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,                                            // 8866\n    0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,                                            // 8867\n    0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,                                            // 8868\n    0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,                                            // 8869\n    0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,                                            // 8870\n    0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,                                            // 8871\n    0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,                                            // 8872\n    0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,                                            // 8873\n    0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,                                            // 8874\n    0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,                                            // 8875\n    0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,                                            // 8876\n    0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,                                            // 8877\n    0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,                                            // 8878\n    0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,                                            // 8879\n    0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,                                            // 8880\n    0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,                                            // 8881\n    0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,                                            // 8882\n    0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,                                            // 8883\n    0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,                                            // 8884\n    0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,                                            // 8885\n    0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,                                            // 8886\n    0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,                                            // 8887\n    0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,                                            // 8888\n    0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,                                            // 8889\n    0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,                                            // 8890\n    0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,                                            // 8891\n    0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,                                            // 8892\n    0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,                                            // 8893\n    0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,                                            // 8894\n    0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,                                            // 8895\n    0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,                                            // 8896\n    0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,                                            // 8897\n    0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,                                            // 8898\n    0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,                                            // 8899\n    0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,                                            // 8900\n    0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,                                            // 8901\n    0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,                                            // 8902\n    0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,                                            // 8903\n    0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,                                            // 8904\n    0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,                                            // 8905\n    0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff                                             // 8906\n  ]), 9];                                                                                                              // 8907\n                                                                                                                       // 8908\n  var fixedDistCodeTab = [new Uint32Array([                                                                            // 8909\n    0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,                                            // 8910\n    0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,                                            // 8911\n    0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,                                            // 8912\n    0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000                                             // 8913\n  ]), 5];                                                                                                              // 8914\n                                                                                                                       // 8915\n  function error(e) {                                                                                                  // 8916\n      throw new Error(e)                                                                                               // 8917\n  }                                                                                                                    // 8918\n                                                                                                                       // 8919\n  function constructor(bytes) {                                                                                        // 8920\n    //var bytes = stream.getBytes();                                                                                   // 8921\n    var bytesPos = 0;                                                                                                  // 8922\n                                                                                                                       // 8923\n    var cmf = bytes[bytesPos++];                                                                                       // 8924\n    var flg = bytes[bytesPos++];                                                                                       // 8925\n    if (cmf == -1 || flg == -1)                                                                                        // 8926\n      error('Invalid header in flate stream');                                                                         // 8927\n    if ((cmf & 0x0f) != 0x08)                                                                                          // 8928\n      error('Unknown compression method in flate stream');                                                             // 8929\n    if ((((cmf << 8) + flg) % 31) != 0)                                                                                // 8930\n      error('Bad FCHECK in flate stream');                                                                             // 8931\n    if (flg & 0x20)                                                                                                    // 8932\n      error('FDICT bit set in flate stream');                                                                          // 8933\n                                                                                                                       // 8934\n    this.bytes = bytes;                                                                                                // 8935\n    this.bytesPos = bytesPos;                                                                                          // 8936\n                                                                                                                       // 8937\n    this.codeSize = 0;                                                                                                 // 8938\n    this.codeBuf = 0;                                                                                                  // 8939\n                                                                                                                       // 8940\n    DecodeStream.call(this);                                                                                           // 8941\n  }                                                                                                                    // 8942\n                                                                                                                       // 8943\n  constructor.prototype = Object.create(DecodeStream.prototype);                                                       // 8944\n                                                                                                                       // 8945\n  constructor.prototype.getBits = function(bits) {                                                                     // 8946\n    var codeSize = this.codeSize;                                                                                      // 8947\n    var codeBuf = this.codeBuf;                                                                                        // 8948\n    var bytes = this.bytes;                                                                                            // 8949\n    var bytesPos = this.bytesPos;                                                                                      // 8950\n                                                                                                                       // 8951\n    var b;                                                                                                             // 8952\n    while (codeSize < bits) {                                                                                          // 8953\n      if (typeof (b = bytes[bytesPos++]) == 'undefined')                                                               // 8954\n        error('Bad encoding in flate stream');                                                                         // 8955\n      codeBuf |= b << codeSize;                                                                                        // 8956\n      codeSize += 8;                                                                                                   // 8957\n    }                                                                                                                  // 8958\n    b = codeBuf & ((1 << bits) - 1);                                                                                   // 8959\n    this.codeBuf = codeBuf >> bits;                                                                                    // 8960\n    this.codeSize = codeSize -= bits;                                                                                  // 8961\n    this.bytesPos = bytesPos;                                                                                          // 8962\n    return b;                                                                                                          // 8963\n  };                                                                                                                   // 8964\n                                                                                                                       // 8965\n  constructor.prototype.getCode = function(table) {                                                                    // 8966\n    var codes = table[0];                                                                                              // 8967\n    var maxLen = table[1];                                                                                             // 8968\n    var codeSize = this.codeSize;                                                                                      // 8969\n    var codeBuf = this.codeBuf;                                                                                        // 8970\n    var bytes = this.bytes;                                                                                            // 8971\n    var bytesPos = this.bytesPos;                                                                                      // 8972\n                                                                                                                       // 8973\n    while (codeSize < maxLen) {                                                                                        // 8974\n      var b;                                                                                                           // 8975\n      if (typeof (b = bytes[bytesPos++]) == 'undefined')                                                               // 8976\n        error('Bad encoding in flate stream');                                                                         // 8977\n      codeBuf |= (b << codeSize);                                                                                      // 8978\n      codeSize += 8;                                                                                                   // 8979\n    }                                                                                                                  // 8980\n    var code = codes[codeBuf & ((1 << maxLen) - 1)];                                                                   // 8981\n    var codeLen = code >> 16;                                                                                          // 8982\n    var codeVal = code & 0xffff;                                                                                       // 8983\n    if (codeSize == 0 || codeSize < codeLen || codeLen == 0)                                                           // 8984\n      error('Bad encoding in flate stream');                                                                           // 8985\n    this.codeBuf = (codeBuf >> codeLen);                                                                               // 8986\n    this.codeSize = (codeSize - codeLen);                                                                              // 8987\n    this.bytesPos = bytesPos;                                                                                          // 8988\n    return codeVal;                                                                                                    // 8989\n  };                                                                                                                   // 8990\n                                                                                                                       // 8991\n  constructor.prototype.generateHuffmanTable = function(lengths) {                                                     // 8992\n    var n = lengths.length;                                                                                            // 8993\n                                                                                                                       // 8994\n    // find max code length                                                                                            // 8995\n    var maxLen = 0;                                                                                                    // 8996\n    for (var i = 0; i < n; ++i) {                                                                                      // 8997\n      if (lengths[i] > maxLen)                                                                                         // 8998\n        maxLen = lengths[i];                                                                                           // 8999\n    }                                                                                                                  // 9000\n                                                                                                                       // 9001\n    // build the table                                                                                                 // 9002\n    var size = 1 << maxLen;                                                                                            // 9003\n    var codes = new Uint32Array(size);                                                                                 // 9004\n    for (var len = 1, code = 0, skip = 2;                                                                              // 9005\n         len <= maxLen;                                                                                                // 9006\n         ++len, code <<= 1, skip <<= 1) {                                                                              // 9007\n      for (var val = 0; val < n; ++val) {                                                                              // 9008\n        if (lengths[val] == len) {                                                                                     // 9009\n          // bit-reverse the code                                                                                      // 9010\n          var code2 = 0;                                                                                               // 9011\n          var t = code;                                                                                                // 9012\n          for (var i = 0; i < len; ++i) {                                                                              // 9013\n            code2 = (code2 << 1) | (t & 1);                                                                            // 9014\n            t >>= 1;                                                                                                   // 9015\n          }                                                                                                            // 9016\n                                                                                                                       // 9017\n          // fill the table entries                                                                                    // 9018\n          for (var i = code2; i < size; i += skip)                                                                     // 9019\n            codes[i] = (len << 16) | val;                                                                              // 9020\n                                                                                                                       // 9021\n          ++code;                                                                                                      // 9022\n        }                                                                                                              // 9023\n      }                                                                                                                // 9024\n    }                                                                                                                  // 9025\n                                                                                                                       // 9026\n    return [codes, maxLen];                                                                                            // 9027\n  };                                                                                                                   // 9028\n                                                                                                                       // 9029\n  constructor.prototype.readBlock = function() {                                                                       // 9030\n    function repeat(stream, array, len, offset, what) {                                                                // 9031\n      var repeat = stream.getBits(len) + offset;                                                                       // 9032\n      while (repeat-- > 0)                                                                                             // 9033\n        array[i++] = what;                                                                                             // 9034\n    }                                                                                                                  // 9035\n                                                                                                                       // 9036\n    // read block header                                                                                               // 9037\n    var hdr = this.getBits(3);                                                                                         // 9038\n    if (hdr & 1)                                                                                                       // 9039\n      this.eof = true;                                                                                                 // 9040\n    hdr >>= 1;                                                                                                         // 9041\n                                                                                                                       // 9042\n    if (hdr == 0) { // uncompressed block                                                                              // 9043\n      var bytes = this.bytes;                                                                                          // 9044\n      var bytesPos = this.bytesPos;                                                                                    // 9045\n      var b;                                                                                                           // 9046\n                                                                                                                       // 9047\n      if (typeof (b = bytes[bytesPos++]) == 'undefined')                                                               // 9048\n        error('Bad block header in flate stream');                                                                     // 9049\n      var blockLen = b;                                                                                                // 9050\n      if (typeof (b = bytes[bytesPos++]) == 'undefined')                                                               // 9051\n        error('Bad block header in flate stream');                                                                     // 9052\n      blockLen |= (b << 8);                                                                                            // 9053\n      if (typeof (b = bytes[bytesPos++]) == 'undefined')                                                               // 9054\n        error('Bad block header in flate stream');                                                                     // 9055\n      var check = b;                                                                                                   // 9056\n      if (typeof (b = bytes[bytesPos++]) == 'undefined')                                                               // 9057\n        error('Bad block header in flate stream');                                                                     // 9058\n      check |= (b << 8);                                                                                               // 9059\n      if (check != (~blockLen & 0xffff))                                                                               // 9060\n        error('Bad uncompressed block length in flate stream');                                                        // 9061\n                                                                                                                       // 9062\n      this.codeBuf = 0;                                                                                                // 9063\n      this.codeSize = 0;                                                                                               // 9064\n                                                                                                                       // 9065\n      var bufferLength = this.bufferLength;                                                                            // 9066\n      var buffer = this.ensureBuffer(bufferLength + blockLen);                                                         // 9067\n      var end = bufferLength + blockLen;                                                                               // 9068\n      this.bufferLength = end;                                                                                         // 9069\n      for (var n = bufferLength; n < end; ++n) {                                                                       // 9070\n        if (typeof (b = bytes[bytesPos++]) == 'undefined') {                                                           // 9071\n          this.eof = true;                                                                                             // 9072\n          break;                                                                                                       // 9073\n        }                                                                                                              // 9074\n        buffer[n] = b;                                                                                                 // 9075\n      }                                                                                                                // 9076\n      this.bytesPos = bytesPos;                                                                                        // 9077\n      return;                                                                                                          // 9078\n    }                                                                                                                  // 9079\n                                                                                                                       // 9080\n    var litCodeTable;                                                                                                  // 9081\n    var distCodeTable;                                                                                                 // 9082\n    if (hdr == 1) { // compressed block, fixed codes                                                                   // 9083\n      litCodeTable = fixedLitCodeTab;                                                                                  // 9084\n      distCodeTable = fixedDistCodeTab;                                                                                // 9085\n    } else if (hdr == 2) { // compressed block, dynamic codes                                                          // 9086\n      var numLitCodes = this.getBits(5) + 257;                                                                         // 9087\n      var numDistCodes = this.getBits(5) + 1;                                                                          // 9088\n      var numCodeLenCodes = this.getBits(4) + 4;                                                                       // 9089\n                                                                                                                       // 9090\n      // build the code lengths code table                                                                             // 9091\n      var codeLenCodeLengths = Array(codeLenCodeMap.length);                                                           // 9092\n      var i = 0;                                                                                                       // 9093\n      while (i < numCodeLenCodes)                                                                                      // 9094\n        codeLenCodeLengths[codeLenCodeMap[i++]] = this.getBits(3);                                                     // 9095\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);                                              // 9096\n                                                                                                                       // 9097\n      // build the literal and distance code tables                                                                    // 9098\n      var len = 0;                                                                                                     // 9099\n      var i = 0;                                                                                                       // 9100\n      var codes = numLitCodes + numDistCodes;                                                                          // 9101\n      var codeLengths = new Array(codes);                                                                              // 9102\n      while (i < codes) {                                                                                              // 9103\n        var code = this.getCode(codeLenCodeTab);                                                                       // 9104\n        if (code == 16) {                                                                                              // 9105\n          repeat(this, codeLengths, 2, 3, len);                                                                        // 9106\n        } else if (code == 17) {                                                                                       // 9107\n          repeat(this, codeLengths, 3, 3, len = 0);                                                                    // 9108\n        } else if (code == 18) {                                                                                       // 9109\n          repeat(this, codeLengths, 7, 11, len = 0);                                                                   // 9110\n        } else {                                                                                                       // 9111\n          codeLengths[i++] = len = code;                                                                               // 9112\n        }                                                                                                              // 9113\n      }                                                                                                                // 9114\n                                                                                                                       // 9115\n      litCodeTable =                                                                                                   // 9116\n        this.generateHuffmanTable(codeLengths.slice(0, numLitCodes));                                                  // 9117\n      distCodeTable =                                                                                                  // 9118\n        this.generateHuffmanTable(codeLengths.slice(numLitCodes, codes));                                              // 9119\n    } else {                                                                                                           // 9120\n      error('Unknown block type in flate stream');                                                                     // 9121\n    }                                                                                                                  // 9122\n                                                                                                                       // 9123\n    var buffer = this.buffer;                                                                                          // 9124\n    var limit = buffer ? buffer.length : 0;                                                                            // 9125\n    var pos = this.bufferLength;                                                                                       // 9126\n    while (true) {                                                                                                     // 9127\n      var code1 = this.getCode(litCodeTable);                                                                          // 9128\n      if (code1 < 256) {                                                                                               // 9129\n        if (pos + 1 >= limit) {                                                                                        // 9130\n          buffer = this.ensureBuffer(pos + 1);                                                                         // 9131\n          limit = buffer.length;                                                                                       // 9132\n        }                                                                                                              // 9133\n        buffer[pos++] = code1;                                                                                         // 9134\n        continue;                                                                                                      // 9135\n      }                                                                                                                // 9136\n      if (code1 == 256) {                                                                                              // 9137\n        this.bufferLength = pos;                                                                                       // 9138\n        return;                                                                                                        // 9139\n      }                                                                                                                // 9140\n      code1 -= 257;                                                                                                    // 9141\n      code1 = lengthDecode[code1];                                                                                     // 9142\n      var code2 = code1 >> 16;                                                                                         // 9143\n      if (code2 > 0)                                                                                                   // 9144\n        code2 = this.getBits(code2);                                                                                   // 9145\n      var len = (code1 & 0xffff) + code2;                                                                              // 9146\n      code1 = this.getCode(distCodeTable);                                                                             // 9147\n      code1 = distDecode[code1];                                                                                       // 9148\n      code2 = code1 >> 16;                                                                                             // 9149\n      if (code2 > 0)                                                                                                   // 9150\n        code2 = this.getBits(code2);                                                                                   // 9151\n      var dist = (code1 & 0xffff) + code2;                                                                             // 9152\n      if (pos + len >= limit) {                                                                                        // 9153\n        buffer = this.ensureBuffer(pos + len);                                                                         // 9154\n        limit = buffer.length;                                                                                         // 9155\n      }                                                                                                                // 9156\n      for (var k = 0; k < len; ++k, ++pos)                                                                             // 9157\n        buffer[pos] = buffer[pos - dist];                                                                              // 9158\n    }                                                                                                                  // 9159\n  };                                                                                                                   // 9160\n                                                                                                                       // 9161\n  return constructor;                                                                                                  // 9162\n})();/**                                                                                                               // 9163\n * JavaScript Polyfill functions for jsPDF                                                                             // 9164\n * Collected from public resources by                                                                                  // 9165\n * https://github.com/diegocr                                                                                          // 9166\n */                                                                                                                    // 9167\n                                                                                                                       // 9168\n(function (global) {                                                                                                   // 9169\n\tvar b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';                                        // 9170\n                                                                                                                       // 9171\n\tif (typeof global.btoa === 'undefined') {                                                                             // 9172\n\t\tglobal.btoa = function(data) {                                                                                       // 9173\n\t\t\t//  discuss at: http://phpjs.org/functions/base64_encode/                                                           // 9174\n\t\t\t// original by: Tyler Akins (http://rumkin.com)                                                                     // 9175\n\t\t\t// improved by: Bayron Guevara                                                                                      // 9176\n\t\t\t// improved by: Thunder.m                                                                                           // 9177\n\t\t\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)                                                 // 9178\n\t\t\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)                                                 // 9179\n\t\t\t// improved by: Rafal Kukawski (http://kukawski.pl)                                                                 // 9180\n\t\t\t// bugfixed by: Pellentesque Malesuada                                                                              // 9181\n\t\t\t//   example 1: base64_encode('Kevin van Zonneveld');                                                               // 9182\n\t\t\t//   returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='                                                                      // 9183\n                                                                                                                       // 9184\n\t\t\tvar o1,o2,o3,h1,h2,h3,h4,bits,i = 0,ac = 0,enc = '',tmp_arr = [];                                                   // 9185\n                                                                                                                       // 9186\n\t\t\tif (!data) {                                                                                                        // 9187\n\t\t\t\treturn data;                                                                                                       // 9188\n\t\t\t}                                                                                                                   // 9189\n                                                                                                                       // 9190\n\t\t\tdo { // pack three octets into four hexets                                                                          // 9191\n\t\t\t\to1 = data.charCodeAt(i++);                                                                                         // 9192\n\t\t\t\to2 = data.charCodeAt(i++);                                                                                         // 9193\n\t\t\t\to3 = data.charCodeAt(i++);                                                                                         // 9194\n                                                                                                                       // 9195\n\t\t\t\tbits = o1 << 16 | o2 << 8 | o3;                                                                                    // 9196\n                                                                                                                       // 9197\n\t\t\t\th1 = bits >> 18 & 0x3f;                                                                                            // 9198\n\t\t\t\th2 = bits >> 12 & 0x3f;                                                                                            // 9199\n\t\t\t\th3 = bits >> 6 & 0x3f;                                                                                             // 9200\n\t\t\t\th4 = bits & 0x3f;                                                                                                  // 9201\n                                                                                                                       // 9202\n\t\t\t\t// use hexets to index into b64, and append result to encoded string                                               // 9203\n\t\t\t\ttmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);                                 // 9204\n\t\t\t} while (i < data.length);                                                                                          // 9205\n                                                                                                                       // 9206\n\t\t\tenc = tmp_arr.join('');                                                                                             // 9207\n                                                                                                                       // 9208\n\t\t\tvar r = data.length % 3;                                                                                            // 9209\n                                                                                                                       // 9210\n\t\t\treturn (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);                                                       // 9211\n\t\t};                                                                                                                   // 9212\n\t}                                                                                                                     // 9213\n                                                                                                                       // 9214\n\tif (typeof global.atob === 'undefined') {                                                                             // 9215\n\t\tglobal.atob = function(data) {                                                                                       // 9216\n\t\t\t//  discuss at: http://phpjs.org/functions/base64_decode/                                                           // 9217\n\t\t\t// original by: Tyler Akins (http://rumkin.com)                                                                     // 9218\n\t\t\t// improved by: Thunder.m                                                                                           // 9219\n\t\t\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)                                                 // 9220\n\t\t\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)                                                 // 9221\n\t\t\t//    input by: Aman Gupta                                                                                          // 9222\n\t\t\t//    input by: Brett Zamir (http://brett-zamir.me)                                                                 // 9223\n\t\t\t// bugfixed by: Onno Marsman                                                                                        // 9224\n\t\t\t// bugfixed by: Pellentesque Malesuada                                                                              // 9225\n\t\t\t// bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)                                                 // 9226\n\t\t\t//   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');                                                      // 9227\n\t\t\t//   returns 1: 'Kevin van Zonneveld'                                                                               // 9228\n                                                                                                                       // 9229\n\t\t\tvar o1,o2,o3,h1,h2,h3,h4,bits,i = 0,ac = 0,dec = '',tmp_arr = [];                                                   // 9230\n                                                                                                                       // 9231\n\t\t\tif (!data) {                                                                                                        // 9232\n\t\t\t\treturn data;                                                                                                       // 9233\n\t\t\t}                                                                                                                   // 9234\n                                                                                                                       // 9235\n\t\t\tdata += '';                                                                                                         // 9236\n                                                                                                                       // 9237\n\t\t\tdo { // unpack four hexets into three octets using index points in b64                                              // 9238\n\t\t\t\th1 = b64.indexOf(data.charAt(i++));                                                                                // 9239\n\t\t\t\th2 = b64.indexOf(data.charAt(i++));                                                                                // 9240\n\t\t\t\th3 = b64.indexOf(data.charAt(i++));                                                                                // 9241\n\t\t\t\th4 = b64.indexOf(data.charAt(i++));                                                                                // 9242\n                                                                                                                       // 9243\n\t\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;                                                                         // 9244\n                                                                                                                       // 9245\n\t\t\t\to1 = bits >> 16 & 0xff;                                                                                            // 9246\n\t\t\t\to2 = bits >> 8 & 0xff;                                                                                             // 9247\n\t\t\t\to3 = bits & 0xff;                                                                                                  // 9248\n                                                                                                                       // 9249\n\t\t\t\tif (h3 == 64) {                                                                                                    // 9250\n\t\t\t\t\ttmp_arr[ac++] = String.fromCharCode(o1);                                                                          // 9251\n\t\t\t\t} else if (h4 == 64) {                                                                                             // 9252\n\t\t\t\t\ttmp_arr[ac++] = String.fromCharCode(o1, o2);                                                                      // 9253\n\t\t\t\t} else {                                                                                                           // 9254\n\t\t\t\t\ttmp_arr[ac++] = String.fromCharCode(o1, o2, o3);                                                                  // 9255\n\t\t\t\t}                                                                                                                  // 9256\n\t\t\t} while (i < data.length);                                                                                          // 9257\n                                                                                                                       // 9258\n\t\t\tdec = tmp_arr.join('');                                                                                             // 9259\n                                                                                                                       // 9260\n\t\t\treturn dec;                                                                                                         // 9261\n\t\t};                                                                                                                   // 9262\n\t}                                                                                                                     // 9263\n                                                                                                                       // 9264\n\tif (!Array.prototype.map) {                                                                                           // 9265\n\t\tArray.prototype.map = function(fun /*, thisArg */) {                                                                 // 9266\n\t\t\tif (this === void 0 || this === null || typeof fun !== \"function\")                                                  // 9267\n\t\t\t\tthrow new TypeError();                                                                                             // 9268\n                                                                                                                       // 9269\n\t\t\tvar t = Object(this), len = t.length >>> 0, res = new Array(len);                                                   // 9270\n\t\t\tvar thisArg = arguments.length > 1 ? arguments[1] : void 0;                                                         // 9271\n\t\t\tfor (var i = 0; i < len; i++) {                                                                                     // 9272\n\t\t\t\t// NOTE: Absolute correctness would demand Object.defineProperty                                                   // 9273\n\t\t\t\t//       be used.  But this method is fairly new, and failure is                                                   // 9274\n\t\t\t\t//       possible only if Object.prototype or Array.prototype                                                      // 9275\n\t\t\t\t//       has a property |i| (very unlikely), so use a less-correct                                                 // 9276\n\t\t\t\t//       but more portable alternative.                                                                            // 9277\n\t\t\t\tif (i in t)                                                                                                        // 9278\n\t\t\t\t\tres[i] = fun.call(thisArg, t[i], i, t);                                                                           // 9279\n\t\t\t}                                                                                                                   // 9280\n                                                                                                                       // 9281\n\t\t\treturn res;                                                                                                         // 9282\n\t\t};                                                                                                                   // 9283\n\t}                                                                                                                     // 9284\n                                                                                                                       // 9285\n                                                                                                                       // 9286\n\tif(!Array.isArray) {                                                                                                  // 9287\n\t\tArray.isArray = function(arg) {                                                                                      // 9288\n\t\t\treturn Object.prototype.toString.call(arg) === '[object Array]';                                                    // 9289\n\t\t};                                                                                                                   // 9290\n\t}                                                                                                                     // 9291\n                                                                                                                       // 9292\n\tif (!Array.prototype.forEach) {                                                                                       // 9293\n\t\tArray.prototype.forEach = function(fun, thisArg) {                                                                   // 9294\n\t\t\t\"use strict\";                                                                                                       // 9295\n                                                                                                                       // 9296\n\t\t\tif (this === void 0 || this === null || typeof fun !== \"function\")                                                  // 9297\n\t\t\t\tthrow new TypeError();                                                                                             // 9298\n                                                                                                                       // 9299\n\t\t\tvar t = Object(this), len = t.length >>> 0;                                                                         // 9300\n\t\t\tfor (var i = 0; i < len; i++) {                                                                                     // 9301\n\t\t\t\tif (i in t)                                                                                                        // 9302\n\t\t\t\t\tfun.call(thisArg, t[i], i, t);                                                                                    // 9303\n\t\t\t}                                                                                                                   // 9304\n\t\t};                                                                                                                   // 9305\n\t}                                                                                                                     // 9306\n                                                                                                                       // 9307\n\tif (!Object.keys) {                                                                                                   // 9308\n\t\tObject.keys = (function () {                                                                                         // 9309\n\t\t\t'use strict';                                                                                                       // 9310\n                                                                                                                       // 9311\n\t\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty,                                                               // 9312\n\t\t\t\thasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),                                             // 9313\n\t\t\t\tdontEnums = ['toString','toLocaleString','valueOf','hasOwnProperty',                                               // 9314\n\t\t\t\t\t'isPrototypeOf','propertyIsEnumerable','constructor'],                                                            // 9315\n\t\t\t\tdontEnumsLength = dontEnums.length;                                                                                // 9316\n                                                                                                                       // 9317\n\t\t\treturn function (obj) {                                                                                             // 9318\n\t\t\t\tif (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {                                      // 9319\n\t\t\t\t\tthrow new TypeError();                                                                                            // 9320\n\t\t\t\t}                                                                                                                  // 9321\n\t\t\t\tvar result = [], prop, i;                                                                                          // 9322\n                                                                                                                       // 9323\n\t\t\t\tfor (prop in obj) {                                                                                                // 9324\n\t\t\t\t\tif (hasOwnProperty.call(obj, prop)) {                                                                             // 9325\n\t\t\t\t\t\tresult.push(prop);                                                                                               // 9326\n\t\t\t\t\t}                                                                                                                 // 9327\n\t\t\t\t}                                                                                                                  // 9328\n                                                                                                                       // 9329\n\t\t\t\tif (hasDontEnumBug) {                                                                                              // 9330\n\t\t\t\t\tfor (i = 0; i < dontEnumsLength; i++) {                                                                           // 9331\n\t\t\t\t\t\tif (hasOwnProperty.call(obj, dontEnums[i])) {                                                                    // 9332\n\t\t\t\t\t\t\tresult.push(dontEnums[i]);                                                                                      // 9333\n\t\t\t\t\t\t}                                                                                                                // 9334\n\t\t\t\t\t}                                                                                                                 // 9335\n\t\t\t\t}                                                                                                                  // 9336\n\t\t\t\treturn result;                                                                                                     // 9337\n\t\t\t};                                                                                                                  // 9338\n\t\t}());                                                                                                                // 9339\n\t}                                                                                                                     // 9340\n                                                                                                                       // 9341\n\tif (!String.prototype.trim) {                                                                                         // 9342\n\t\tString.prototype.trim = function () {                                                                                // 9343\n\t\t\treturn this.replace(/^\\s+|\\s+$/g, '');                                                                              // 9344\n\t\t};                                                                                                                   // 9345\n\t}                                                                                                                     // 9346\n\tif (!String.prototype.trimLeft) {                                                                                     // 9347\n\t\tString.prototype.trimLeft = function() {                                                                             // 9348\n\t\t\treturn this.replace(/^\\s+/g, \"\");                                                                                   // 9349\n\t\t};                                                                                                                   // 9350\n\t}                                                                                                                     // 9351\n\tif (!String.prototype.trimRight) {                                                                                    // 9352\n\t\tString.prototype.trimRight = function() {                                                                            // 9353\n\t\t\treturn this.replace(/\\s+$/g, \"\");                                                                                   // 9354\n\t\t};                                                                                                                   // 9355\n\t}                                                                                                                     // 9356\n                                                                                                                       // 9357\n})(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this);                            // 9358\n                                                                                                                       // 9359\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['chipcastledotcom:jspdf'] = {};\n\n})();\n","servePath":"/packages/chipcastledotcom_jspdf.js"}]