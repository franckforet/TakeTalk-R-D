{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/lib/Collections/Speeches.js","filenameRelative":"/lib/Collections/Speeches.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/Collections/Speeches.js.map","sourceFileName":"/lib/Collections/Speeches.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Speeches"},"ignored":false,"code":"/** The collection that contains the speeches */Speeches = new Mongo.Collection(\"speeches\");\nSpeeches.allow({\n    update: function () {\n        return true; /*return ownsDocument(userId, group);*/\n    },\n    remove: function () {\n        return true;\n    },\n    insert: function () {\n        return true;\n    }\n});\nMeteor.methods({\n    speechesInsert: function (speechesAttributes) {\n        check(speechesAttributes, {\n            meetingID: String /*,\n                              speakers: [String]\n                              */\n        });\n        var speechesId = Speeches.insert(speechesAttributes);\n        return {\n            _id: speechesId\n        };\n    }\n});","ast":null,"map":{"version":3,"sources":["/lib/Collections/Speeches.js"],"names":["Speeches","Mongo","Collection","allow","update","remove","insert","Meteor","methods","speechesInsert","speechesAttributes","check","meetingID","String","speechesId","_id"],"mappings":"AAAA,gDACAA,WAAW,IAAIC,MAAMC,UAAV,CAAqB,UAArB,CAAX;AAEAF,SAASG,KAAT,CAAe;AACbC,YAAQ,YAAW;AAAE,eAAO,IAAP,CAAF,CAAa;AAAyC,KAD5D;AAEbC,YAAQ,YAAW;AAAE,eAAO,IAAP;AAAa,KAFrB;AAGbC,YAAQ,YAAW;AACjB,eAAO,IAAP;AACD;AALY,CAAf;AASCC,OAAOC,OAAP,CAAe;AACXC,oBAAgB,UAASC,kBAAT,EAA6B;AAEzCC,cAAMD,kBAAN,EAA0B;AACtBE,uBAAWC,MADW,CACL;;;AADK,SAA1B;AAQA,YAAIC,aAAad,SAASM,MAAT,CAAgBI,kBAAhB,CAAjB;AAGA,eAAO;AACHK,iBAAKD;AADF,SAAP;AAGH;AAjBU,CAAf","file":"/lib/Collections/Speeches.js.map","sourcesContent":["/** The collection that contains the speeches */\nSpeeches = new Mongo.Collection(\"speeches\");\n\nSpeeches.allow({\n  update: function() { return true/*return ownsDocument(userId, group);*/ },\n  remove: function() { return true },\n  insert: function() {\n    return true;\n  }\n });\n\n\n Meteor.methods({\n     speechesInsert: function(speechesAttributes) {\n\n         check(speechesAttributes, {\n             meetingID: String/*,\n             speakers: [String]\n             */\n         });\n\n\n\n         var speechesId = Speeches.insert(speechesAttributes);\n\n\n         return {\n             _id: speechesId\n         };\n     }\n });\n"]},"hash":"4ec7915a386c57343211362b81367d784551b67c"}
