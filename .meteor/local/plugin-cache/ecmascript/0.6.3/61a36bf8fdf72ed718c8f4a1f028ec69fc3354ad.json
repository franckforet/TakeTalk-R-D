{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/group/group_submit.js","filenameRelative":"/client/group/group_submit.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/group/group_submit.js.map","sourceFileName":"/client/group/group_submit.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"group_submit"},"ignored":false,"code":"Template.groupSubmit.onCreated(function () {\n  Session.set('inputs', []); // on page load, set this to have no inputs\n});\nTemplate.groupSubmit.helpers({\n  inputs: function () {\n    return Session.get('inputs'); // reactively watches the Session variable, so when it changes, this result will change and our template will change\n  }\n}); // Now we'll set up a click handler to add inputs to our array when we   click the \"add\" button\n\nTemplate.groupSubmit.events({\n  'click #add-input': function () {\n    var inputs = Session.get('inputs');\n    var uniqid = Math.floor(Math.random() * 100000); // Give a unique ID so you can pull _this_ input when you click remove\n\n    inputs.push({\n      uniqid: uniqid,\n      value: \"\"\n    });\n    Session.set('inputs', inputs);\n  },\n  'submit form': function (e) {\n    e.preventDefault(); //Récupération des éléments DOM des champs de saisie\n\n    var membersInputs = $(e.target).find('[name=member]'); //Récupération des valeurs de l'ordre du jour, temps estimés et des emails d'invitation\n\n    var name = [];\n    ;\n    var members = [];\n\n    for (i = 0; i < membersInputs.length; i++) {\n      if (membersInputs[i].value != \"\") {\n        members.push(membersInputs[i].value);\n      }\n    } //  name.push(nameInput[0].value);\n\n\n    var group = {\n      name: $(e.target).find('[name=name]').val(),\n      members: members\n    };\n    Meteor.call('groupInsert', group, function (error, result) {\n      // affiche l'erreur à l'utilisateur et s'interrompt\n      if (error) return alert(error.reason);\n      Router.go('groups', {\n        _id: result._id\n      });\n    });\n  }\n}); // We also need handlers for when the inputs themselves are changed / removed\n\nTemplate.input.events({\n  'click #remove-input': function (event) {\n    var uniqid = $(event.currentTarget).attr('uniqid');\n    inputs = Session.get('inputs');\n    inputs = _.filter(inputs, function (x) {\n      return x.uniqid != uniqid;\n    });\n    Session.set('inputs', inputs);\n  } /*,\n    'change input': function(event) {\n     var $input = $(event.currentTarget);\n     var uniqid = $input.attr('uniqid');\n     inputs = Session.get('inputs');\n     index = inputs.findIndex(function(x) { return x.uniqid == uniqid; });\n     inputs[index].value = $input.val();\n     Session.set('inputs', inputs);\n    }*/\n});","ast":null,"map":{"version":3,"sources":["/client/group/group_submit.js"],"names":["Template","groupSubmit","onCreated","Session","set","helpers","inputs","get","events","uniqid","Math","floor","random","push","value","e","preventDefault","membersInputs","$","target","find","name","members","i","length","group","val","Meteor","call","error","result","alert","reason","Router","go","_id","input","event","currentTarget","attr","_","filter","x"],"mappings":"AAAAA,SAASC,WAAT,CAAqBC,SAArB,CAA+B,YAAW;AACxCC,UAAQC,GAAR,CAAY,QAAZ,EAAsB,EAAtB,EADwC,CACb;AAC5B,CAFD;AAIAJ,SAASC,WAAT,CAAqBI,OAArB,CAA6B;AAC3BC,UAAQ,YAAY;AAClB,WAAOH,QAAQI,GAAR,CAAY,QAAZ,CAAP,CADkB,CACY;AAC/B;AAH0B,CAA7B,E,CAMA;;AACAP,SAASC,WAAT,CAAqBO,MAArB,CAA4B;AAC1B,sBAAoB,YAAY;AAE9B,QAAIF,SAASH,QAAQI,GAAR,CAAY,QAAZ,CAAb;AACA,QAAIE,SAASC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,MAA3B,CAAb,CAH8B,CAGmB;;AACjDN,WAAOO,IAAP,CAAY;AAACJ,cAAQA,MAAT;AAAiBK,aAAO;AAAxB,KAAZ;AACAX,YAAQC,GAAR,CAAY,QAAZ,EAAsBE,MAAtB;AACD,GAPyB;AAS1B,iBAAe,UAASS,CAAT,EAAY;AACzBA,MAAEC,cAAF,GADyB,CAEzB;;AACA,QAAIC,gBAAgBC,EAAEH,EAAEI,MAAJ,EAAYC,IAAZ,CAAiB,eAAjB,CAApB,CAHyB,CAMzB;;AACA,QAAIC,OAAO,EAAX;AAAc;AACd,QAAIC,UAAU,EAAd;;AAGA,SAAKC,IAAI,CAAT,EAAYA,IAAIN,cAAcO,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,UAAIN,cAAcM,CAAd,EAAiBT,KAAjB,IAA0B,EAA9B,EAAkC;AAChCQ,gBAAQT,IAAR,CAAaI,cAAcM,CAAd,EAAiBT,KAA9B;AACD;AACF,KAfwB,CAiB3B;;;AAEE,QAAIW,QAAQ;AACVJ,YAAMH,EAAEH,EAAEI,MAAJ,EAAYC,IAAZ,CAAiB,aAAjB,EAAgCM,GAAhC,EADI;AAEVJ;AAFU,KAAZ;AAKAK,WAAOC,IAAP,CAAY,aAAZ,EAA2BH,KAA3B,EAAkC,UAASI,KAAT,EAAgBC,MAAhB,EAAwB;AACxD;AACA,UAAID,KAAJ,EACA,OAAOE,MAAMF,MAAMG,MAAZ,CAAP;AACAC,aAAOC,EAAP,CAAU,QAAV,EAAoB;AAACC,aAAKL,OAAOK;AAAb,OAApB;AACD,KALD;AAMD;AAvCyB,CAA5B,E,CA6CA;;AACAnC,SAASoC,KAAT,CAAe5B,MAAf,CAAsB;AACpB,yBAAuB,UAAS6B,KAAT,EAAgB;AACrC,QAAI5B,SAASS,EAAEmB,MAAMC,aAAR,EAAuBC,IAAvB,CAA4B,QAA5B,CAAb;AACAjC,aAASH,QAAQI,GAAR,CAAY,QAAZ,CAAT;AACAD,aAASkC,EAAEC,MAAF,CAASnC,MAAT,EAAiB,UAASoC,CAAT,EAAY;AAAE,aAAOA,EAAEjC,MAAF,IAAYA,MAAnB;AAA4B,KAA3D,CAAT;AACAN,YAAQC,GAAR,CAAY,QAAZ,EAAsBE,MAAtB;AACD,GANmB,CAMnB;;;;;;;;;AANmB,CAAtB","file":"/client/group/group_submit.js.map","sourcesContent":["Template.groupSubmit.onCreated(function() {\n  Session.set('inputs', []); // on page load, set this to have no inputs\n});\n\nTemplate.groupSubmit.helpers({\n  inputs: function () {\n    return Session.get('inputs'); // reactively watches the Session variable, so when it changes, this result will change and our template will change\n  }\n});\n\n// Now we'll set up a click handler to add inputs to our array when we   click the \"add\" button\nTemplate.groupSubmit.events({\n  'click #add-input': function () {\n\n    var inputs = Session.get('inputs');\n    var uniqid = Math.floor(Math.random() * 100000); // Give a unique ID so you can pull _this_ input when you click remove\n    inputs.push({uniqid: uniqid, value: \"\"});\n    Session.set('inputs', inputs);\n  },\n\n  'submit form': function(e) {\n    e.preventDefault();\n    //Récupération des éléments DOM des champs de saisie\n    var membersInputs = $(e.target).find('[name=member]');\n\n\n    //Récupération des valeurs de l'ordre du jour, temps estimés et des emails d'invitation\n    var name = [];;\n    var members = [];\n\n\n    for (i = 0; i < membersInputs.length; i++) {\n      if (membersInputs[i].value != \"\") {\n        members.push(membersInputs[i].value);\n      }\n    }\n\n  //  name.push(nameInput[0].value);\n\n    var group = {\n      name: $(e.target).find('[name=name]').val(),\n      members\n    }\n\n    Meteor.call('groupInsert', group, function(error, result) {\n      // affiche l'erreur à l'utilisateur et s'interrompt\n      if (error)\n      return alert(error.reason);\n      Router.go('groups', {_id: result._id});\n    });\n  }\n\n\n});\n\n\n// We also need handlers for when the inputs themselves are changed / removed\nTemplate.input.events({\n  'click #remove-input': function(event) {\n    var uniqid = $(event.currentTarget).attr('uniqid');\n    inputs = Session.get('inputs');\n    inputs = _.filter(inputs, function(x) { return x.uniqid != uniqid; });\n    Session.set('inputs', inputs);\n  }/*,\n  'change input': function(event) {\n    var $input = $(event.currentTarget);\n    var uniqid = $input.attr('uniqid');\n    inputs = Session.get('inputs');\n    index = inputs.findIndex(function(x) { return x.uniqid == uniqid; });\n    inputs[index].value = $input.val();\n    Session.set('inputs', inputs);\n  }*/\n});\n"]},"hash":"61a36bf8fdf72ed718c8f4a1f028ec69fc3354ad"}
