{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/js/meeting.js","filenameRelative":"/client/js/meeting.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/js/meeting.js.map","sourceFileName":"/client/js/meeting.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"meeting"},"ignored":false,"code":"//import { Template } from 'meteor/templating';\n//import { ReactiveVar } from 'meteor/reactive-var';\nvar sortableList;\nvar meeting; //Template.meeting.isTrue = true;\n//console.log(Template.meeting.isTrue);\n\nPresence.state = function () {\n  return {\n    online: true,\n    currentRoomId: Session.get('currentRoomId')\n  };\n};\n\nTemplate.meeting.helpers({\n  users: function () {\n    // exclude the currentUser\n    var userIds = Presences.find().map(function (presence) {\n      return presence.userId;\n    });\n    var userPres = Presences.find().map(function (presence) {\n      if (presence.state.currentRoomId === Session.get('currentRoomId')) return presence.userId;\n    }); /*\n        console.log(\"je suis connecté  \" +userIds);\n        console.log(\"je suis ici  \" + userPres);*/\n    return Meteor.users.find({\n      _id: {\n        $in: userPres,\n        $ne: Meteor.userId()\n      }\n    });\n  },\n  getSpeaker: function () {\n    meeting = Session.get(\"meeting\");\n    var speaker = Meetings.findOne({\n      _id: meeting._id\n    }).speaker;\n    Session.set(\"speaker\", speaker);\n  },\n  isSpeaker: function () {\n    meeting = Session.get(\"meeting\");\n    speaker = Session.get(\"speaker\");\n    var mail;\n    if (this.animatorMail) mail = this.animatorMail;else mail = \"\" + this;\n    return Meetings.findOne({\n      _id: meeting._id\n    }).speaker === mail;\n  },\n  isAsking: function () {\n    meeting = Session.get(\"meeting\");\n    var mail;\n    if (this.animatorMail) mail = this.animatorMail;else mail = \"\" + this;\n    return Speeches.find({\n      myMeetingId: meeting._id,\n      speakers: mail\n    }).count();\n  },\n  /*\n    onLoad:function(){\n      var meeting = this;\n      Session.set(\"meeting\",this);\n      Session.set('currentRoomId',this._id);\n      var idMeeting=this._id;\n      var meetingParticipant= this.participantsEmails;\n      var meetingParticipantActivity = this.participantActivity;\n  \n    },\n  */ownMeeting: function () {\n    meeting = Session.get(\"meeting\");\n    return meeting.animatorMail === Meteor.user().emails[0].address;\n  },\n  partMeeting: function () {\n    var res = 0;\n\n    if (this.animatorMail === Meteor.user().emails[0].address) {\n      res = 1;\n    } else {\n      var mail = \"\" + this;\n      if (mail === Meteor.user().emails[0].address) res = 1;\n      meeting = Session.get(\"meeting\"); /*\n                                              for(i=0;i<meeting.participantsEmails.length;i++){\n                                                if(meeting.participantsEmails[i]===Meteor.user().emails[0].address){\n                                        \n                                                  Meetings.update(idMeeting,{$set: {\"meetingParticipantActivity[i]\": true}});\n                                        \n                                                  i=this.participantsEmails.length;\n                                                }\n                                              }\n                                        */\n    }\n\n    return res;\n  }\n});\nTemplate.meeting.events({\n  'click #speakControl': function (e) {\n    meeting = Session.get(\"meeting\");\n    speeches = Speeches.findOne({\n      myMeetingId: meeting._id\n    });\n\n    if (this.animatorMail) {\n      Meetings.update(meeting._id, {\n        $set: {\n          speaker: this.animatorMail\n        }\n      });\n    } else {\n      var mail = \"\" + this;\n      Meetings.update(meeting._id, {\n        $set: {\n          speaker: mail\n        }\n      });\n      Speeches.update(speeches._id, {\n        $pull: {\n          speakers: mail\n        }\n      });\n    }\n  },\n  'click #speakAsk': function (e) {\n    meeting = Session.get(\"meeting\");\n    speeches = Speeches.findOne({\n      myMeetingId: meeting._id\n    });\n    var mail = \"\" + this;\n    Speeches.update(speeches._id, {\n      $push: {\n        speakers: mail\n      }\n    });\n  },\n  'click #talkCancel': function (e) {\n    console.log(\"I click on Talk\"); //à modifier\n\n    var userId = Meteor.user().username;\n    var meetingId = Meteor.user().meeting;\n    var rank = 1;\n    console.log(\"userId = \" + userId);\n    console.log(\"meeting = \" + meetingId);\n  },\n  /** A click on waitProceed starts or stops the timer */'click #waitProceed': function (e) {\n    //Arret du timer\n    if (e.target.value == \"Wait\") {\n      Meteor.clearInterval(timerId);\n      Speeches.update(Speeches.findOne({\n        meeting: Session.get(\"meetingId\"),\n        status: \"ongoing\"\n      })._id, {\n        $set: {\n          status: \"pending\"\n        }\n      });\n    } else {\n      Speeches.update(Speeches.findOne({\n        meeting: Session.get(\"meetingId\"),\n        status: \"pending\"\n      }, {\n        sort: {\n          rank: 1\n        }\n      })._id, {\n        $set: {\n          status: \"ongoing\"\n        }\n      }); //Lancement du timer\n\n      timerId = Meteor.setInterval(function () {\n        var currentSpeech = Speeches.findOne({\n          meeting: Session.get(\"meetingId\"),\n          status: \"ongoing\"\n        });\n        var user = Users.findOne({\n          _id: currentSpeech.user\n        });\n        var paroles = [];\n        var time = 1; //Incrémentation du compteur associé a l'ordre du speech\n\n        if (user.paroles === undefined) {\n          paroles.push({\n            \"order\": currentSpeech.orderChoose,\n            \"time\": 1\n          });\n        } else {\n          var paroleFound = false;\n          paroles = user.paroles;\n          paroles.forEach(function (el) {\n            if (el['order'] == currentSpeech.orderChoose) {\n              paroleFound = true;\n              el['time'] = parseInt(el['time']) + 1;\n            }\n          });\n\n          if (!paroleFound) {\n            paroles.push({\n              \"order\": currentSpeech.orderChoose,\n              \"time\": 1\n            });\n          }\n        }\n\n        Users.update(user._id, {\n          $set: {\n            paroles: paroles\n          }\n        }); //Update du temps restant du speech\n\n        Speeches.update(currentSpeech._id, {\n          $set: {\n            timeLeft: Speeches.findOne({\n              meeting: Session.get(\"meetingId\"),\n              status: \"ongoing\"\n            }).timeLeft + 1\n          }\n        }); //Update du statut du speech si celui ci est terminé\n\n        if (Speeches.findOne({\n          meeting: Session.get(\"meetingId\"),\n          status: \"ongoing\"\n        }).timeLeft == Speeches.findOne({\n          meeting: Session.get(\"meetingId\"),\n          status: \"ongoing\"\n        }).time) {\n          Speeches.update(Speeches.findOne({\n            meeting: Session.get(\"meetingId\"),\n            status: \"ongoing\"\n          })._id, {\n            $set: {\n              status: \"done\"\n            }\n          });\n          Meteor.clearInterval(timerId);\n        }\n      }, 1000);\n    } //Rafraichi la fonction de drag'n'drop\n    //Utile pour empêcher le déplacement du premier meeting quand on clique sur 'proceed'\n    //trouver une autre solution (la méthode \"refresh\" semble inefficace)\n\n\n    setTimeout(function () {\n      sortableList.sortable(\"destroy\");\n      computeSortable(sortableList);\n    }, 100);\n  }\n}); //summernote : don't touch\n\nTemplate.meeting.onRendered(function () {\n  $(document).ready(function () {\n    $('#textareaRich').summernote({\n      height: 300\n    });\n  });\n});\nTemplate.meeting.events({\n  'click #saveReport': function (e) {\n    // increment the counter when button is clicked\n    console.log(\"I click on Talk\");\n    var title = $(' #TitleReport').val();\n    var data = $('#textareaRich').summernote('code'); //$('.click2edit').summernote('destroy');\n\n    console.log(\"title :\" + title + \" data = \" + data);\n    var doc = new jsPDF();\n    doc.text(10, 10, data);\n    doc.save(title); //Fonctionne mais enregistre en .txt\n    //var blob = new Blob([data], {type: \"text/plain;charset=utf-8\"});\n    //saveAs(blob, title+\".txt\");\n  }\n});","ast":null,"map":{"version":3,"sources":["/client/js/meeting.js"],"names":["sortableList","meeting","Presence","state","online","currentRoomId","Session","get","Template","helpers","users","userIds","Presences","find","map","presence","userId","userPres","Meteor","_id","$in","$ne","getSpeaker","speaker","Meetings","findOne","set","isSpeaker","mail","animatorMail","isAsking","Speeches","myMeetingId","speakers","count","ownMeeting","user","emails","address","partMeeting","res","events","e","speeches","update","$set","$pull","$push","console","log","username","meetingId","rank","target","value","clearInterval","timerId","status","sort","setInterval","currentSpeech","Users","paroles","time","undefined","push","orderChoose","paroleFound","forEach","el","parseInt","timeLeft","setTimeout","sortable","computeSortable","onRendered","$","document","ready","summernote","height","title","val","data","doc","jsPDF","text","save"],"mappings":"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","file":"/client/js/meeting.js.map","sourcesContent":["//import { Template } from 'meteor/templating';\n//import { ReactiveVar } from 'meteor/reactive-var';\n\nvar sortableList;\nvar meeting;\n\n//Template.meeting.isTrue = true;\n//console.log(Template.meeting.isTrue);\n\nPresence.state = function() {\n  return {\n    online:true,\n    currentRoomId: Session.get('currentRoomId')\n  };\n};\n\n\nTemplate.meeting.helpers({\n  users: function () {\n        // exclude the currentUser\n        var userIds = Presences.find().map(function(presence) {return presence.userId;});\n        var userPres = Presences.find().map(function(presence) {\n          if(presence.state.currentRoomId===Session.get('currentRoomId'))\n            return presence.userId;\n        });\n        /*\n        console.log(\"je suis connecté  \" +userIds);\n        console.log(\"je suis ici  \" + userPres);*/\n        return Meteor.users.find({_id: {$in: userPres, $ne: Meteor.userId()}});\n      },\n\n  getSpeaker: function(){\n    meeting=Session.get(\"meeting\");\n      var speaker = Meetings.findOne({_id:meeting._id}).speaker;\n      Session.set(\"speaker\",speaker);\n\n  },\n\n  isSpeaker: function(){\n      meeting=Session.get(\"meeting\");\n      speaker=Session.get(\"speaker\");\n      var mail;\n      if(this.animatorMail)\n        mail=this.animatorMail;\n      else\n        mail=\"\"+this;\n      return Meetings.findOne({_id:meeting._id}).speaker === mail;\n  },\n\n\nisAsking: function(){\n    meeting=Session.get(\"meeting\");\n    var mail;\n    if(this.animatorMail)\n      mail=this.animatorMail;\n    else\n      mail=\"\"+this;\n    return Speeches.find({myMeetingId:meeting._id,speakers:mail}).count();\n},\n\n\n/*\n  onLoad:function(){\n    var meeting = this;\n    Session.set(\"meeting\",this);\n    Session.set('currentRoomId',this._id);\n    var idMeeting=this._id;\n    var meetingParticipant= this.participantsEmails;\n    var meetingParticipantActivity = this.participantActivity;\n\n  },\n*/\n  ownMeeting:function(){\n    meeting=Session.get(\"meeting\");\n    return meeting.animatorMail === Meteor.user().emails[0].address;\n  },\n  partMeeting:function(){\n    var res=0;\n    if(this.animatorMail === Meteor.user().emails[0].address){\n      res=1;\n    }\n    else{\n      var mail=\"\"+this;\n      if(mail===Meteor.user().emails[0].address)\n        res=1;\n\n      meeting=Session.get(\"meeting\");\n\n/*\n      for(i=0;i<meeting.participantsEmails.length;i++){\n        if(meeting.participantsEmails[i]===Meteor.user().emails[0].address){\n\n          Meetings.update(idMeeting,{$set: {\"meetingParticipantActivity[i]\": true}});\n\n          i=this.participantsEmails.length;\n        }\n      }\n*/\n    }\n\n    return res;\n  }\n});\n\nTemplate.meeting.events({\n  'click #speakControl' : function(e){\n    meeting=Session.get(\"meeting\");\n    speeches=Speeches.findOne({myMeetingId:meeting._id});\n    if(this.animatorMail){\n      Meetings.update(meeting._id, {$set: {speaker: this.animatorMail}});\n    }\n    else {\n      var mail=\"\"+this;\n      Meetings.update(meeting._id, {$set: {speaker: mail}});\n        Speeches.update(speeches._id , {$pull: {speakers: mail }} );\n    }\n\n  },\n\n'click #speakAsk' : function(e){\n  meeting=Session.get(\"meeting\");\n  speeches=Speeches.findOne({myMeetingId:meeting._id});\n\n\n\n    var mail=\"\"+this;\n    Speeches.update(speeches._id , {$push: {speakers: mail }} );\n},\n\n\n  'click #talkCancel' : function(e){\n    console.log(\"I click on Talk\");\n    //à modifier\n      var userId = Meteor.user().username;\n      var meetingId = Meteor.user().meeting;\n      var rank = 1;\n      console.log(\"userId = \" + userId);\n      console.log(\"meeting = \" + meetingId);\n  },\n\n\n  /** A click on waitProceed starts or stops the timer */\n  'click #waitProceed': function(e) {\n    //Arret du timer\n    if(e.target.value == \"Wait\") {\n      Meteor.clearInterval(timerId);\n      Speeches.update(\n        Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"})._id,\n        {$set: {status: \"pending\"}}\n      );\n    } else {\n      Speeches.update(\n        Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"pending\"}, {sort: {rank: 1}})._id,\n        {$set: {status: \"ongoing\"}}\n      );\n\n      //Lancement du timer\n      timerId = Meteor.setInterval(function() {\n        var currentSpeech = Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"});\n        var user = Users.findOne({_id:currentSpeech.user});\n        var paroles = [];\n        var time = 1;\n\n        //Incrémentation du compteur associé a l'ordre du speech\n        if (user.paroles === undefined) {\n          paroles.push({\"order\": currentSpeech.orderChoose, \"time\": 1});\n        } else {\n          var paroleFound = false;\n          paroles = user.paroles;\n          paroles.forEach(function (el) {\n            if (el['order'] == currentSpeech.orderChoose) {\n              paroleFound = true;\n              el['time'] = parseInt(el['time'])+1;\n            }\n          });\n          if (!paroleFound) {\n            paroles.push({\"order\": currentSpeech.orderChoose, \"time\": 1});\n          }\n        }\n\n        Users.update(user._id,  {$set: {paroles: paroles}});\n\n        //Update du temps restant du speech\n        Speeches.update(\n          currentSpeech._id,\n          {$set: {timeLeft: Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"}).timeLeft + 1}}\n        );\n        //Update du statut du speech si celui ci est terminé\n        if(Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"}).timeLeft == Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"}).time){\n          Speeches.update(\n            Speeches.findOne({meeting: Session.get(\"meetingId\"), status: \"ongoing\"})._id,\n            {$set: {status: \"done\"}}\n          );\n          Meteor.clearInterval(timerId);\n        }\n      } , 1000);\n    }\n    //Rafraichi la fonction de drag'n'drop\n    //Utile pour empêcher le déplacement du premier meeting quand on clique sur 'proceed'\n    //trouver une autre solution (la méthode \"refresh\" semble inefficace)\n      setTimeout(function () {\n      sortableList.sortable(\"destroy\");\n      computeSortable(sortableList);\n    }, 100)\n    ;\n  },\n\n});\n\n\n\n\n\n\n\n\n\n\n//summernote : don't touch\nTemplate.meeting.onRendered(function () {\n$(document).ready(function(){\n  $('#textareaRich').summernote({\n    height: 300,\n  });\n});\n});\n\n\n\nTemplate.meeting.events({\n  'click #saveReport' :function(e) {\n    // increment the counter when button is clicked\n    console.log(\"I click on Talk\");\n    var title = $(' #TitleReport').val();\n    var data = $('#textareaRich').summernote('code');\n    //$('.click2edit').summernote('destroy');\n    console.log(\"title :\" + title + \" data = \" + data);\n    var doc = new jsPDF();\n    doc.text(10,10,data);\n    doc.save(title);\n    //Fonctionne mais enregistre en .txt\n    //var blob = new Blob([data], {type: \"text/plain;charset=utf-8\"});\n    //saveAs(blob, title+\".txt\");\n  }\n});\n"]},"hash":"0b61328a1dc25473cb9a9338bd4de2a789a350ae"}
